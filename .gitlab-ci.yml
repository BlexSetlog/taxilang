variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "-s mvn-settings.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
cache:
  paths:
    - .m2/repository

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
validate:
  image: maven:3.3.9-jdk-8
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS install'
  artifacts:
    reports:
      junit:
      # Note:This won't actually work, b/c of https://gitlab.com/gitlab-org/gitlab-runner/issues/2620
      # However, leaving this here to pick up later
        - "*/target/surefire-reports/TEST-*.xml"
  except:
     - master

publish-snapshot:
   image: maven:3.3.9-jdk-8
   stage: build
   script:
      - 'mvn $MAVEN_CLI_OPTS  deploy'
   artifacts:
      reports:
         junit:
            - "*/target/surefire-reports/TEST-*.xml"
   only:
      - develop

publish-release:
   variables:
      GIT_STRATEGY: none
   image: maven:3.3.9-jdk-8
   stage: build
   script:
      - echo $USER
             ## clean the working directory
      - BUILD_DIR=/home/gitlab-runner/builds/$RUNNER_TOKEN/0
      - CLONE_DIR="$BUILD_DIR/$CI_PROJECT_PATH"
      - cd $BUILD_DIR
      - rm -rf $CLONE_DIR
      - mkdir -p $CLONE_DIR

       ## clone the project each time (inefficient, consider performing fetch instead if it already exists)
      - git clone git@gitlab.com:taxi-lang/taxi-lang.git $CLONE_DIR
      - cd $CLONE_DIR
      # Install ssh-agent if not already installed, it is required by Docker.
      # (change apt-get to yum if you use a CentOS-based image)
#      - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

      # Run ssh-agent (inside the build environment)
#      - eval $(ssh-agent -s)
#      - mkdir -p ~/.ssh
#      - ssh-keyscan -p 10022 gitlab.com >> ~/.ssh/known_hosts

      # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
#      - ssh-add <(echo "$SSH_PRIVATE_KEY")
      - git checkout -B master

      - git config --global user.name "${GITLAB_USER_NAME}"
      - git config --global user.email "${GITLAB_USER_EMAIL}"
      - 'mvn $MAVEN_CLI_OPTS release:prepare release:perform'
   artifacts:
      reports:
         junit:
            # Note:This won't actually work, b/c of https://gitlab.com/gitlab-org/gitlab-runner/issues/2620
            # However, leaving this here to pick up later
            - "*/target/surefire-reports/TEST-*.xml"
   only:
      - master

