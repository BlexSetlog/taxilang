namespace vyne.openApi {
   [[ Properties of a workflow status. ]]
   model WorkflowStatusProperties {
      [[ Whether issues are editable in this status. ]]
      issueEditable : Boolean?
   }
   
   [[ Details about a notification associated with an event. ]]
   model EventNotification {
      [[ Expand options that include additional event notification details in the response. ]]
      expand : String
      [[ The ID of the notification. ]]
      id : Int
      [[ Identifies the recipients of the notification. ]]
      notificationType : String
      [[ The value of the `notificationType`:
      *  `User` The `parameter` is the user account ID.
      *  `Group` The `parameter` is the group name.
      *  `ProjectRole` The `parameter` is the project role ID.
      *  `UserCustomField` The `parameter` is the ID of the custom field.
      *  `GroupCustomField` The `parameter` is the ID of the custom field. ]]
      `parameter` : String
      [[ The specified group. ]]
      group : GroupName
      [[ The custom user or group field. ]]
      field : FieldDetails
      [[ The email address. ]]
      emailAddress : String
      [[ The specified project role. ]]
      projectRole : ProjectRole
      [[ The specified user. ]]
      user : UserDetails
   }
   
   [[ Details about a group name. ]]
   model GroupName {
      [[ The name of group. ]]
      name : String
      [[ The URL for these group details. ]]
      self : String
   }
   
   [[ Details about a field. ]]
   model FieldDetails {
      [[ The ID of the field. ]]
      id : String
      [[ The key of the field. ]]
      key : String
      [[ The name of the field. ]]
      name : String
      [[ Indicates whether the field is a custom field. ]]
      custom : Boolean
      [[ Indicates whether the content of the field can be used to order lists. ]]
      orderable : Boolean
      [[ Indicates whether the field can be used as a column on the issue navigator. ]]
      navigable : Boolean
      [[ Indicates whether the content of the field can be searched. ]]
      searchable : Boolean
      [[ The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ). ]]
      clauseNames : String[]
      [[ The scope of the field. ]]
      scope : Scope
      [[ The data schema for the field. ]]
      schema : JsonTypeBean
   }
   
   [[ The scope of an entity. Indicated for entities associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). ]]
   model Scope {
      [[ The type of scope. ]]
      `type` : String
      [[ The project the entity has scope in. ]]
      project : ProjectForScope
   }
   
   [[ Details about a next-gen project. ]]
   model ProjectForScope {
      [[ The URL of the project details. ]]
      self : String
      [[ The ID of the project. ]]
      id : String
      [[ The key of the project. ]]
      key : String
      [[ The name of the project. ]]
      name : String
      [[ The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project. ]]
      projectTypeKey : String
      [[ Whether or not the project is simplified. ]]
      simplified : Boolean
      [[ The URLs of the project's avatars. ]]
      avatarUrls : AvatarUrlsBean
      [[ The category the project belongs to. ]]
      projectCategory : UpdatedProjectCategory
   }
   
   model AvatarUrlsBean {
      [[ The URL of the item's 16x16 pixel avatar. ]]
      `16x16` : String
      [[ The URL of the item's 24x24 pixel avatar. ]]
      `24x24` : String
      [[ The URL of the item's 32x32 pixel avatar. ]]
      `32x32` : String
      [[ The URL of the item's 48x48 pixel avatar. ]]
      `48x48` : String
   }
   
   [[ A project category. ]]
   model UpdatedProjectCategory {
      [[ The URL of the project category. ]]
      self : String
      [[ The ID of the project category. ]]
      id : String
      [[ The name of the project category. ]]
      description : String
      [[ The description of the project category. ]]
      name : String
   }
   
   [[ The schema of a field. ]]
   model JsonTypeBean {
      [[ The data type of the field. ]]
      `type` : String?
      [[ When the data type is an array, the name of the field items within the array. ]]
      items : String
      [[ If the field is a system field, the name of the field. ]]
      system : String
      [[ If the field is a custom field, the URI of the field. ]]
      custom : String
      [[ If the field is a custom field, the custom ID of the field. ]]
      customId : Int
      [[ If the field is a custom field, the configuration of the field. ]]
      configuration : Any
   }
   
   [[ Details about the roles in a project. ]]
   model ProjectRole {
      [[ The URL the project role details. ]]
      self : String
      [[ The name of the project role. ]]
      name : String
      [[ The ID of the project role. ]]
      id : Int
      [[ The description of the project role. ]]
      description : String
      [[ The list of users who act in this role. ]]
      actors : RoleActor[]
      [[ The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). ]]
      scope : Scope
      [[ Whether this role is the admin role for the project. ]]
      admin : Boolean
      [[ Whether this role is the default role for the project ]]
      `default` : Boolean
   }
   
   [[ Details about a user assigned to a project role. ]]
   model RoleActor {
      id : Int
      [[ The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. ]]
      displayName : String
      `type` : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      name : String
      avatarUrl : String
      actorUser : ProjectRoleUserBean
      actorGroup : ProjectRoleGroupBean
      user : String
   }
   
   model ProjectRoleUserBean {
      [[ The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. ]]
      accountId : String
   }
   
   model ProjectRoleGroupBean {
      displayName : String
      name : String
   }
   
   [[ User details. ]]
   model UserDetails {
      [[ The URL of the user. ]]
      self : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      name : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      key : String
      [[ The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. ]]
      accountId : String
      [[ The email address of the user. Depending on the user’s privacy settings, this may be returned as null. ]]
      emailAddress : String
      [[ The avatars of the user. ]]
      avatarUrls : AvatarUrlsBean
      [[ The display name of the user. Depending on the user’s privacy settings, this may return an alternative value. ]]
      displayName : String
      [[ Whether the user is active. ]]
      active : Boolean
      [[ The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null. ]]
      timeZone : String
      [[ The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user) ]]
      accountType : String
   }
   
   [[ Details about the configuration of Jira. ]]
   model Configuration {
      [[ Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. ]]
      votingEnabled : Boolean
      [[ Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. ]]
      watchingEnabled : Boolean
      [[ Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. ]]
      unassignedIssuesAllowed : Boolean
      [[ Whether the ability to create subtasks for issues is enabled. ]]
      subTasksEnabled : Boolean
      [[ Whether the ability to link issues is enabled. ]]
      issueLinkingEnabled : Boolean
      [[ Whether the ability to track time is enabled. This property is deprecated. ]]
      timeTrackingEnabled : Boolean
      [[ Whether the ability to add attachments to issues is enabled. ]]
      attachmentsEnabled : Boolean
      [[ The configuration of time tracking. ]]
      timeTrackingConfiguration : TimeTrackingConfiguration
   }
   
   [[ Details of the time tracking configuration. ]]
   model TimeTrackingConfiguration {
      [[ The number of hours in a working day. ]]
      workingHoursPerDay : Decimal?
      [[ The number of days in a working week. ]]
      workingDaysPerWeek : Decimal?
      [[ The format that will appear on an issue's *Time Spent* field. ]]
      timeFormat : String?
      [[ The default unit of time applied to logged time. ]]
      defaultUnit : String?
   }
   
   [[ List of issue transitions. ]]
   model Transitions {
      [[ Expand options that include additional transitions details in the response. ]]
      expand : String
      [[ List of issue transitions. ]]
      transitions : IssueTransition[]
   }
   
   [[ Details of an issue transition. ]]
   model IssueTransition {
      [[ The ID of the issue transition. Required when specifying a transition to undertake. ]]
      id : String
      [[ The name of the issue transition. ]]
      name : String
      [[ Details of the issue status after the transition. ]]
      to : StatusDetails
      [[ Whether there is a screen associated with the issue transition. ]]
      hasScreen : Boolean
      [[ Whether the issue transition is global, that is, the transition is applied to issues regardless of their status. ]]
      isGlobal : Boolean
      [[ Whether this is the initial issue transition for the workflow. ]]
      isInitial : Boolean
      [[ Whether the issue has to meet criteria before the issue transition is applied. ]]
      isConditional : Boolean
      [[ Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request. ]]
      fields : Any
      [[ Expand options that include additional transition details in the response. ]]
      expand : String
   }
   
   [[ A status. ]]
   model StatusDetails {
      [[ The URL of the status. ]]
      self : String
      [[ The description of the status. ]]
      description : String
      [[ The URL of the icon used to represent the status. ]]
      iconUrl : String
      [[ The name of the status. ]]
      name : String
      [[ The ID of the status. ]]
      id : String
      [[ The category assigned to the status. ]]
      statusCategory : StatusCategory
   }
   
   [[ A status category. ]]
   model StatusCategory {
      [[ The URL of the status category. ]]
      self : String
      [[ The ID of the status category. ]]
      id : Int
      [[ The key of the status category. ]]
      key : String
      [[ The name of the color used to represent the status category. ]]
      colorName : String
      [[ The name of the status category. ]]
      name : String
   }
   
   [[ List of user account IDs. ]]
   model UserKey {
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      key : String
      [[ The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. ]]
      accountId : String
   }
   
   [[ A type of issue suggested for use in auto-completion. ]]
   model IssuePickerSuggestionsIssueType {
      [[ The label of the type of issues suggested for use in auto-completion. ]]
      label : String
      [[ If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned. ]]
      sub : String
      [[ The ID of the type of issues suggested for use in auto-completion. ]]
      id : String
      [[ If no issue suggestions are found, returns a message indicating no suggestions were found, ]]
      msg : String
      [[ A list of issues suggested for use in auto-completion. ]]
      issues : SuggestedIssue[]
   }
   
   [[ An issue suggested for use in the issue picker auto-completion. ]]
   model SuggestedIssue {
      [[ The ID of the issue. ]]
      id : Int
      [[ The key of the issue. ]]
      key : String
      [[ The key of the issue in HTML format. ]]
      keyHtml : String
      [[ The URL of the issue type's avatar. ]]
      img : String
      [[ The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags. ]]
      summary : String
      [[ The phrase containing the query string, as plain text. ]]
      summaryText : String
   }
   
   [[ Properties that identify a workflow. ]]
   model WorkflowId {
      [[ The name of the workflow. ]]
      name : String?
      [[ Whether the workflow is in the draft state. ]]
      draft : Boolean?
   }
   
   model IssueFieldOptionCreateBean {
      [[ The option's name, which is displayed in Jira. ]]
      value : String?
      [[ The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module. ]]
      properties : Any
      config : IssueFieldOptionConfiguration
   }
   
   [[ Details of the projects the option is available in. ]]
   model IssueFieldOptionConfiguration {
      [[ Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects. ]]
      scope : IssueFieldOptionScopeBean
      [[ DEPRECATED ]]
      attributes : String[]
   }
   
   model IssueFieldOptionScopeBean {
      [[ DEPRECATED ]]
      projects : Int[]
      [[ Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context. ]]
      projects2 : ProjectScopeBean[]
      [[ Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects. ]]
      global : GlobalScopeBean
   }
   
   model ProjectScopeBean {
      [[ The ID of the project that the option's behavior applies to. ]]
      id : Int
      [[ Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default. ]]
      attributes : String[]
   }
   
   model GlobalScopeBean {
      [[ Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default. ]]
      attributes : String[]
   }
   
   [[ Details of the group membership or permissions needed to receive the notification. ]]
   model NotificationRecipientsRestrictions {
      [[ List of group memberships required to receive the notification. ]]
      groups : GroupName[]
      [[ List of permissions required to receive the notification. ]]
      permissions : RestrictedPermission[]
   }
   
   [[ Details of the permission. ]]
   model RestrictedPermission {
      [[ The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. ]]
      id : String
      [[ The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. ]]
      key : String
   }
   
   [[ The details of watchers on an issue. ]]
   model Watchers {
      [[ The URL of these issue watcher details. ]]
      self : String
      [[ Indicates whether the calling user is watching this issue. ]]
      isWatching : Boolean
      [[ The number of users watching this issue. ]]
      watchCount : Int
      [[ Details of the users watching this issue. ]]
      watchers : UserDetails[]
   }
   
   [[ The linked item. ]]
   model RemoteObject {
      [[ The URL of the item. ]]
      url : String?
      [[ The title of the item. ]]
      title : String?
      [[ The summary details of the item. ]]
      summary : String
      [[ Details of the icon for the item. If no icon is defined, the default link icon is used in Jira. ]]
      icon : Icon
      [[ The status of the item. ]]
      status : Status
   }
   
   [[ An icon. If no icon is defined:
   *  for a status icon, no status icon displays in Jira.
   *  for the remote object icon, the default link icon displays in Jira. ]]
   model Icon {
      [[ The URL of an icon that displays at 16x16 pixel in Jira. ]]
      url16x16 : String
      [[ The title of the icon. This is used as follows:
      *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
      *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". ]]
      title : String
      [[ The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable. ]]
      link : String
   }
   
   [[ The status of the item. ]]
   model Status {
      [[ Indicates whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font. ]]
      resolved : Boolean
      [[ Details of the icon representing the status. If not provided, no status icon displays in Jira. ]]
      icon : Icon
   }
   
   [[ The hierarchy of issue types within a project. ]]
   model ProjectIssueTypeHierarchy {
      [[ The ID of the project. ]]
      projectId : Int
      [[ Details of an issue type hierarchy level. ]]
      hierarchy : ProjectIssueTypesHierarchyLevel[]
   }
   
   [[ Details of an issue type hierarchy level. ]]
   model ProjectIssueTypesHierarchyLevel {
      [[ The ID of the issue type hierarchy level. ]]
      entityId : uuid
      [[ The level of the issue type hierarchy level. ]]
      level : Int
      [[ The name of the issue type hierarchy level. ]]
      name : String
      [[ The list of issue types in the hierarchy level. ]]
      issueTypes : IssueTypeDetails[]
   }
   
   type uuid inherits String
   
   [[ Details of an issue type. ]]
   model IssueTypeDetails {
      [[ The ID of the issue type. ]]
      id : Int
      [[ The name of the issue type. ]]
      name : String
      [[ The avatar of the issue type. ]]
      avatarId : Int
   }
   
   [[ The ID or key of a linked issue. ]]
   model LinkedIssue {
      [[ The ID of an issue. Required if `key` isn't provided. ]]
      id : String
      [[ The key of an issue. Required if `id` isn't provided. ]]
      key : String
      [[ The URL of the issue. ]]
      self : String
      [[ The fields associated with the issue. ]]
      fields : Fields
   }
   
   [[ Key fields from the linked issue. ]]
   model Fields {
      [[ The summary description of the linked issue. ]]
      summary : String
      [[ The status of the linked issue. ]]
      status : StatusDetails
      [[ The priority of the linked issue. ]]
      priority : Priority
      [[ The assignee of the linked issue. ]]
      assignee : UserDetails
      issuetype : IssueTypeBean
      [[ The type of the linked issue. ]]
      issueType : IssueTypeBean
   }
   
   [[ An issue priority. ]]
   model Priority {
      [[ The URL of the issue priority. ]]
      self : String
      [[ The color used to indicate the issue priority. ]]
      statusColor : String
      [[ The description of the issue priority. ]]
      description : String
      [[ The URL of the icon for the issue priority. ]]
      iconUrl : String
      [[ The name of the issue priority. ]]
      name : String
      [[ The ID of the issue priority. ]]
      id : String
   }
   
   [[ Details about an issue type. ]]
   model IssueTypeBean {
      [[ The URL of these issue type details. ]]
      self : String
      [[ The ID of the issue type. ]]
      id : String
      [[ The description of the issue type. ]]
      description : String
      [[ The URL of the issue type's avatar. ]]
      iconUrl : String
      [[ The name of the issue type. ]]
      name : String
      [[ Indicates whether this issue type is used to create subtasks. ]]
      subtask : Boolean
      [[ The ID of the issue type's avatar. ]]
      avatarId : Int
      [[ project unique ID for next-gen entities ]]
      entityId : uuid
      [[ Details of the next-gen projects the issue type is available in. ]]
      scope : Scope
   }
   
   [[ Details of the options for a select list issue field. ]]
   model IssueFieldOption {
      [[ The unique identifier for the option. This is only unique within the select field's set of options. ]]
      id : Int?
      [[ The option's name, which is displayed in Jira. ]]
      value : String?
      [[ The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module. ]]
      properties : Any
      config : IssueFieldOptionConfiguration
   }
   
   [[ Details of a link between issues. ]]
   model IssueLink {
      [[ The ID of the issue link. ]]
      id : String
      [[ The URL of the issue link. ]]
      self : String
      [[ The type of link between the issues. ]]
      `type` : IssueLinkType
      [[ The issue the link joins to. ]]
      inwardIssue : LinkedIssue
      [[ The issue the link originates from. ]]
      outwardIssue : LinkedIssue
   }
   
   [[ This object is used as follows:
   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).
   *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types. ]]
   model IssueLinkType {
      [[ The ID of the issue link type and is used as follows:
      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only. ]]
      id : String
      [[ The name of the issue link type and is used as follows:
      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only. ]]
      name : String
      [[ The description of the issue link type inward link and is used as follows:
      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only. ]]
      inward : String
      [[ The description of the issue link type outward link and is used as follows:
      *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
      *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only. ]]
      outward : String
      [[ The URL of the issue link type. Read only. ]]
      self : String
   }
   
   [[ Details of a changed worklog. ]]
   model ChangedWorklog {
      [[ The ID of the worklog. ]]
      worklogId : Int
      [[ The datetime of the change. ]]
      updatedTime : Int
      [[ Details of properties associated with the change. ]]
      properties : EntityProperty[]
   }
   
   [[ An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/). ]]
   model EntityProperty {
      [[ The key of the property. Required on create and update. ]]
      key : String
      [[ The value of the property. Required on create and update. ]]
      value : Any
   }
   
   type avatarUrls
   
   model BulkOperationErrorResult {
      status : Int
      elementErrors : ErrorCollection
      failedElementNumber : Int
   }
   
   [[ Error messages from an operation. ]]
   model ErrorCollection {
      [[ The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" ]]
      errorMessages : String[]
      [[ The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." ]]
      errors : Any
      status : Int
   }
   
   model SimpleErrorCollection {
      [[ The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." ]]
      errors : Any
      [[ The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" ]]
      errorMessages : String[]
      httpStatusCode : Int
   }
   
   [[ List of issues and JQL queries. ]]
   model IssuesAndJQLQueries {
      [[ A list of JQL queries. ]]
      jqls : String[]?
      [[ A list of issue IDs. ]]
      issueIds : Int[]?
   }
   
   [[ Details about a workflow. ]]
   model Workflow {
      id : PublishedWorkflowId
      [[ The description of the workflow. ]]
      description : String?
      [[ The transitions of the workflow. ]]
      transitions : Transition[]
      [[ The statuses of the workflow. ]]
      statuses : WorkflowStatus[]
   }
   
   [[ Properties that identify a published workflow. ]]
   model PublishedWorkflowId {
      [[ The name of the workflow. ]]
      name : String?
   }
   
   [[ Details of a workflow transition. ]]
   model Transition {
      [[ The ID of the transition. ]]
      id : String?
      [[ The name of the transition. ]]
      name : String?
      [[ The description of the transition. ]]
      description : String?
      [[ The statuses the transition can start from. ]]
      `from` : String[]?
      [[ The status the transition goes to. ]]
      to : String?
      [[ The type of the transition. ]]
      `type` : String?
      screen : ScreenID
      rules : WorkflowRules
   }
   
   [[ ID of a screen. ]]
   model ScreenID {
      [[ The ID of the screen. ]]
      id : String?
   }
   
   [[ A collection of transition rules. ]]
   model WorkflowRules {
      [[ The workflow conditions. ]]
      conditions : WorkflowTransitionRule[]?
      [[ The workflow validators. ]]
      validators : WorkflowTransitionRule[]?
      [[ The workflow post functions. ]]
      postFunctions : WorkflowTransitionRule[]?
   }
   
   [[ A workflow transition rule. ]]
   model WorkflowTransitionRule {
      [[ The type of the transition rule. ]]
      `type` : String?
      [[ The configuration of the transition rule. This is currently returned only for some of the rule types. Availability of this property is subject to change. ]]
      configuration : Any
   }
   
   [[ Details of a workflow status. ]]
   model WorkflowStatus {
      [[ The ID of the issue status. ]]
      id : String?
      [[ The name of the status in the workflow. ]]
      name : String?
      properties : WorkflowStatusProperties
   }
   
   [[ A workflow transition rule. ]]
   model ConnectWorkflowTransitionRule {
      [[ The ID of the transition rule. ]]
      id : String?
      [[ The key of the rule, as defined in the Connect app descriptor. ]]
      key : String?
      configuration : RuleConfiguration
      transition : WorkflowTransition
   }
   
   [[ A rule configuration. ]]
   model RuleConfiguration {
      [[ Configuration of the rule, as it is stored by the Connect app on the rule configuration page. ]]
      value : String?
   }
   
   [[ A workflow transition. ]]
   model WorkflowTransition {
      [[ The transition ID. ]]
      id : Int?
      [[ The transition name. ]]
      name : String?
   }
   
   [[ A list of JQL queries to parse. ]]
   model JqlQueriesToParse {
      [[ A list of queries to parse. ]]
      queries : String[]?
   }
   
   [[ The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups. ]]
   model FoundGroups {
      [[ Header text indicating the number of groups in the response and the total number of groups found in the search. ]]
      header : String
      [[ The total number of groups found in the search. ]]
      total : Int
      groups : FoundGroup[]
   }
   
   [[ A group found in a search. ]]
   model FoundGroup {
      [[ The name of the group. ]]
      name : String
      [[ The group name with the matched query string highlighted with the HTML bold tag. ]]
      html : String
      labels : GroupLabel[]
      [[ The ID of the group, if available, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. ]]
      groupId : String
   }
   
   [[ A group label. ]]
   model GroupLabel {
      [[ The group label name. ]]
      text : String
      [[ The title of the group label. ]]
      title : String
      [[ The type of the group label. ]]
      `type` : String
   }
   
   model SimpleListWrapperGroupName {
      size : Int
      items : GroupName[]
      pagingCallback : ListWrapperCallbackGroupName
      callback : ListWrapperCallbackGroupName
      max_results : Int
   }
   
   type ListWrapperCallbackGroupName
   
   [[ Details about a project. ]]
   model Project {
      [[ Expand options that include additional project details in the response. ]]
      expand : String
      [[ The URL of the project details. ]]
      self : String
      [[ The ID of the project. ]]
      id : String
      [[ The key of the project. ]]
      key : String
      [[ A brief description of the project. ]]
      description : String
      [[ The username of the project lead. ]]
      lead : User
      [[ List of the components contained in the project. ]]
      components : Component[]
      [[ List of the issue types available in the project. ]]
      issueTypes : IssueTypeBean[]
      [[ A link to information about this project, such as project documentation. ]]
      url : String
      [[ An email address associated with the project. ]]
      email : String
      [[ The default assignee when creating issues for this project. ]]
      assigneeType : String
      [[ The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post). ]]
      versions : Version[]
      [[ The name of the project. ]]
      name : String
      [[ The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post). ]]
      roles : Any
      [[ The URLs of the project's avatars. ]]
      avatarUrls : AvatarUrlsBean
      [[ The category the project belongs to. ]]
      projectCategory : ProjectCategory
      [[ The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project. ]]
      projectTypeKey : String
      [[ Whether the project is simplified. ]]
      simplified : Boolean
      [[ The type of the project. ]]
      style : String
      [[ Whether the project is selected as a favorite. ]]
      favourite : Boolean
      [[ Whether the project is private. ]]
      isPrivate : Boolean
      [[ The issue type hierarchy for the project ]]
      issueTypeHierarchy : Hierarchy
      [[ User permissions on the project ]]
      permissions : ProjectPermissions
      [[ Map of project properties ]]
      properties : Any
      [[ unique ID for next-gen projects ]]
      uuid : uuid
      [[ Insights about the project. ]]
      insight : ProjectInsight
   }
   
   [[ A user. ]]
   model User {
      [[ The URL of the user. ]]
      self : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      key : String
      [[ The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. ]]
      accountId : String
      [[ The user account type. Can take the following values:
      *  `atlassian` regular Atlassian user account
      *  `app` system account used for Connect applications and OAuth to represent external systems
      *  `customer` Jira Service Desk account representing an external service desk ]]
      accountType : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      name : String
      [[ The email address of the user. Depending on the user’s privacy setting, this may be returned as null. ]]
      emailAddress : String
      [[ The avatars of the user. ]]
      avatarUrls : AvatarUrlsBean
      [[ The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. ]]
      displayName : String
      [[ Indicates whether the user is active. ]]
      active : Boolean
      [[ The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null. ]]
      timeZone : String
      [[ The locale of the user. Depending on the user’s privacy setting, this may be returned as null. ]]
      locale : String
      [[ The groups that the user belongs to. ]]
      groups : SimpleListWrapperGroupName
      [[ The application roles the user is assigned to. ]]
      applicationRoles : SimpleListWrapperApplicationRole
      [[ Expand options that include additional user details in the response. ]]
      expand : String
   }
   
   model SimpleListWrapperApplicationRole {
      size : Int
      items : ApplicationRole[]
      pagingCallback : ListWrapperCallbackApplicationRole
      callback : ListWrapperCallbackApplicationRole
      max_results : Int
   }
   
   [[ Details of an application role. ]]
   model ApplicationRole {
      [[ The key of the application role. ]]
      key : String
      [[ The groups associated with the application role. ]]
      groups : String[]
      [[ The display name of the application role. ]]
      name : String
      [[ The groups that are granted default access for this application role. ]]
      defaultGroups : String[]
      [[ Determines whether this application role should be selected by default on user creation. ]]
      selectedByDefault : Boolean
      [[ Deprecated. ]]
      defined : Boolean
      [[ The maximum count of users on your license. ]]
      numberOfSeats : Int
      [[ The count of users remaining on your license. ]]
      remainingSeats : Int
      [[ The number of users counting against your license. ]]
      userCount : Int
      [[ The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license. ]]
      userCountDescription : String
      hasUnlimitedSeats : Boolean
      [[ Indicates if the application role belongs to Jira platform (`jira-core`). ]]
      platform : Boolean
   }
   
   type ListWrapperCallbackApplicationRole
   
   [[ Details about a project component. ]]
   model Component {
      [[ The URL of the component. ]]
      self : String
      [[ The unique identifier for the component. ]]
      id : String
      [[ The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters. ]]
      name : String
      [[ The description for the component. Optional when creating or updating a component. ]]
      description : String
      [[ The user details for the component's lead user. ]]
      lead : User
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      leadUserName : String
      [[ The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. Optional when creating or updating a component. ]]
      leadAccountId : String
      [[ The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
      *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
      *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
      *  `UNASSIGNED` an assignee is not set for issues created with this component.
      *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
      Default value: `PROJECT_DEFAULT`.
      Optional when creating or updating a component. ]]
      assigneeType : String
      [[ The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component. ]]
      assignee : User
      [[ The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
      *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
      *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
      *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
      *  `PROJECT_DEFAULT` when none of the preceding cases are true. ]]
      realAssigneeType : String
      [[ The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee. ]]
      realAssignee : User
      [[ Indicates whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned. ]]
      isAssigneeTypeValid : Boolean
      [[ The key of the project the component is assigned to. Required when creating a component. Can't be updated. ]]
      project : String
      [[ The ID of the project the component is assigned to. ]]
      projectId : Int
   }
   
   [[ Details about a project version. ]]
   model Version {
      [[ Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
      *  `operations` Returns the list of operations available for this version.
      *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
      Optional for create and update. ]]
      expand : String
      [[ The URL of the version. ]]
      self : String
      [[ The ID of the version. ]]
      id : String
      [[ The description of the version. Optional when creating or updating a version. ]]
      description : String
      [[ The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters. ]]
      name : String
      [[ Indicates that the version is archived. Optional when creating or updating a version. ]]
      archived : Boolean
      [[ Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version. ]]
      released : Boolean
      [[ The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. ]]
      startDate : Date
      [[ The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. ]]
      releaseDate : Date
      [[ Indicates that the version is overdue. ]]
      overdue : Boolean
      [[ The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format. ]]
      userStartDate : String
      [[ The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format. ]]
      userReleaseDate : String
      [[ Deprecated. Use `projectId`. ]]
      project : String
      [[ The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version. ]]
      projectId : Int
      [[ The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version. ]]
      moveUnfixedIssuesTo : String
      [[ If the expand option `operations` is used, returns the list of operations available for this version. ]]
      operations : SimpleLink[]
      [[ If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. ]]
      issuesStatusForFixVersion : VersionIssuesStatus
   }
   
   [[ Details about the operations available in this version. ]]
   model SimpleLink {
      id : String
      styleClass : String
      iconClass : String
      label : String
      title : String
      href : String
      weight : Int
   }
   
   [[ Counts of the number of issues in various statuses. ]]
   model VersionIssuesStatus {
      [[ Count of issues with a status other than *to do*, *in progress*, and *done*. ]]
      unmapped : Int
      [[ Count of issues with status *to do*. ]]
      toDo : Int
      [[ Count of issues with status *in progress*. ]]
      inProgress : Int
      [[ Count of issues with status *done*. ]]
      done : Int
   }
   
   [[ A project category. ]]
   model ProjectCategory {
      [[ The URL of the project category. ]]
      self : String
      [[ The ID of the project category. ]]
      id : String
      [[ The name of the project category. Required on create, optional on update. ]]
      name : String
      [[ The description of the project category. Required on create, optional on update. ]]
      description : String
   }
   
   [[ Project Issue Type Hierarchy ]]
   model Hierarchy {
      level : HierarchyLevel[]
   }
   
   model HierarchyLevel {
      id : Int
      name : String
      aboveLevelId : Int
      belowLevelId : Int
      projectConfigurationId : Int
      issueTypeIds : Int[]
      externalUuid : uuid
   }
   
   [[ Permissions which a user has on a project. ]]
   model ProjectPermissions {
      [[ Indicates whether the logged user can edit the project. ]]
      canEdit : Boolean
   }
   
   [[ Additional details about a project. ]]
   model ProjectInsight {
      [[ Total issue count. ]]
      totalIssueCount : Int
      [[ The last issue update time. ]]
      lastIssueUpdateTime : DateTime
   }
   
   [[ List of project avatars. ]]
   model ProjectAvatars {
      [[ List of avatars included with Jira. These avatars cannot be deleted. ]]
      system : Avatar[]
      [[ List of avatars added to Jira. These avatars may be deleted. ]]
      custom : Avatar[]
   }
   
   [[ Details of an avatar. ]]
   model Avatar {
      [[ The ID of the avatar. ]]
      id : String?
      [[ The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user. ]]
      owner : String
      [[ Indicates whether the avatar is a system avatar. ]]
      isSystemAvatar : Boolean
      [[ Indicates whether the avatar is used in Jira. For example, shown as a project's avatar. ]]
      isSelected : Boolean
      [[ Indicates whether the avatar can be deleted. ]]
      isDeletable : Boolean
      [[ The file name of the avatar icon. Returned for system avatars. ]]
      fileName : String
      [[ The list of avatar icon URLs. ]]
      urls : Any
   }
   
   model LinkIssueRequestJsonBean {
      `type` : IssueLinkType
      inwardIssue : LinkedIssue
      outwardIssue : LinkedIssue
      comment : Comment
   }
   
   [[ A comment. ]]
   model Comment {
      [[ The URL of the comment. ]]
      self : String
      [[ The ID of the comment. ]]
      id : String
      [[ The ID of the user who created the comment. ]]
      author : UserDetails
      [[ The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). ]]
      body : Any
      [[ The rendered version of the comment. ]]
      renderedBody : String
      [[ The ID of the user who updated the comment last. ]]
      updateAuthor : UserDetails
      [[ The date and time at which the comment was created. ]]
      created : DateTime
      [[ The date and time at which the comment was updated last. ]]
      updated : DateTime
      [[ The group or role to which this comment is visible. Optional on create and update. ]]
      visibility : Visibility
      [[ Indicates whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation. ]]
      jsdPublic : Boolean
      [[ A list of comment properties. Optional on create and update. ]]
      properties : EntityProperty[]
   }
   
   [[ The group or role to which this item is visible. ]]
   model Visibility {
      [[ Indicates whether visibility of this item is restricted to a group or role. ]]
      `type` : String
      [[ The name of the group or role to which visibility of this item is restricted. ]]
      value : String
   }
   
   [[ List of issue level security items in a project. ]]
   model ProjectIssueSecurityLevels {
      [[ Issue level security items list. ]]
      levels : SecurityLevel[]?
   }
   
   [[ Details of an issue level security item. ]]
   model SecurityLevel {
      [[ The URL of the issue level security item. ]]
      self : String
      [[ The ID of the issue level security item. ]]
      id : String
      [[ The description of the issue level security item. ]]
      description : String
      [[ The name of the issue level security item. ]]
      name : String
   }
   
   [[ A page of items. ]]
   model PageBeanUser {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : User[]
   }
   
   [[ A list of projects in which a user is granted permissions. ]]
   model PermittedProjects {
      [[ A list of projects. ]]
      projects : ProjectIdentifierBean[]
   }
   
   [[ The identifiers for a project. ]]
   model ProjectIdentifierBean {
      [[ The ID of the project. ]]
      id : Int
      [[ The key of the project. ]]
      key : String
   }
   
   [[ An icon. ]]
   model IconBean {
      [[ The URL of a 16x16 pixel icon. ]]
      url16x16 : String
      [[ The title of the icon, for use as a tooltip on the icon. ]]
      title : String
      [[ The URL of the tooltip, used only for a status icon. ]]
      link : String
   }
   
   [[ Details of the issue creation metadata for an issue type. ]]
   model IssueTypeIssueCreateMetadata {
      [[ The URL of these issue type details. ]]
      self : String
      [[ The ID of the issue type. ]]
      id : String
      [[ The description of the issue type. ]]
      description : String
      [[ The URL of the issue type's avatar. ]]
      iconUrl : String
      [[ The name of the issue type. ]]
      name : String
      [[ Indicates whether this issue type is used to create subtasks. ]]
      subtask : Boolean
      [[ The ID of the issue type's avatar. ]]
      avatarId : Int
      [[ project unique ID for next-gen entities ]]
      entityId : uuid
      [[ Details of the next-gen projects the issue type is available in. ]]
      scope : Scope
      [[ Expand options that include additional issue type metadata details in the response. ]]
      expand : String
      [[ List of the fields available when creating an issue for the issue type. ]]
      fields : Any
   }
   
   model Group {
      [[ The name of group. ]]
      name : String
      [[ The URL for these group details. ]]
      self : String
      [[ A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`. ]]
      users : PagedListUserDetailsApplicationUser
      [[ Expand options that include additional group details in the response. ]]
      expand : String
   }
   
   [[ A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40. ]]
   model PagedListUserDetailsApplicationUser {
      [[ The number of items on the page. ]]
      size : Int
      [[ The list of items. ]]
      items : UserDetails[]
      [[ The maximum number of results that could be on the page. ]]
      max_results : Int
      [[ The index of the first item returned on the page. ]]
      start_index : Int
      [[ The index of the last item returned on the page. ]]
      end_index : Int
   }
   
   [[ A list of webhooks. ]]
   model WebhookDetails {
      [[ The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
      *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]` (for custom fields—only the epic label custom field is supported).
      *  Operators: `=`, `!=`, `IN`, and `NOT IN`. ]]
      jqlFilter : String?
      [[ The Jira events that trigger the webhook. ]]
      events : String[]
   }
   
   [[ Details of a permission scheme. ]]
   model PermissionScheme {
      [[ The expand options available for the permission scheme. ]]
      expand : String
      [[ The ID of the permission scheme. ]]
      id : Int
      [[ The URL of the permission scheme. ]]
      self : String
      [[ The name of the permission scheme. Must be unique. ]]
      name : String?
      [[ A description for the permission scheme. ]]
      description : String
      [[ The scope of the permission scheme. ]]
      scope : Scope
      [[ The permission scheme to create or update. See [About permission schemes and grants](#about-permission-schemes-and-grants) for more information. ]]
      permissions : PermissionGrant[]
   }
   
   [[ Details about a permission granted to a user or group. ]]
   model PermissionGrant {
      [[ The ID of the permission granted details. ]]
      id : Int
      [[ The URL of the permission granted details. ]]
      self : String
      [[ The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](#holder-object) in *Get all permission schemes* for more information. ]]
      holder : PermissionHolder
      [[ The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions. ]]
      permission : String
   }
   
   [[ Details of a user, group, field, or project role that holds a permission. See [Holder object](#holder-object) in *Get all permission schemes* for more information. ]]
   model PermissionHolder {
      [[ The type of permission holder. ]]
      `type` : String?
      [[ The identifier of permission holder. ]]
      `parameter` : String
      [[ Expand options that include additional permission holder details in the response. ]]
      expand : String
   }
   
   [[ A page of items. ]]
   model PageBeanContext {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Context[]
   }
   
   [[ A context. ]]
   model Context {
      [[ The ID of the context. ]]
      id : Int
      [[ The name of the context. ]]
      name : String
      [[ The scope of the context. ]]
      scope : Scope
   }
   
   [[ Details of a custom field option and its cascading options. ]]
   model CustomFieldOptionDetails {
      [[ The ID of the custom field option. ]]
      id : Int
      [[ The value of the custom field option. ]]
      value : String
      [[ The cascading options. ]]
      cascadingOptions : String[]
   }
   
   model CreateUpdateRoleRequestBean {
      [[ The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role. ]]
      name : String
      [[ A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role. ]]
      description : String
   }
   
   [[ A parsed JQL query. ]]
   model JqlQuery {
      where : JqlQueryClause
      orderBy : JqlQueryOrderByClause
   }
   
   type JqlQueryClause
   
   [[ Details of the order-by JQL clause. ]]
   model JqlQueryOrderByClause {
      [[ The list of order-by clause fields and their ordering directives. ]]
      fields : JqlQueryOrderByClauseElement[]?
   }
   
   [[ An element of the order-by JQL clause. ]]
   model JqlQueryOrderByClauseElement {
      field : JqlQueryField
      [[ The direction in which to order the results. ]]
      direction : String
   }
   
   [[ A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries. ]]
   model JqlQueryField {
      [[ The name of the field. ]]
      name : String?
      [[ When the field refers to a value in an entity property, details of the entity property value. ]]
      property : JqlQueryFieldEntityProperty[]
   }
   
   [[ Details of an entity property. ]]
   model JqlQueryFieldEntityProperty {
      [[ The object on which the property is set. ]]
      entity : String?
      [[ The key of the property. ]]
      key : String?
      [[ The path in the property value to query. ]]
      path : String?
      [[ The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module. ]]
      `type` : String
   }
   
   [[ A page of items. ]]
   model PageBeanWebhook {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Webhook[]
   }
   
   [[ A webhook. ]]
   model Webhook {
      [[ The ID of the webhook. ]]
      id : Int?
      [[ The JQL filter that specifies which issues the webhook is sent for. ]]
      jqlFilter : String?
      [[ The Jira events that trigger the webhook. ]]
      events : String[]
      expirationDate : Int?
   }
   
   model DeleteAndReplaceVersionBean {
      [[ The ID of the version to update `fixVersion` to when the field contains the deleted version. ]]
      moveFixIssuesTo : Int
      [[ The ID of the version to update `affectedVersion` to when the field contains the deleted version. ]]
      moveAffectedIssuesTo : Int
      [[ An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version. ]]
      customFieldReplacementList : CustomFieldReplacement[]
   }
   
   [[ Details about the replacement for a deleted version. ]]
   model CustomFieldReplacement {
      [[ The ID of the custom field in which to replace the version number. ]]
      customFieldId : Int
      [[ The version number to use as a replacement for the deleted version. ]]
      moveTo : Int
   }
   
   [[ Details about a notification. ]]
   model Notification {
      [[ The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary. ]]
      subject : String
      [[ The plain text body of the email notification for the issue. ]]
      textBody : String
      [[ The HTML body of the email notification for the issue. ]]
      htmlBody : String
      [[ The recipients of the email notification for the issue. ]]
      to : NotificationRecipients
      [[ Restricts the notifications to users with the specified permissions. ]]
      restrict : NotificationRecipientsRestrictions
   }
   
   [[ Details of the users and groups to receive the notification. ]]
   model NotificationRecipients {
      [[ Indicates whether the notification should be sent to the issue's reporter. ]]
      reporter : Boolean
      [[ Indicates whether the notification should be sent to the issue's assignees. ]]
      assignee : Boolean
      [[ Indicates whether the notification should be sent to the issue's watchers. ]]
      watchers : Boolean
      [[ Indicates whether the notification should be sent to the issue's voters. ]]
      voters : Boolean
      [[ List of users to receive the notification. ]]
      users : UserDetails[]
      [[ List of groups to receive the notification. ]]
      groups : GroupName[]
   }
   
   [[ A change item. ]]
   model ChangeDetails {
      [[ The name of the field changed. ]]
      field : String
      [[ The type of the field changed. ]]
      fieldtype : String
      [[ The ID of the field changed. ]]
      fieldId : String
      [[ The details of the original value. ]]
      `from` : String
      [[ The details of the original value as a string. ]]
      fromString : String
      [[ The details of the new value. ]]
      to : String
      [[ The details of the new value as a string. ]]
      toString : String
   }
   
   model UserWriteBean {
      [[ The URL of the user. ]]
      self : String
      [[ The key for the user. When provided with `name`, overrides the value in `name` to set both `name` and `key`. This property is deprecated because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      key : String
      [[ The username for the user. This property is deprecated because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      name : String
      [[ A password for the user. If a password is not set, a random password is generated. ]]
      password : String
      [[ The email address for the user. ]]
      emailAddress : String?
      [[ The display name for the user. ]]
      displayName : String?
      [[ Sends the user an email confirmation that they have been added to Jira. Default is `false`. ]]
      notification : String
      [[ Deprecated, do not use. ]]
      applicationKeys : String[]
   }
   
   [[ Status details for an issue type. ]]
   model IssueTypeWithStatus {
      [[ The URL of the issue type's status details. ]]
      self : String?
      [[ The ID of the issue type. ]]
      id : String?
      [[ The name of the issue type. ]]
      name : String?
      [[ Indicates whether this issue type represents subtasks. ]]
      subtask : Boolean?
      [[ List of status details for the issue type. ]]
      statuses : StatusDetails[]?
   }
   
   [[ Details of a worklog. ]]
   model Worklog {
      [[ The URL of the worklog item. ]]
      self : String
      [[ Details of the user who created the worklog. ]]
      author : UserDetails
      [[ Details of the user who last updated the worklog. ]]
      updateAuthor : UserDetails
      [[ A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog. ]]
      comment : Any
      [[ The datetime on which the worklog was created. ]]
      created : DateTime
      [[ The datetime on which the worklog was last updated. ]]
      updated : DateTime
      [[ Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog. ]]
      visibility : Visibility
      [[ The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog. ]]
      started : DateTime
      [[ The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided. ]]
      timeSpent : String
      [[ The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided. ]]
      timeSpentSeconds : Int
      [[ The ID of the worklog record. ]]
      id : String
      [[ The ID of the issue this worklog is for. ]]
      issueId : String
      [[ Details of properties for the worklog. Optional when creating or updating a worklog. ]]
      properties : EntityProperty[]
   }
   
   type JqlQueryUnitaryOperand
   
   [[ List of system avatars. ]]
   model SystemAvatars {
      [[ A list of avatar details. ]]
      system : Avatar[]
   }
   
   [[ The details of votes on an issue. ]]
   model Votes {
      [[ The URL of these issue vote details. ]]
      self : String
      [[ The number of votes on the issue. ]]
      votes : Int
      [[ Indicates whether the user making this request has voted on the issue. ]]
      hasVoted : Boolean
      [[ List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission. ]]
      voters : User[]
   }
   
   [[ Details of names changed in the record event. ]]
   model ChangedValueBean {
      [[ The name of the field changed. ]]
      fieldName : String
      [[ The value of the field before the change. ]]
      changedFrom : String
      [[ The value of the field after the change. ]]
      changedTo : String
   }
   
   [[ Bulk issue property update request details. ]]
   model BulkIssuePropertyUpdateRequest {
      [[ The value of the property. The value must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters. ]]
      value : Any
      [[ The bulk operation filter. ]]
      `filter` : IssueFilterForBulkPropertySet
   }
   
   [[ Bulk operation filter details. ]]
   model IssueFilterForBulkPropertySet {
      [[ List of issues to perform the bulk operation on. ]]
      entityIds : Int[]
      [[ The value of properties to perform the bulk operation on. ]]
      currentValue : Any
      [[ Indicates whether the bulk operation occurs only when the property is present on or absent from an issue. ]]
      hasProperty : Boolean
   }
   
   model PermissionsKeysBean {
      [[ A list of permission keys. ]]
      permissions : String[]?
   }
   
   model IssueBean {
      [[ Expand options that include additional issue details in the response. ]]
      expand : String
      [[ The ID of the issue. ]]
      id : String
      [[ The URL of the issue details. ]]
      self : String
      [[ The key of the issue. ]]
      key : String
      [[ The rendered value of each field present on the issue. ]]
      renderedFields : Any
      [[ Details of the issue properties identified in the request. ]]
      properties : Any
      [[ The ID and name of each field present on the issue. ]]
      names : Any
      [[ The schema describing each field present on the issue. ]]
      schema : Any
      [[ The transitions that can be performed on the issue. ]]
      transitions : IssueTransition[]
      [[ The operations that can be performed on the issue. ]]
      operations : Operations
      [[ The metadata for the fields on the issue that can be amended. ]]
      editmeta : IssueUpdateMetadata
      [[ Details of changelogs associated with the issue. ]]
      changelog : PageOfChangelogs
      [[ The versions of each field on the issue. ]]
      versionedRepresentations : Any
      fieldsToInclude : IncludedFields
      fields : Any
   }
   
   [[ Details of the operations that can be performed on the issue. ]]
   model Operations {
      [[ Details of the link groups defining issue operations. ]]
      linkGroups : LinkGroup[]
   }
   
   [[ Details a link group, which defines issue operations. ]]
   model LinkGroup {
      id : String
      styleClass : String
      header : SimpleLink
      weight : Int
      links : SimpleLink[]
      groups : LinkGroup[]
   }
   
   [[ A list of editable field details. ]]
   model IssueUpdateMetadata {
      [[ A list of editable field details. ]]
      fields : Any
   }
   
   [[ A page of changelogs. ]]
   model PageOfChangelogs {
      [[ The index of the first item returned on the page. ]]
      startAt : Int
      [[ The maximum number of results that could be on the page. ]]
      maxResults : Int
      [[ The number of results on the page. ]]
      total : Int
      [[ The list of changelogs. ]]
      histories : Changelog[]
   }
   
   [[ A changelog. ]]
   model Changelog {
      [[ The ID of the changelog. ]]
      id : String
      [[ The user who made the change. ]]
      author : UserDetails
      [[ The date on which the change took place. ]]
      created : DateTime
      [[ The list of items changed. ]]
      items : ChangeDetails[]
      [[ The history metadata associated with the changed. ]]
      historyMetadata : HistoryMetadata
   }
   
   [[ Details of issue history metadata. ]]
   model HistoryMetadata {
      [[ The type of the history record. ]]
      `type` : String
      [[ The description of the history record. ]]
      description : String
      [[ The description key of the history record. ]]
      descriptionKey : String
      [[ The activity described in the history record. ]]
      activityDescription : String
      [[ The key of the activity described in the history record. ]]
      activityDescriptionKey : String
      [[ The description of the email address associated the history record. ]]
      emailDescription : String
      [[ The description key of the email address associated the history record. ]]
      emailDescriptionKey : String
      [[ Details of the user whose action created the history record. ]]
      actor : HistoryMetadataParticipant
      [[ Details of the system that generated the history record. ]]
      generator : HistoryMetadataParticipant
      [[ Details of the cause that triggered the creation the history record. ]]
      cause : HistoryMetadataParticipant
      [[ Additional arbitrary information about the history record. ]]
      extraData : Any
   }
   
   [[ Details of user or system associated with a issue history metadata item. ]]
   model HistoryMetadataParticipant {
      [[ The ID of the user or system associated with a history record. ]]
      id : String
      [[ The display name of the user or system associated with a history record. ]]
      displayName : String
      [[ The key of the display name of the user or system associated with a history record. ]]
      displayNameKey : String
      [[ The type of the user or system associated with a history record. ]]
      `type` : String
      [[ The URL to an avatar for the user or system associated with a history record. ]]
      avatarUrl : String
      [[ The URL of the user or system associated with a history record. ]]
      url : String
   }
   
   model IncludedFields {
      actuallyIncluded : String[]
      included : String[]
      excluded : String[]
   }
   
   [[ An operand that is a user-provided value. ]]
   model ValueOperand {
      [[ The operand value. ]]
      value : String?
   }
   
   [[ List of all permission schemes. ]]
   model PermissionSchemes {
      [[ Permission schemes list. ]]
      permissionSchemes : PermissionScheme[]
   }
   
   model AddGroupBean {
      [[ The name of the group. ]]
      name : String?
   }
   
   [[ A page of items. ]]
   model PageBeanScreen {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Screen[]
   }
   
   [[ A screen. ]]
   model Screen {
      [[ The ID of the screen. ]]
      id : Int
      [[ The name of the screen. ]]
      name : String
      [[ The scope of the screen. ]]
      scope : Scope
   }
   
   [[ A list of issues suggested for use in auto-completion. ]]
   model IssuePickerSuggestions {
      [[ A list of issues for an issue type suggested for use in auto-completion. ]]
      sections : IssuePickerSuggestionsIssueType[]
   }
   
   model IssueTypeUpdateBean {
      [[ The unique name for the issue type. The maximum length is 60 characters. ]]
      name : String
      [[ The description of the issue type. ]]
      description : String
      [[ The ID of an issue type avatar. ]]
      avatarId : Int
   }
   
   [[ The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response. ]]
   model JexpJqlIssues {
      [[ The JQL query. ]]
      `query` : String
      [[ The index of the first issue to return from the JQL query. ]]
      startAt : Int
      [[ The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded. ]]
      maxResults : Int
      [[ Determines how to validate the JQL query and treat the validation results. ]]
      validation : String
   }
   
   [[ Details of any errors encountered while updating workflow transition rules for a workflow. ]]
   model WorkflowTransitionRulesUpdateErrorDetails {
      workflowId : WorkflowId
      [[ A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated. ]]
      ruleUpdateErrors : Any?
      [[ The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries. ]]
      updateErrors : String[]
   }
   
   [[ Property key details. ]]
   model PropertyKey {
      [[ The URL of the property. ]]
      self : String
      [[ The key of the property. ]]
      key : String
   }
   
   [[ The wrapper for the issue creation metadata for a list of projects. ]]
   model IssueCreateMetadata {
      [[ Expand options that include additional project details in the response. ]]
      expand : String
      [[ List of projects and their issue creation metadata. ]]
      projects : ProjectIssueCreateMetadata[]
   }
   
   [[ Details of the issue creation metadata for a project. ]]
   model ProjectIssueCreateMetadata {
      [[ Expand options that include additional project issue create metadata details in the response. ]]
      expand : String
      [[ The URL of the project. ]]
      self : String
      [[ The ID of the project. ]]
      id : String
      [[ The key of the project. ]]
      key : String
      [[ The name of the project. ]]
      name : String
      [[ List of the project's avatars, returning the avatar size and associated URL. ]]
      avatarUrls : AvatarUrlsBean
      [[ List of the issue types supported by the project. ]]
      issuetypes : IssueTypeIssueCreateMetadata[]
   }
   
   model MoveFieldBean {
      [[ The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided. ]]
      after : String
      [[ The named position to which the screen tab field should be moved. Required if `after` isn't provided. ]]
      position : String
   }
   
   [[ Details of a permission and its availability to a user. ]]
   model UserPermission {
      [[ The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. ]]
      id : String
      [[ The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. ]]
      key : String
      [[ The name of the permission. ]]
      name : String
      [[ The type of the permission. ]]
      `type` : String
      [[ The description of the permission. ]]
      description : String
      [[ Indicates whether the permission is available to the user in the queried context. ]]
      havePermission : Boolean
      [[ Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.` ]]
      deprecatedKey : Boolean
   }
   
   model NestedResponse {
      status : Int
      errorCollection : ErrorCollection
   }
   
   [[ The metadata describing an issue field. ]]
   model FieldMetadata {
      [[ Indicates whether the field is required. ]]
      required : Boolean?
      [[ The data type of the field. ]]
      schema : JsonTypeBean
      [[ The name of the field. ]]
      name : String?
      [[ The key of the field. ]]
      key : String?
      [[ The URL that can be used to automatically complete the field. ]]
      autoCompleteUrl : String
      [[ Indicates whether the field has a default value. ]]
      hasDefaultValue : Boolean
      [[ The list of operations that can be performed on the field. ]]
      operations : String[]?
      [[ The list of values allowed in the field. ]]
      allowedValues : Any[]
      [[ The default value of the field. ]]
      defaultValue : Any
   }
   
   [[ Details of an issue update request. ]]
   model IssueUpdateDetails {
      [[ Details of a transition. Required when performing a transition, optional when creating or editing an issue. ]]
      transition : IssueTransition
      [[ List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`. ]]
      fields : Any
      [[ List of operations to perform on issue screen fields. Note that fields included in here cannot be included in `fields`. ]]
      update : Any
      [[ Additional issue history details. ]]
      historyMetadata : HistoryMetadata
      [[ Details of issue properties to be add or update. ]]
      properties : EntityProperty[]
   }
   
   [[ Details of an item associated with the changed record. ]]
   model AssociatedItemBean {
      [[ The ID of the associated record. ]]
      id : String
      [[ The name of the associated record. ]]
      name : String
      [[ The type of the associated record. ]]
      typeName : String
      [[ The ID of the associated parent record. ]]
      parentId : String
      [[ The name of the associated parent record. ]]
      parentName : String
   }
   
   [[ A list of issue link type beans. ]]
   model IssueLinkTypes {
      [[ The issue link type bean. ]]
      issueLinkTypes : IssueLinkType[]
   }
   
   [[ Details of a dashboard. ]]
   model Dashboard {
      description : String
      [[ The ID of the dashboard. ]]
      id : String
      [[ Indicates whether the dashboard is selected as a favorite by the user. ]]
      isFavourite : Boolean
      [[ The name of the dashboard. ]]
      name : String
      [[ The owner of the dashboard. ]]
      owner : UserBean
      [[ The number of users who have this dashboard as a favorite. ]]
      popularity : Int
      [[ The rank of this dashboard. ]]
      rank : Int
      [[ The URL of these dashboard details. ]]
      self : String
      [[ The details of any share permissions for the dashboard. ]]
      sharePermissions : SharePermission[]
      [[ The URL of the dashboard. ]]
      `view` : String
   }
   
   model UserBean {
      [[ This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
      The key of the user. ]]
      key : String
      [[ The URL of the user. ]]
      self : String
      [[ This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
      The username of the user. ]]
      name : String
      [[ The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. ]]
      displayName : String
      [[ Indicates whether the user is active. ]]
      active : Boolean
      [[ The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. ]]
      accountId : String
      [[ The avatars of the user. ]]
      avatarUrls : UserBeanAvatarUrls
   }
   
   model UserBeanAvatarUrls {
      [[ The URL of the user's 32x32 pixel avatar. ]]
      `32x32` : String
      [[ The URL of the user's 48x48 pixel avatar. ]]
      `48x48` : String
      [[ The URL of the user's 16x16 pixel avatar. ]]
      `16x16` : String
      [[ The URL of the user's 24x24 pixel avatar. ]]
      `24x24` : String
   }
   
   [[ Details of a share permission for the filter. ]]
   model SharePermission {
      [[ The unique identifier of the share permission. ]]
      id : Int
      [[ The type of share permission:
      *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
      *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
      *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
      *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
      *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
      *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request. ]]
      `type` : String?
      [[ The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.
      For a request, specify the `id` for the project. ]]
      project : Project
      [[ The project role that the filter is shared with.
      For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in. ]]
      role : ProjectRole
      [[ The group that the filter is shared with. For a request, specify the `name` property for the group. ]]
      group : GroupName
   }
   
   [[ Details about an attachment. ]]
   model Attachment {
      [[ The URL of the attachment details response. ]]
      self : String
      [[ The ID of the attachment. ]]
      id : String
      [[ The file name of the attachment. ]]
      filename : String
      [[ Details of the user who added the attachment. ]]
      author : UserDetails
      [[ The datetime the attachment was created. ]]
      created : DateTime
      [[ The size of the attachment. ]]
      size : Int
      [[ The MIME type of the attachment. ]]
      mimeType : String
      [[ The content of the attachment. ]]
      content : String
      [[ The URL of a thumbnail representing the attachment. ]]
      thumbnail : String
   }
   
   [[ List of security schemes. ]]
   model SecuritySchemes {
      [[ List of security schemes. ]]
      issueSecuritySchemes : SecurityScheme[]
   }
   
   [[ Details about a security scheme. ]]
   model SecurityScheme {
      [[ The URL of the issue security scheme. ]]
      self : String
      [[ The ID of the issue security scheme. ]]
      id : Int
      [[ The name of the issue security scheme. ]]
      name : String
      [[ The description of the issue security scheme. ]]
      description : String
      [[ The ID of the default security level. ]]
      defaultSecurityLevelId : Int
      levels : SecurityLevel[]
   }
   
   [[ The result of a JQL search. ]]
   model SearchResults {
      [[ Expand options that include additional search result details in the response. ]]
      expand : String
      [[ The index of the first item returned on the page. ]]
      startAt : Int
      [[ The maximum number of results that could be on the page. ]]
      maxResults : Int
      [[ The number of results on the page. ]]
      total : Int
      [[ The list of issues found by the search. ]]
      issues : IssueBean[]
      [[ Any warnings related to the JQL query. ]]
      warningMessages : String[]
      [[ The ID and name of each field in the search results. ]]
      names : Any
      [[ The schema describing the field types in the search results. ]]
      schema : Any
   }
   
   [[ Details of a field that can be used in advanced searches. ]]
   model FieldReferenceData {
      [[ The field identifier. ]]
      value : String
      [[ The display name of the field. ]]
      displayName : String
      [[ Indicates whether the field can be used in a query's `ORDER BY` clause. ]]
      orderable : String
      [[ Indicates whether the content of this field can be searched. ]]
      searchable : String
      [[ Indicates whether the field provide auto-complete suggestions. ]]
      auto : String
      [[ If the item is a custom field, the ID of the custom field. ]]
      cfid : String
      [[ The valid search operators for the field. ]]
      operators : String[]
      [[ The data types of items in the field. ]]
      types : String[]
   }
   
   [[ An operand that is a list of values. ]]
   model ListOperand {
      [[ The list of operand values. ]]
      values : JqlQueryUnitaryOperand[]
   }
   
   [[ Details of the scope of the default sharing for new filters and dashboards. ]]
   model DefaultShareScope {
      [[ The scope of the default sharing for new filters and dashboards:
      *  `AUTHENTICATED` Shared with all logged-in users.
      *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
      *  `PRIVATE` Not shared with any users. ]]
      scope : String?
   }
   
   [[ Details of webhooks to register. ]]
   model WebhookRegistrationDetails {
      [[ A list of webhooks. ]]
      webhooks : WebhookDetails[]?
      [[ The URL that specifies where to send the webhooks. ]]
      url : String?
   }
   
   [[ The results from a JQL query. ]]
   model AutoCompleteSuggestions {
      [[ The list of suggested item. ]]
      results : AutoCompleteSuggestion[]
   }
   
   [[ A field auto-complete suggestion. ]]
   model AutoCompleteSuggestion {
      [[ The value of a suggested item. ]]
      value : String
      [[ The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag. ]]
      displayName : String
   }
   
   model ActorsMap {
      [[ The user account ID of the user to add. ]]
      user : String[]
      [[ The name of the group to add. ]]
      group : String[]
   }
   
   [[ A time predicate for a temporal JQL clause. ]]
   model JqlQueryClauseTimePredicate {
      [[ The operator between the field and the operand. ]]
      operator : String?
      operand : JqlQueryClauseOperand?
   }
   
   type JqlQueryClauseOperand
   
   [[ Details about a workflow scheme. ]]
   model WorkflowScheme {
      [[ The ID of the workflow scheme. ]]
      id : Int
      [[ The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme. ]]
      name : String
      [[ The description of the workflow scheme. ]]
      description : String
      [[ The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*. ]]
      defaultWorkflow : String
      [[ The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. ]]
      issueTypeMappings : Any
      [[ For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. ]]
      originalDefaultWorkflow : String
      [[ For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. ]]
      originalIssueTypeMappings : Any
      [[ Indicates whether the workflow scheme is a draft or not. ]]
      draft : Boolean
      [[ The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. ]]
      lastModifiedUser : User
      [[ The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. ]]
      lastModified : String
      self : String
      [[ Indicates whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
      *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
      *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
      *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
      Defaults to `false`. ]]
      updateDraftIfNeeded : Boolean
      [[ The issue types available in Jira. ]]
      issueTypes : Any
   }
   
   [[ A screen tab. ]]
   model ScreenableTab {
      [[ The ID of the screen tab. ]]
      id : Int
      [[ The name of the screen tab. The maximum length is 255 characters. ]]
      name : String?
   }
   
   [[ Details of global permissions to look up and project permissions with associated projects and issues to look up. ]]
   model BulkPermissionsRequestBean {
      [[ Project permissions with associated projects and issues to look up. ]]
      projectPermissions : BulkProjectPermissions[]
      [[ Global permissions to look up. ]]
      globalPermissions : String[]
   }
   
   [[ Details of project permissions and associated issues and projects to look up. ]]
   model BulkProjectPermissions {
      [[ List of issue IDs. ]]
      issues : Int[]
      [[ List of project IDs. ]]
      projects : Int[]
      [[ List of project permissions. ]]
      permissions : String[]?
   }
   
   [[ Details about permissions. ]]
   model Permissions {
      [[ List of permissions. ]]
      permissions : Any
   }
   
   model SimpleApplicationPropertyBean {
      [[ The ID of the application property. ]]
      id : String
      [[ The new value. ]]
      value : String
   }
   
   [[ Details about a workflow. ]]
   model DeprecatedWorkflow {
      [[ The name of the workflow. ]]
      name : String
      [[ The description of the workflow. ]]
      description : String
      [[ The datetime the workflow was last modified. ]]
      lastModifiedDate : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      lastModifiedUser : String
      [[ The account ID of the user that last modified the workflow. ]]
      lastModifiedUserAccountId : String
      [[ The number of steps included in the workflow. ]]
      steps : Int
      [[ The scope where this workflow applies ]]
      scope : Scope
      `default` : Boolean
   }
   
   [[ Value of a custom field option and the values of its cascading options. ]]
   model CustomFieldOptionValue {
      [[ The value of the custom field option. ]]
      value : String
      [[ The cascading options. ]]
      cascadingOptions : String[]
   }
   
   [[ Details of an application property. ]]
   model ApplicationProperty {
      [[ The ID of the application property. The ID and key are the same. ]]
      id : String
      [[ The key of the application property. The ID and key are the same. ]]
      key : String
      [[ The new value. ]]
      value : String
      [[ The name of the application property. ]]
      name : String
      [[ The description of the application property. ]]
      desc : String
      [[ The data type of the application property. ]]
      `type` : String
      [[ The default value of the application property. ]]
      defaultValue : String
      example : String
      [[ The allowed values, if applicable. ]]
      allowedValues : String[]
   }
   
   [[ Container for a list of webhook IDs. ]]
   model ContainerForWebhookIDs {
      [[ A list of webhook IDs. ]]
      webhookIds : Int[]?
   }
   
   [[ Details about a project type. ]]
   model ProjectType {
      [[ The key of the project type. ]]
      key : String
      [[ The formatted key of the project type. ]]
      formattedKey : String
      [[ The key of the project type's description. ]]
      descriptionI18nKey : String
      [[ The icon of the project type. ]]
      icon : String
      [[ The color of the project type. ]]
      color : String
   }
   
   [[ Details of an operation to perform on a field. ]]
   model FieldUpdateOperation {
      [[ A map containing the name of a field and the value to add to it. ]]
      add : Any
      [[ A map containing the name of a field and the value to set in it. ]]
      set : Any
      [[ A map containing the name of a field and the value to removed from it. ]]
      remove : Any
      [[ A map containing the name of a field and the value to edit in it. ]]
      edit : Any
   }
   
   model SearchRequestBean {
      [[ A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. ]]
      jql : String
      [[ The index of the first item to return in the page of results (page offset). The base index is `0`. ]]
      startAt : Int
      [[ The maximum number of items to return per page. ]]
      maxResults : Int
      [[ A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
      *  `*all` Returns all fields.
      *  `*navigable` Returns navigable fields.
      *  Any issue field, prefixed with a minus to exclude.
      The default is `*navigable`.
      Examples:
      *  `summary,comment` Returns the summary and comments fields only.
      *  `-description` Returns all navigable (default) fields except description.
      *  `*all,-comment` Returns all fields except comments.
      Multiple `fields` parameters can be included in a request.
      Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. ]]
      fields : String[]
      [[ Determines how to validate the JQL query and treat the validation results. Supported values:
      *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
      *  `warn` Returns all errors as warnings.
      *  `none` No validation is performed.
      *  `true` *Deprecated* A legacy synonym for `strict`.
      *  `false` *Deprecated* A legacy synonym for `warn`.
      The default is `strict`.
      Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value. ]]
      validateQuery : String
      [[ Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
      *  `renderedFields` Returns field values rendered in HTML format.
      *  `names` Returns the display name of each field.
      *  `schema` Returns the schema describing a field type.
      *  `transitions` Returns all possible transitions for the issue.
      *  `operations` Returns all possible operations for the issue.
      *  `editmeta` Returns information about how each field can be edited.
      *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
      *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version. ]]
      expand : String[]
      [[ A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list. ]]
      properties : String[]
      [[ Reference fields by their key (rather than ID). The default is `false`. ]]
      fieldsByKeys : Boolean
   }
   
   model AddFieldBean {
      [[ The ID of the field to add. ]]
      fieldId : String?
   }
   
   [[ Details of a filter identified as part of a search. ]]
   model FoundFilter {
      [[ The URL of the filter. ]]
      self : String
      [[ The unique identifier for the filter. ]]
      id : String
      [[ The name of the filter. Must be unique. ]]
      name : String?
      [[ A description of the filter. ]]
      description : String
      [[ The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings. ]]
      owner : User
      [[ The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*. ]]
      jql : String
      [[ A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*. ]]
      viewUrl : String
      [[ A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*. ]]
      searchUrl : String
      [[ Indicates whether the filter is selected as a favorite by any users, not including the filter owner. ]]
      favourite : Boolean
      [[ The count of how many users have selected this filter as a favorite, including the filter owner. ]]
      favouritedCount : Int
      [[ The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter. ]]
      sharePermissions : SharePermission[]
      [[ The users that are subscribed to the filter. ]]
      subscriptions : FilterSubscription[]
   }
   
   [[ Details of a user or group subscribing to a filter. ]]
   model FilterSubscription {
      [[ The ID of the filter subscription. ]]
      id : Int
      [[ The user subscribing to filter. ]]
      user : User
      [[ The group subscribing to filter. ]]
      group : GroupName
   }
   
   [[ Lists of JQL reference data. ]]
   model JQLReferenceData {
      [[ List of fields usable in JQL queries. ]]
      visibleFieldNames : FieldReferenceData[]
      [[ List of functions usable in JQL queries. ]]
      visibleFunctionNames : FunctionReferenceData[]
      [[ List of JQL query reserved words. ]]
      jqlReservedWords : String[]
   }
   
   [[ Details of functions that can be used in advanced searches. ]]
   model FunctionReferenceData {
      [[ The function identifier. ]]
      value : String
      [[ The display name of the function. ]]
      displayName : String
      [[ Indicates whether the function can take a list of arguments. ]]
      isList : String
      [[ The data types returned by the function. ]]
      types : String[]
   }
   
   model ProjectRoleActorsUpdateBean {
      [[ The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. ]]
      id : Int
      [[ The actors to add to the project role. Add groups using `atlassian-group-role-actor` and a list of group names. For example, `"atlassian-group-role-actor":["another","administrators"]}`. Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`. ]]
      categorisedActors : Any
   }
   
   [[ A list of parsed JQL queries. ]]
   model ParsedJqlQueries {
      [[ A list of parsed JQL queries. ]]
      queries : ParsedJqlQuery[]?
   }
   
   [[ Details of a parsed JQL query. ]]
   model ParsedJqlQuery {
      [[ The JQL query that was parsed and validated. ]]
      `query` : String?
      [[ The syntax tree of the query. Empty if the query was invalid. ]]
      structure : JqlQuery
      [[ The list of syntax or validation errors. ]]
      errors : String[]
   }
   
   [[ Details about the default workflow. ]]
   model DefaultWorkflow {
      [[ The name of the workflow to set as the default workflow. ]]
      workflow : String?
      [[ Indicates whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`. ]]
      updateDraftIfNeeded : Boolean
   }
   
   [[ Identifiers for a project. ]]
   model ProjectIdentifiers {
      [[ The URL of the created project. ]]
      self : String?
      [[ The ID of the created project. ]]
      id : Int?
      [[ The key of the created project. ]]
      key : String?
   }
   
   [[ List of changed worklogs. ]]
   model ChangedWorklogs {
      [[ Changed worklog list. ]]
      values : ChangedWorklog[]
      [[ The datetime of the first worklog item in the list. ]]
      since : Int
      [[ The datetime of the last worklog item in the list. ]]
      until : Int
      [[ The URL of this changed worklogs list. ]]
      self : String
      [[ The URL of the next list of changed worklogs. ]]
      nextPage : String
      lastPage : Boolean
   }
   
   [[ The date the newly refreshed webhooks expire. ]]
   model WebhooksExpirationDate {
      expirationDate : Int?
   }
   
   [[ Details of a remote issue link. ]]
   model RemoteIssueLinkRequest {
      [[ An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.
      Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
      The maximum length is 255 characters. ]]
      globalId : String
      [[ Details of the remote application the linked item is in. For example, trello. ]]
      application : Application
      [[ Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira. ]]
      relationship : String
      [[ Details of the item linked to. ]]
      object : RemoteObject
   }
   
   [[ The application the linked item is in. ]]
   model Application {
      [[ The name-spaced type of the application, used by registered rendering apps. ]]
      `type` : String
      [[ The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last. ]]
      name : String
   }
   
   [[ Paginated list of worklog details ]]
   model PageOfWorklogs {
      [[ The index of the first item returned on the page. ]]
      startAt : Int
      [[ The maximum number of results that could be on the page. ]]
      maxResults : Int
      [[ The number of results on the page. ]]
      total : Int
      [[ List of worklogs. ]]
      worklogs : Worklog[]
   }
   
   [[ A container for a list of workflow schemes together with the projects they are associated with. ]]
   model ContainerOfWorkflowSchemeAssociations {
      [[ A list of workflow schemes together with projects they are associated with. ]]
      values : WorkflowSchemeAssociations[]?
   }
   
   [[ A workflow scheme along with a list of projects that use it. ]]
   model WorkflowSchemeAssociations {
      [[ The list of projects that use the workflow scheme. ]]
      projectIds : String[]?
      [[ The workflow scheme. ]]
      workflowScheme : WorkflowScheme
   }
   
   model JiraExpressionsComplexityValueBean {
      [[ The complexity value of the current expression. ]]
      value : Int?
      [[ The maximum allowed complexity. The evaluation will fail if this value is exceeded. ]]
      limit : Int?
   }
   
   [[ Details of a field. ]]
   model Field {
      [[ The ID of the field. ]]
      id : String?
      [[ The name of the field. ]]
      name : String?
      schema : JsonTypeBean
      [[ The description of the field. ]]
      description : String
      [[ The key of the field. ]]
      key : String
      [[ Whether the field is locked. ]]
      isLocked : Boolean
      [[ The date when the value of the field last changed. ]]
      lastUsed : DateTime
      [[ Number of screens where the field is used. ]]
      screensCount : Int
      [[ Number of contexts where the field is used. ]]
      contextsCount : Int
   }
   
   [[ Details about the Jira instance. ]]
   model ServerInformation {
      [[ The base URL of the Jira instance. ]]
      baseUrl : String
      [[ The version of Jira. ]]
      version : String
      [[ The major, minor, and revision version numbers of the Jira version. ]]
      versionNumbers : Int[]
      [[ The type of server deployment. This is always returned as *Cloud*. ]]
      deploymentType : String
      [[ The build number of the Jira version. ]]
      buildNumber : Int
      [[ The timestamp when the Jira version was built. ]]
      buildDate : DateTime
      [[ The time in Jira when this request was responded to. ]]
      serverTime : DateTime
      [[ The unique identifier of the Jira version. ]]
      scmInfo : String
      [[ The name of the Jira instance. ]]
      serverTitle : String
      [[ Jira instance health check results. Deprecated and no longer returned. ]]
      healthChecks : HealthCheckResult[]
   }
   
   [[ Jira instance health check results. Deprecated and no longer returned. ]]
   model HealthCheckResult {
      [[ The name of the Jira health check item. ]]
      name : String
      [[ The description of the Jira health check item. ]]
      description : String
      [[ Indicates whether the Jira health check item passed or failed. ]]
      passed : Boolean
   }
   
   [[ ID of a registered webhook or error messages explaining why a webhook wasn't registered. ]]
   model RegisteredWebhook {
      [[ The ID of the webhook. Returned if the webhook is created. ]]
      createdWebhookId : Int
      [[ Error messages specifying why the webhook creation failed. ]]
      errors : String[]
   }
   
   [[ Details of a custom option for a field. ]]
   model CustomFieldOption {
      [[ The URL of these custom field option details. ]]
      self : String
      [[ The value of the custom field option. ]]
      value : String
   }
   
   [[ A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with. ]]
   model UserList {
      [[ The number of items on the page. ]]
      size : Int
      [[ The list of items. ]]
      items : User[]
      [[ The maximum number of results that could be on the page. ]]
      max_results : Int
      [[ The index of the first item returned on the page. ]]
      start_index : Int
      [[ The index of the last item returned on the page. ]]
      end_index : Int
   }
   
   [[ A page containing dashboard details. ]]
   model PageOfDashboards {
      [[ The index of the first item returned on the page. ]]
      startAt : Int
      [[ The maximum number of results that could be on the page. ]]
      maxResults : Int
      [[ The number of results on the page. ]]
      total : Int
      [[ The URL of the previous page of results, if any. ]]
      prev : String
      [[ The URL of the next page of results, if any. ]]
      next : String
      [[ List of dashboards. ]]
      dashboards : Dashboard[]
   }
   
   model JiraExpressionEvalContextBean {
      [[ The issue that is available under the `issue` variable when evaluating the expression. ]]
      issue : IdOrKeyBean
      [[ The collection of issues that is available under the `issues` variable when evaluating the expression. ]]
      issues : JexpIssues
      [[ The project that is available under the `project` variable when evaluating the expression. ]]
      project : IdOrKeyBean
      [[ The ID of the sprint that is available under the `sprint` variable when evaluating the expression. ]]
      sprint : Int
      [[ The ID of the board that is available under the `board` variable when evaluating the expression. ]]
      board : Int
      [[ The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression. ]]
      serviceDesk : Int
      [[ The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type. ]]
      customerRequest : Int
   }
   
   model IdOrKeyBean {
      [[ The ID of the referenced item. ]]
      id : Int
      [[ The key of the referenced item. ]]
      key : String
   }
   
   [[ The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. ]]
   model JexpIssues {
      [[ The JQL query that specifies the set of issues available in the Jira expression. ]]
      jql : JexpJqlIssues
   }
   
   [[ A page of items. ]]
   model PageBeanString {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : String[]
   }
   
   [[ Details of an issue navigator column item. ]]
   model ColumnItem {
      [[ The issue navigator column label. ]]
      label : String
      [[ The issue navigator column value. ]]
      value : String
   }
   
   [[ Details of the identifiers for a created or updated remote issue link. ]]
   model RemoteIssueLinkIdentifies {
      [[ The ID of the remote issue link, such as the ID of the item on the remote system. ]]
      id : Int
      [[ The URL of the remote issue link. ]]
      self : String
   }
   
   type ConnectModule
   
   [[ A page of items. ]]
   model PageBeanVersion {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Version[]
   }
   
   model CustomFieldDefinitionJsonBean {
      [[ The name of the custom field, which is displayed in Jira. This is not the unique identifier. ]]
      name : String?
      [[ The description of the custom field, which is displayed in Jira. ]]
      description : String
      [[ The type of the custom field. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppicker*.
      *  `cascadingselect`: Allows multiple values to be selected using two select lists
      *  `datepicker`: Stores a date using a picker control
      *  `datetime`: Stores a date with a time component
      *  `float`: Stores and validates a numeric (floating point) input
      *  `grouppicker`: Stores a user group using a picker control
      *  `importid`: A read-only field that stores the previous ID of the issue from the system that it was imported from
      *  `labels`: Stores labels
      *  `multicheckboxes`: Stores multiple values using checkboxes
      *  `multigrouppicker`: Stores multiple user groups using a picker control
      *  `multiselect`: Stores multiple values using a select list
      *  `multiuserpicker`: Stores multiple users using a picker control
      *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control
      *  `project`: Stores a project from a list of projects that the user is permitted to view
      *  `radiobuttons`: Stores a value using radio buttons
      *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API
      *  `select`: Stores a value from a configurable list of options
      *  `textarea`: Stores a long text string using a multiline text area
      *  `textfield`: Stores a text string using a single-line text box
      *  `url`: Stores a URL
      *  `userpicker`: Stores a user using a picker control
      *  `version`: Stores a version using a picker control ]]
      `type` : String?
      [[ The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.
      The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
      *  `cascadingselect`: `cascadingselectsearcher`
      *  `datepicker`: `daterange`
      *  `datetime`: `datetimerange`
      *  `float`: `exactnumber` or `numberrange`
      *  `grouppicker`: `grouppickersearcher`
      *  `importid`: `exactnumber` or `numberrange`
      *  `labels`: `labelsearcher`
      *  `multicheckboxes`: `multiselectsearcher`
      *  `multigrouppicker`: `multiselectsearcher`
      *  `multiselect`: `multiselectsearcher`
      *  `multiuserpicker`: `userpickergroupsearcher`
      *  `multiversion`: `versionsearcher`
      *  `project`: `projectsearcher`
      *  `radiobuttons`: `multiselectsearcher`
      *  `readonlyfield`: `textsearcher`
      *  `select`: `multiselectsearcher`
      *  `textarea`: `textsearcher`
      *  `textfield`: `textsearcher`
      *  `url`: `exacttextsearcher`
      *  `userpicker`: `userpickergroupsearcher`
      *  `version`: `versionsearcher` ]]
      searcherKey : String?
   }
   
   [[ A page of items. ]]
   model PageBeanUserKey {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : UserKey[]
   }
   
   [[ A page of items. ]]
   model PageBeanScreenScheme {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : ScreenScheme[]
   }
   
   [[ A screen scheme. ]]
   model ScreenScheme {
      [[ The ID of the screen scheme. ]]
      id : Int
      [[ The name of the screen scheme. ]]
      name : String
      [[ The description of the screen scheme. ]]
      description : String
      [[ IDs of the screens for the associated screen types. ]]
      screens : ScreenTypeIDsBean
   }
   
   [[ IDs of the screens for the various screen types associated with the screen scheme. ]]
   model ScreenTypeIDsBean {
      [[ The ID of the edit screen. ]]
      edit : Int?
      [[ The ID of the create screen. ]]
      create : Int?
      [[ The ID of the view screen. ]]
      `view` : Int?
      [[ The ID of the default screen. ]]
      `default` : Int
   }
   
   [[ Details about a filter. ]]
   model Filter {
      [[ The URL of the filter. ]]
      self : String
      [[ The unique identifier for the filter. ]]
      id : String
      [[ The name of the filter. Must be unique. ]]
      name : String?
      [[ A description of the filter. ]]
      description : String
      [[ The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings. ]]
      owner : User
      [[ The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*. ]]
      jql : String
      [[ A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*. ]]
      viewUrl : String
      [[ A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*. ]]
      searchUrl : String
      [[ Indicates whether the filter is selected as a favorite. ]]
      favourite : Boolean
      [[ The count of how many users have selected this filter as a favorite, including the filter owner. ]]
      favouritedCount : Int
      [[ The groups and projects that the filter is shared with. ]]
      sharePermissions : SharePermission[]
      [[ A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with. ]]
      sharedUsers : UserList
      [[ A paginated list of the users that are subscribed to the filter. ]]
      subscriptions : FilterSubscriptionsList
   }
   
   [[ A paginated list of subscriptions to a filter. ]]
   model FilterSubscriptionsList {
      [[ The number of items on the page. ]]
      size : Int
      [[ The list of items. ]]
      items : FilterSubscription[]
      [[ The maximum number of results that could be on the page. ]]
      max_results : Int
      [[ The index of the first item returned on the page. ]]
      start_index : Int
      [[ The index of the last item returned on the page. ]]
      end_index : Int
   }
   
   [[ List of custom fields using the version. ]]
   model VersionUsageInCustomField {
      [[ The name of the custom field. ]]
      fieldName : String
      [[ The ID of the custom field. ]]
      customFieldId : Int
      [[ Count of the issues where the custom field contains the version. ]]
      issueCountWithVersionInCustomField : Int
   }
   
   [[ The description of the page of issues loaded by the provided JQL query. ]]
   model IssuesJqlMetaDataBean {
      [[ The index of the first issue. ]]
      startAt : Int?
      [[ The maximum number of issues that could be loaded in this evaluation. ]]
      maxResults : Int?
      [[ The number of issues that were loaded in this evaluation. ]]
      count : Int?
      [[ The total number of issues the JQL returned. ]]
      totalCount : Int?
      [[ Any warnings related to the JQL query. Present only if the validation mode was set to `warn`. ]]
      validationWarnings : String[]
   }
   
   [[ Details of options to create for a custom field. ]]
   model BulkCreateCustomFieldOptionRequest {
      [[ Details of options to create. ]]
      options : CustomFieldOptionValue[]
   }
   
   [[ Details about the issues created and the errors for requests that failed. ]]
   model CreatedIssues {
      [[ Details of the issues created. ]]
      issues : CreatedIssue[]
      [[ Error details for failed issue creation requests. ]]
      errors : BulkOperationErrorResult[]
   }
   
   [[ Details about a created issue or subtask. ]]
   model CreatedIssue {
      [[ The ID of the created issue or subtask. ]]
      id : String
      [[ The key of the created issue or subtask. ]]
      key : String
      [[ The URL of the created issue or subtask. ]]
      self : String
      [[ The response code and messages related to any requested transition. ]]
      transition : NestedResponse
   }
   
   [[ A page of items. ]]
   model PageBeanWorkflowTransitionRules {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : WorkflowTransitionRules[]
   }
   
   [[ A workflow with transition rules. ]]
   model WorkflowTransitionRules {
      workflowId : WorkflowId
      [[ The list of post functions within the workflow. ]]
      postFunctions : ConnectWorkflowTransitionRule[]
      [[ The list of conditions within the workflow. ]]
      conditions : ConnectWorkflowTransitionRule[]
      [[ The list of validators within the workflow. ]]
      validators : ConnectWorkflowTransitionRule[]
   }
   
   [[ Count of a version's unresolved issues. ]]
   model VersionUnresolvedIssuesCount {
      [[ The URL of these count details. ]]
      self : String
      [[ Count of unresolved issues. ]]
      issuesUnresolvedCount : Int
      [[ Count of issues. ]]
      issuesCount : Int
   }
   
   [[ A page of items. ]]
   model PageBeanWorkflow {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Workflow[]
   }
   
   model WorklogIdsRequestBean {
      [[ A list of worklog IDs. ]]
      ids : Int[]?
   }
   
   [[ Details of an issue remote link. ]]
   model RemoteIssueLink {
      [[ The ID of the link. ]]
      id : Int
      [[ The URL of the link. ]]
      self : String
      [[ The global ID of the link, such as the ID of the item on the remote system. ]]
      globalId : String
      [[ Details of the remote application the linked item is in. ]]
      application : Application
      [[ Description of the relationship between the issue and the linked item. ]]
      relationship : String
      [[ Details of the item linked to. ]]
      object : RemoteObject
   }
   
   [[ Count of issues assigned to a component. ]]
   model ComponentIssuesCount {
      [[ The URL for this count of issues for a component. ]]
      self : String
      [[ The count of issues assigned to a component. ]]
      issueCount : Int
   }
   
   model JsonNode {
      elements : Any
      number : Boolean
      valueNode : Boolean
      containerNode : Boolean
      missingNode : Boolean
      object : Boolean
      pojo : Boolean
      integralNumber : Boolean
      floatingPointNumber : Boolean
      int : Boolean
      long : Boolean
      double : Boolean
      bigDecimal : Boolean
      bigInteger : Boolean
      textual : Boolean
      boolean : Boolean
      binary : Boolean
      numberValue : Decimal
      numberType : String
      intValue : Int
      longValue : Int
      bigIntegerValue : Int
      doubleValue : Decimal
      decimalValue : Decimal
      booleanValue : Boolean
      binaryValue : byte[]
      valueAsInt : Int
      valueAsLong : Int
      valueAsDouble : Decimal
      valueAsBoolean : Boolean
      fieldNames : Any
      valueAsText : String
      textValue : String
      array : Boolean
      fields : Any
      `null` : Boolean
   }
   
   type byte inherits String
   
   model IssueTypeCreateBean {
      [[ The unique name for the issue type. The maximum length is 60 characters. ]]
      name : String?
      [[ The description of the issue type. ]]
      description : String
      [[ Whether the issue type is `subtype` or `standard`. Defaults to `standard`. ]]
      `type` : String
   }
   
   model ProjectInputBean {
      [[ Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. Required when creating a project. Optional when updating a project. ]]
      key : String
      [[ The name of the project. Required when creating a project. Optional when updating a project. ]]
      name : String
      [[ The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which dictates the application-specific feature set. Required when creating a project. Not applicable for the Update project resource. ]]
      projectTypeKey : String
      [[ A prebuilt configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`. Required when creating a project. Not applicable for the Update project resource. ]]
      projectTemplateKey : String
      [[ A brief description of the project. ]]
      description : String
      [[ This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Optional when updating a project. Cannot be provided with `leadAccountId`. ]]
      lead : String
      [[ The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Optional when updating a project. Cannot be provided with `lead`. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. ]]
      leadAccountId : String
      [[ A link to information about this project, such as project documentation ]]
      url : String
      [[ The default assignee when creating issues for this project. ]]
      assigneeType : String
      [[ An integer value for the project's avatar. ]]
      avatarId : Int
      [[ The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs. ]]
      issueSecurityScheme : Int
      [[ The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs. ]]
      permissionScheme : Int
      [[ The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs. ]]
      notificationScheme : Int
      [[ The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. ]]
      categoryId : Int
   }
   
   type ConnectModules
   
   [[ Details about a task. ]]
   model TaskProgressBeanRemoveOptionFromIssuesResult {
      [[ The URL of the task. ]]
      self : String?
      [[ The ID of the task. ]]
      id : String?
      [[ The description of the task. ]]
      description : String
      [[ The status of the task. ]]
      status : String?
      [[ Information about the progress of the task. ]]
      message : String
      [[ The result of the task execution. ]]
      result : RemoveOptionFromIssuesResult
      [[ The ID of the user who submitted the task. ]]
      submittedBy : Int?
      [[ The progress of the task, as a percentage complete. ]]
      progress : Int?
      [[ The execution time of the task, in milliseconds. ]]
      elapsedRuntime : Int?
      [[ A timestamp recording when the task was submitted. ]]
      submitted : Int?
      [[ A timestamp recording when the task was started. ]]
      started : Int
      [[ A timestamp recording when the task was finished. ]]
      finished : Int
      [[ A timestamp recording when the task progress was last updated. ]]
      lastUpdate : Int?
   }
   
   model RemoveOptionFromIssuesResult {
      [[ The IDs of the modified issues. ]]
      modifiedIssues : Int[]
      [[ The IDs of the unchanged issues, those issues where errors prevent modification. ]]
      unmodifiedIssues : Int[]
      [[ A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned. ]]
      errors : SimpleErrorCollection
   }
   
   model RichText {
      emptyAdf : Boolean
      valueSet : Boolean
   }
   
   [[ Metadata for an archive (for example a zip) and its contents. ]]
   model AttachmentArchiveMetadataReadable {
      [[ The ID of the attachment. ]]
      id : Int
      [[ The name of the archive file. ]]
      name : String
      [[ The list of the items included in the archive. ]]
      entries : AttachmentArchiveItemReadable[]
      [[ The number of items included in the archive. ]]
      totalEntryCount : Int
      [[ The MIME type of the attachment. ]]
      mediaType : String
   }
   
   [[ Metadata for an item in an attachment archive. ]]
   model AttachmentArchiveItemReadable {
      [[ The path of the archive item. ]]
      path : String
      [[ The position of the item within the archive. ]]
      index : Int
      [[ The size of the archive item. ]]
      size : String
      [[ The MIME type of the archive item. ]]
      mediaType : String
      [[ The label for the archive item. ]]
      label : String
   }
   
   [[ A page of items. ]]
   model PageBeanFoundFilter {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : FoundFilter[]
   }
   
   [[ Metadata for an issue attachment. ]]
   model AttachmentMetadata {
      [[ The ID of the attachment. ]]
      id : Int
      [[ The URL of the attachment metadata details. ]]
      self : String
      [[ The name of the attachment file. ]]
      filename : String
      [[ Details of the user who attached the file. ]]
      author : User
      [[ The datetime the attachment was created. ]]
      created : DateTime
      [[ The size of the attachment. ]]
      size : Int
      [[ The MIME type of the attachment. ]]
      mimeType : String
      [[ Additional properties of the attachment. ]]
      properties : Any
      [[ The URL of the attachment. ]]
      content : String
      [[ The URL of a thumbnail representing the attachment. ]]
      thumbnail : String
   }
   
   [[ Container for a list of audit records. ]]
   model AuditRecords {
      [[ The number of audit items skipped before the first item in this list. ]]
      offset : Int
      [[ The requested or default limit on the number of audit items to be returned. ]]
      limit : Int
      [[ The total number of audit items returned. ]]
      total : Int
      [[ The list of audit items. ]]
      records : AuditRecordBean[]
   }
   
   [[ An audit record. ]]
   model AuditRecordBean {
      [[ The ID of the audit record. ]]
      id : Int
      [[ The summary of the audit record. ]]
      summary : String
      [[ The URL of the computer where the creation of the audit record was initiated. ]]
      remoteAddress : String
      [[ The key of the user who created the audit record. ]]
      authorKey : String
      [[ The date and time on which the audit record was created. ]]
      created : DateTime
      [[ The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM). ]]
      category : String
      [[ The event the audit record originated from. ]]
      eventSource : String
      [[ The description of the audit record. ]]
      description : String
      objectItem : AssociatedItemBean
      [[ The list of values changed in the record event. ]]
      changedValues : ChangedValueBean[]
      [[ The list of items associated with the changed record. ]]
      associatedItems : AssociatedItemBean[]
   }
   
   [[ List of permission grants. ]]
   model PermissionGrants {
      [[ Permission grants list. ]]
      permissions : PermissionGrant[]
      [[ Expand options that include additional permission grant details in the response. ]]
      expand : String
   }
   
   [[ A page of items. ]]
   model PageBeanChangelog {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Changelog[]
   }
   
   model UnrestrictedUserEmail {
      [[ The accountId of the user ]]
      accountId : String
      [[ The email of the user ]]
      email : String
   }
   
   [[ A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator. ]]
   model FieldChangedClause {
      field : JqlQueryField?
      [[ The operator applied to the field. ]]
      operator : String?
      [[ The list of time predicates. ]]
      predicates : JqlQueryClauseTimePredicate[]?
   }
   
   model IssuesUpdateBean {
      issueUpdates : IssueUpdateDetails[]
   }
   
   model AttachmentArchiveImpl {
      [[ The list of the items included in the archive. ]]
      entries : AttachmentArchiveEntry[]
      [[ The number of items in the archive. ]]
      totalEntryCount : Int
   }
   
   model AttachmentArchiveEntry {
      mediaType : String
      entryIndex : Int
      abbreviatedName : String
      name : String
      size : Int
   }
   
   [[ Details about a component with a count of the issues it contains. ]]
   model ComponentWithIssueCount {
      [[ Count of issues for the component. ]]
      issueCount : Int
      [[ The description for the component. ]]
      description : String
      [[ The URL for this count of the issues contained in the component. ]]
      self : String
      [[ The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
      *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
      *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
      *  `UNASSIGNED` an assignee is not set for issues created with this component.
      *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in. ]]
      assigneeType : String
      [[ The key of the project to which the component is assigned. ]]
      project : String
      [[ The user details for the component's lead user. ]]
      lead : User
      [[ Not used. ]]
      projectId : Int
      [[ The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component. ]]
      assignee : User
      [[ The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee. ]]
      realAssignee : User
      [[ Indicates whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned. ]]
      isAssigneeTypeValid : Boolean
      [[ The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
      *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
      *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
      *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
      *  `PROJECT_DEFAULT` when none of the preceding cases are true. ]]
      realAssigneeType : String
      [[ The name for the component. ]]
      name : String
      [[ The unique identifier for the component. ]]
      id : String
   }
   
   [[ Details about system and custom avatars. ]]
   model Avatars {
      [[ System avatars list. ]]
      system : Avatar[]
      [[ Custom avatars list. ]]
      custom : Avatar[]
   }
   
   [[ Details about a notification scheme. ]]
   model NotificationScheme {
      [[ Expand options that include additional notification scheme details in the response. ]]
      expand : String
      [[ The ID of the notification scheme. ]]
      id : Int
      self : String
      [[ The name of the notification scheme. ]]
      name : String
      [[ The description of the notification scheme. ]]
      description : String
      [[ The notification events and associated recipients. ]]
      notificationSchemeEvents : NotificationSchemeEvent[]
      [[ The scope of the notification scheme. ]]
      scope : Scope
   }
   
   [[ Details about a notification scheme event. ]]
   model NotificationSchemeEvent {
      event : NotificationEvent
      notifications : EventNotification[]
   }
   
   [[ Details about a notification event. ]]
   model NotificationEvent {
      [[ The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg). ]]
      id : Int
      [[ The name of the event. ]]
      name : String
      [[ The description of the event. ]]
      description : String
      [[ The template of the event. Only custom events configured by Jira administrators have template. ]]
      templateEvent : NotificationEvent
   }
   
   [[ A user found in a search. ]]
   model UserPickerUser {
      [[ The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. ]]
      accountId : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      name : String
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      key : String
      [[ The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag. ]]
      html : String
      [[ The display name of the user. Depending on the user’s privacy setting, this may be returned as null. ]]
      displayName : String
      [[ The avatar URL of the user. ]]
      avatarUrl : String
   }
   
   model UserMigrationBean {
      key : String
      username : String
      accountId : String
   }
   
   [[ Meta data describing the `issues` context variable. ]]
   model IssuesMetaBean {
      jql : IssuesJqlMetaDataBean
   }
   
   [[ JQL queries that contained users that could not be found ]]
   model JQLQueryWithUnknownUsers {
      [[ The original query, for reference ]]
      originalQuery : String
      [[ The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found ]]
      convertedQuery : String
   }
   
   [[ A page of items. ]]
   model PageBeanNotificationScheme {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : NotificationScheme[]
   }
   
   [[ Details about a failed webhook. ]]
   model FailedWebhook {
      [[ The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook. ]]
      id : String?
      [[ The webhook body. ]]
      body : String
      [[ The original webhook destination. ]]
      url : String?
      [[ The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry). ]]
      failureTime : Int?
   }
   
   model JiraExpressionEvalRequestBean {
      [[ The Jira expression to evaluate. ]]
      expression : String?
      [[ The context in which the Jira expression is evaluated. ]]
      context : JiraExpressionEvalContextBean
   }
   
   model SharePermissionInputBean {
      [[ The type of the share permission.Specify the type as follows:
      *  `group` Share with a group. Specify `groupname` as well.
      *  `project` Share with a project. Specify `projectId` as well.
      *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
      *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
      *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set. ]]
      `type` : String?
      [[ The ID of the project to share the filter with. Set `type` to `project`. ]]
      projectId : String
      [[ The name of the group to share the filter with. Set `type` to `group`. ]]
      groupname : String
      [[ The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in. ]]
      projectRoleId : String
   }
   
   [[ Details about the time tracking provider. ]]
   model TimeTrackingProvider {
      [[ The key for the time tracking provider. For example, *JIRA*. ]]
      key : String?
      [[ The name of the time tracking provider. For example, *JIRA provided time tracking*. ]]
      name : String
      [[ The URL of the configuration page for the time tracking provider app. For example, */example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app. ]]
      url : String
   }
   
   [[ A page of items. ]]
   model PageBeanDashboard {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Dashboard[]
   }
   
   [[ The result of evaluating a Jira expression. ]]
   model JiraExpressionResult {
      [[ The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.) ]]
      value : Any?
      [[ Contains various characteristics of the performed expression evaluation. ]]
      meta : JiraExpressionEvaluationMetaDataBean
   }
   
   model JiraExpressionEvaluationMetaDataBean {
      [[ Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression. ]]
      complexity : JiraExpressionsComplexityBean
      [[ Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here. ]]
      issues : IssuesMetaBean
   }
   
   model JiraExpressionsComplexityBean {
      [[ The number of steps it took to evaluate the expression. ]]
      steps : JiraExpressionsComplexityValueBean
      [[ The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields. ]]
      expensiveOperations : JiraExpressionsComplexityValueBean
      [[ The number of Jira REST API beans returned in the response. ]]
      beans : JiraExpressionsComplexityValueBean
      [[ The number of primitive values returned in the response. ]]
      primitiveValues : JiraExpressionsComplexityValueBean
   }
   
   [[ A page of comments. ]]
   model PageOfComments {
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The number of items returned. ]]
      total : Int
      [[ The list of comments. ]]
      comments : Comment[]
   }
   
   [[ Details of global and project permissions granted to the user. ]]
   model BulkPermissionGrants {
      [[ List of project permissions and the projects and issues those permissions provide access to. ]]
      projectPermissions : BulkProjectPermissionGrants[]?
      [[ List of permissions granted to the user. ]]
      globalPermissions : String[]?
   }
   
   [[ List of project permissions and the projects and issues those permissions grant access to. ]]
   model BulkProjectPermissionGrants {
      [[ A project permission, ]]
      permission : String?
      [[ IDs of the issues the user has the permission for. ]]
      issues : Int[]?
      [[ IDs of the projects the user has the permission for. ]]
      projects : Int[]?
   }
   
   [[ Details of any errors encountered while updating workflow transition rules. ]]
   model WorkflowTransitionRulesUpdateErrors {
      [[ A list of workflows. ]]
      updateResults : WorkflowTransitionRulesUpdateErrorDetails[]?
   }
   
   [[ A screen tab field. ]]
   model ScreenableField {
      [[ The ID of the screen tab field. ]]
      id : String
      [[ The name of the screen tab field. Required on create and update. The maximum length is 255 characters. ]]
      name : String
   }
   
   model ErrorMessage {
      [[ The error message. ]]
      message : String?
   }
   
   [[ Details of a locale. ]]
   model Locale {
      [[ The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create. ]]
      locale : String
   }
   
   [[ Container for a list of registered webhooks. Webhook details are returned in the same order as the request. ]]
   model ContainerForRegisteredWebhooks {
      [[ A list of registered webhooks. ]]
      webhookRegistrationResult : RegisteredWebhook[]
   }
   
   [[ A page of items. ]]
   model PageBeanCustomFieldOptionDetails {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : CustomFieldOptionDetails[]
   }
   
   [[ The converted JQL queries. ]]
   model ConvertedJQLQueries {
      [[ The list of converted query strings with account IDs in place of user identifiers. ]]
      queryStrings : String[]
      [[ List of queries containing user information that could not be mapped to an existing user ]]
      queriesWithUnknownUsers : JQLQueryWithUnknownUsers[]
   }
   
   model UpdateUserToGroupBean {
      [[ This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. ]]
      name : String
      [[ The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. An account ID with value `unknown` is returned when there is missing data for a user, which only happens for deleted users. We recommend you treat this value as an error case if you need to access more information about the user. ]]
      accountId : String
   }
   
   [[ Details about the server Jira is running on. ]]
   model WorkflowTransitionProperty {
      [[ The key of the transition property. Also known as the name of the transition property. ]]
      key : String
      [[ The value of the transition property. ]]
      value : String?
      [[ The ID of the transition property. ]]
      id : String
   }
   
   [[ A page of failed webhooks. ]]
   model FailedWebhooks {
      [[ The list of webhooks. ]]
      values : FailedWebhook[]?
      [[ The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages. ]]
      maxResults : Int?
      [[ The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour). ]]
      next : String
   }
   
   [[ A page of items. ]]
   model PageBeanComment {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Comment[]
   }
   
   [[ The JQL queries to be converted. ]]
   model JQLPersonalDataMigrationRequest {
      [[ A list of queries with user identifiers. Maximum of 100 queries. ]]
      queryStrings : String[]
   }
   
   [[ Details about the mapping between issue types and a workflow. ]]
   model IssueTypesWorkflowMapping {
      [[ The name of the workflow. Optional if updating the workflow-issue types mapping. ]]
      workflow : String
      [[ The list of issue type IDs. ]]
      issueTypes : String[]
      [[ Indicates whether the workflow is the default workflow for the workflow scheme. ]]
      defaultMapping : Boolean
      [[ Indicates whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`. ]]
      updateDraftIfNeeded : Boolean
   }
   
   [[ Details of the instance's attachment settings. ]]
   model AttachmentSettings {
      [[ Whether the ability to add attachments is enabled. ]]
      enabled : Boolean
      [[ The maximum size of attachments permitted, in bytes. ]]
      uploadLimit : Int
   }
   
   [[ A page of items. ]]
   model PageBeanField {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Field[]
   }
   
   [[ Count of the actors for a project role. ]]
   model ProjectRoleActorsCount {
      [[ The count of actors. ]]
      actorsCount : Int
   }
   
   [[ A list of the issues matched to a JQL query or details of errors encountered during matching. ]]
   model IssueMatchesForJQL {
      [[ A list of issue IDs. ]]
      matchedIssues : Int[]?
      [[ A list of errors. ]]
      errors : String[]?
   }
   
   model IssueCommentListRequestBean {
      [[ The list of comment IDs. A maximum of 1000 IDs can be specified. ]]
      ids : Int[]?
   }
   
   [[ List of users and groups found in a search. ]]
   model FoundUsersAndGroups {
      users : FoundUsers
      groups : FoundGroups
   }
   
   [[ The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users. ]]
   model FoundUsers {
      users : UserPickerUser[]
      [[ The total number of users found in the search. ]]
      total : Int
      [[ Header text indicating the number of users in the response and the total number of users found in the search. ]]
      header : String
   }
   
   [[ Details about a workflow configuration update request. ]]
   model WorkflowTransitionRulesUpdate {
      [[ The list of workflows with transition rules to update. ]]
      workflows : WorkflowTransitionRules[]
   }
   
   [[ Various counts of issues within a version. ]]
   model VersionIssueCounts {
      [[ The URL of these count details. ]]
      self : String
      [[ Count of issues where the `fixVersion` is set to the version. ]]
      issuesFixedCount : Int
      [[ Count of issues where the `affectedVersion` is set to the version. ]]
      issuesAffectedCount : Int
      [[ Count of issues where a version custom field is set to the version. ]]
      issueCountWithCustomFieldsShowingVersion : Int
      [[ List of custom fields using the version. ]]
      customFieldUsage : VersionUsageInCustomField[]
   }
   
   [[ A page of items. ]]
   model PageBeanComponentWithIssueCount {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : ComponentWithIssueCount[]
   }
   
   [[ Details about a task. ]]
   model TaskProgressBeanObject {
      [[ The URL of the task. ]]
      self : String?
      [[ The ID of the task. ]]
      id : String?
      [[ The description of the task. ]]
      description : String
      [[ The status of the task. ]]
      status : String?
      [[ Information about the progress of the task. ]]
      message : String
      [[ The result of the task execution. ]]
      result : Any
      [[ The ID of the user who submitted the task. ]]
      submittedBy : Int?
      [[ The progress of the task, as a percentage complete. ]]
      progress : Int?
      [[ The execution time of the task, in milliseconds. ]]
      elapsedRuntime : Int?
      [[ A timestamp recording when the task was submitted. ]]
      submitted : Int?
      [[ A timestamp recording when the task was started. ]]
      started : Int
      [[ A timestamp recording when the task was finished. ]]
      finished : Int
      [[ A timestamp recording when the task progress was last updated. ]]
      lastUpdate : Int?
   }
   
   [[ List of property keys. ]]
   model PropertyKeys {
      [[ Property key details. ]]
      keys : PropertyKey[]
   }
   
   [[ A page of items. ]]
   model PageBeanIssueFieldOption {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : IssueFieldOption[]
   }
   
   model IdBean {
      [[ The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to get a list of permission scheme IDs. ]]
      id : Int?
   }
   
   model OperationMessage {
      [[ The human-readable message that describes the result. ]]
      message : String?
      [[ The status code of the response. ]]
      statusCode : Int?
   }
   
   [[ Bulk operation filter details. ]]
   model IssueFilterForBulkPropertyDelete {
      [[ List of issues to perform the bulk delete operation on. ]]
      entityIds : Int[]
      [[ The value of properties to perform the bulk operation on. ]]
      currentValue : Any
   }
   
   [[ Details of an issue resolution. ]]
   model Resolution {
      [[ The URL of the issue resolution. ]]
      self : String
      [[ The ID of the issue resolution. ]]
      id : String
      [[ The description of the issue resolution. ]]
      description : String
      [[ The name of the issue resolution. ]]
      name : String
   }
   
   [[ A clause that asserts the current value of a field. For example, `summary ~ test`. ]]
   model FieldValueClause {
      field : JqlQueryField?
      [[ The operator between the field and operand. ]]
      operator : String?
      operand : JqlQueryClauseOperand?
   }
   
   [[ A page of items. ]]
   model PageBeanUserDetails {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : UserDetails[]
   }
   
   model ActorInputBean {
      [[ The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`. ]]
      user : String[]
      [[ The name of the group to add as a default actor. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`. ]]
      group : String[]
   }
   
   [[ An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions. ]]
   model FunctionOperand {
      [[ The name of the function. ]]
      `function` : String?
      [[ The list of function arguments. ]]
      arguments : String[]
   }
   
   [[ A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.` ]]
   model CompoundClause {
      [[ The list of nested clauses. ]]
      clauses : JqlQueryClause[]?
      [[ The operator between the clauses. ]]
      operator : String?
   }
   
   [[ A page of items. ]]
   model PageBeanProject {
      [[ The URL of the page. ]]
      self : String
      [[ If there is another page of results, the URL of the next page. ]]
      nextPage : String
      [[ The maximum number of items that could be returned. ]]
      maxResults : Int
      [[ The index of the first item returned. ]]
      startAt : Int
      [[ The number of items returned. ]]
      total : Int
      [[ Indicates whether this is the last page. ]]
      isLast : Boolean
      [[ The list of items. ]]
      values : Project[]
   }
   
   [[ Details about the mapping between an issue type and a workflow. ]]
   model IssueTypeWorkflowMapping {
      [[ The ID of the issue type. Not required if updating the issue type-workflow mapping. ]]
      issueType : String
      [[ The name of the workflow. ]]
      workflow : String
      [[ Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping. ]]
      updateDraftIfNeeded : Boolean
   }
   
   [[ Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information. ]]
   model IssueEntityProperties {
      [[ A list of entity IDs. ]]
      entitiesIds : Int[]
      [[ A list of entity property keys and values. ]]
      properties : Any
   }
   
   [[ A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator. ]]
   model FieldWasClause {
      field : JqlQueryField?
      [[ The operator between the field and operand. ]]
      operator : String?
      operand : JqlQueryClauseOperand?
      [[ The list of time predicates. ]]
      predicates : JqlQueryClauseTimePredicate[]?
   }
   
   [[ An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords. ]]
   model KeywordOperand {
      [[ The keyword that is the operand value. ]]
      keyword : String?
   }
   
   [[ A list of matched issues or errors for each JQL query, in the order the JQL queries were passed. ]]
   model IssueMatches {
      matches : IssueMatchesForJQL[]?
   }
   
   model VersionMoveBean {
      [[ The URL (self link) of the version after which to place the moved version. Cannot be used with `position`. ]]
      after : String
      [[ An absolute position in which to place the moved version. Cannot be used with `after`. ]]
      position : String
   }
   
   type binary inherits String
   
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3Application_propertiesService {
      [[ Returns all application properties or an application property.
      If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/application-properties")
      operation com_atlassian_jira_rest_v2_admin_ApplicationPropertiesResource_getApplicationProperty_get(  key : String,  permissionLevel : String,  keyFilter : String ) : ApplicationProperty[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3Application_propertiesAdvanced_settingsService {
      [[ Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/application-properties/advanced-settings")
      operation com_atlassian_jira_rest_v2_admin_ApplicationPropertiesResource_getAdvancedSettings_get(  ) : ApplicationProperty[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3Application_propertiesIdService {
      [[ Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.
      #### Advanced settings ####
      The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).
      | Key | Description | Default value |
      | -- | -- | -- |
      | `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |
      | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |
      | `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |
      | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |
      | `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |
      | `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |
      | `jira.table.cols.subtasks` | The columns to show while viewing subtask issues in a table. For example, a list of subtasks on an issue. | `issuetype, status, assignee, progress` |
      | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |
      | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |
      | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |
      #### Look and feel ####
      The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).
      | Key | Description | Default value |
      | -- | -- | -- |
      | `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |
      | `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |
      | `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |
      | `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |
      | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |
      | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |
      | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |
      | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |
      | `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |
      | `jira.lf.top.adg3.bgcolour` | The background color of the sidebar. | `#0747A6` |
      | `jira.lf.top.adg3.textcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |
      | `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |
      | `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |
      | `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |
      | `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |
      #### Other settings ####
      | Key | Description | Default value |
      | -- | -- | -- |
      | `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |
      *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/application-properties/{id}")
      operation com_atlassian_jira_rest_v2_admin_ApplicationPropertiesResource_setApplicationProperty_put( @PathVariable(value = "id") id : String, @RequestBody simpleApplicationPropertyBean : SimpleApplicationPropertyBean ) : ApplicationProperty
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ApplicationroleService {
      [[ Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/applicationrole")
      operation com_atlassian_jira_rest_v2_admin_applicationrole_ApplicationRoleResource_getAllApplicationRoles_get(  ) : ApplicationRole[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ApplicationroleKeyService {
      [[ Returns an application role.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/applicationrole/{key}")
      operation com_atlassian_jira_rest_v2_admin_applicationrole_ApplicationRoleResource_getApplicationRole_get( @PathVariable(value = "key") key : String ) : ApplicationRole
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3AttachmentMetaService {
      [[ Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.
      Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/attachment/meta")
      operation com_atlassian_jira_rest_v2_issue_attachment_AttachmentResource_getAttachmentMeta_get(  ) : AttachmentSettings
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3AttachmentIdService {
      [[ Returns the metadata for an attachment. Note that the attachment itself is not returned.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/attachment/{id}")
      operation com_atlassian_jira_rest_v2_issue_attachment_AttachmentResource_getAttachment_get( @PathVariable(value = "id") id : String ) : AttachmentMetadata
      [[ Deletes an attachment from an issue.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:
      *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
      *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/attachment/{id}")
      operation com_atlassian_jira_rest_v2_issue_attachment_AttachmentResource_removeAttachment_delete( @PathVariable(value = "id") id : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3AttachmentIdExpandHumanService {
      [[ Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.
      Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** For the issue containing the attachment:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/attachment/{id}/expand/human")
      operation com_atlassian_jira_rest_v2_issue_attachment_AttachmentResource_expandAttachmentForHumans_get( @PathVariable(value = "id") id : String ) : AttachmentArchiveMetadataReadable
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3AttachmentIdExpandRawService {
      [[ Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.
      Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** For the issue containing the attachment:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/attachment/{id}/expand/raw")
      operation com_atlassian_jira_rest_v2_issue_attachment_AttachmentResource_expandAttachmentForMachines_get( @PathVariable(value = "id") id : String ) : AttachmentArchiveImpl
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3AuditingRecordService {
      [[ Returns a list of audit records. The list can be filtered to include items:
      *  containing a string in at least one field. For example, providing *up* will return all audit records where one or more fields contains words such as *update*.
      *  created on or after a date and time.
      *  created or or before a date and time.
      *  created during a time period.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/auditing/record")
      operation com_atlassian_jira_rest_v2_admin_auditing_AuditingResource_getAuditRecords_get(  offset : Int,  limit : Int,  `filter` : String,  `from` : DateTime,  to : DateTime ) : AuditRecords
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3AvatarTypeSystemService {
      [[ Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/avatar/{type}/system")
      operation com_atlassian_jira_rest_v2_issue_AvatarResource_getAllSystemAvatars_get( @PathVariable(value = "type") `type` : String ) : SystemAvatars
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3CommentListService {
      [[ Returns the comments for a list of comment IDs.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Comments are returned where the user:
      *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/comment/list")
      operation com_atlassian_jira_rest_v2_issue_IssueCommentListResource_getCommentsByIds_post(  expand : String, @RequestBody issueCommentListRequestBean : IssueCommentListRequestBean ) : PageBeanComment
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3CommentCommentIdPropertiesService {
      [[ Returns the keys of all the properties of a comment.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/comment/{commentId}/properties")
      operation com_atlassian_jira_rest_v2_issue_CommentPropertyResource_getCommentPropertyKeys_get( @PathVariable(value = "commentId") commentId : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3CommentCommentIdPropertiesPropertyKeyService {
      [[ Returns the value of a comment property.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/comment/{commentId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_CommentPropertyResource_getCommentProperty_get( @PathVariable(value = "commentId") commentId : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
      **[Permissions](#permissions) required:** either of:
      *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
      *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.
      Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/comment/{commentId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_CommentPropertyResource_setCommentProperty_put( @PathVariable(value = "commentId") commentId : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : Any
      [[ Deletes a comment property.
      **[Permissions](#permissions) required:** either of:
      *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
      *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.
      Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/comment/{commentId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_CommentPropertyResource_deleteCommentProperty_delete( @PathVariable(value = "commentId") commentId : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ComponentService {
      [[ Creates a component. Use components to provide containers for issues within a project.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/component")
      operation com_atlassian_jira_rest_v2_issue_ComponentResource_createComponent_post( @RequestBody component : Component ) : Component
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ComponentIdService {
      [[ Returns a component.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/component/{id}")
      operation com_atlassian_jira_rest_v2_issue_ComponentResource_getComponent_get( @PathVariable(value = "id") id : String ) : Component
      [[ Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/component/{id}")
      operation com_atlassian_jira_rest_v2_issue_ComponentResource_updateComponent_put( @PathVariable(value = "id") id : String, @RequestBody component : Component ) : Component
      [[ Deletes a component.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/component/{id}")
      operation com_atlassian_jira_rest_v2_issue_ComponentResource_deleteComponent_delete( @PathVariable(value = "id") id : String,  moveIssuesTo : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ComponentIdRelatedIssueCountsService {
      [[ Returns the counts of issues assigned to the component.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/component/{id}/relatedIssueCounts")
      operation com_atlassian_jira_rest_v2_issue_ComponentResource_getComponentRelatedIssues_get( @PathVariable(value = "id") id : String ) : ComponentIssuesCount
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ConfigurationService {
      [[ Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/configuration")
      operation com_atlassian_jira_rest_v2_admin_ConfigurationResource_getConfiguration_get(  ) : Configuration
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ConfigurationTimetrackingService {
      [[ Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/configuration/timetracking")
      operation com_atlassian_jira_rest_v2_admin_timetracking_TimeTrackingResource_getSelectedTimeTrackingImplementation_get(  ) : TimeTrackingProvider
      [[ Selects a time tracking provider.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/configuration/timetracking")
      operation com_atlassian_jira_rest_v2_admin_timetracking_TimeTrackingResource_selectTimeTrackingImplementation_put( @RequestBody timeTrackingProvider : TimeTrackingProvider ) : Any
      [[ Disables time tracking.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/configuration/timetracking")
      operation com_atlassian_jira_rest_v2_admin_timetracking_TimeTrackingResource_disableTimeTracking_delete(  ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ConfigurationTimetrackingListService {
      [[ Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/configuration/timetracking/list")
      operation com_atlassian_jira_rest_v2_admin_timetracking_TimeTrackingResource_getAvailableTimeTrackingImplementations_get(  ) : TimeTrackingProvider[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ConfigurationTimetrackingOptionsService {
      [[ Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/configuration/timetracking/options")
      operation com_atlassian_jira_rest_v2_admin_timetracking_TimeTrackingResource_getSharedTimeTrackingConfiguration_get(  ) : TimeTrackingConfiguration
      [[ Sets the time tracking settings.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/configuration/timetracking/options")
      operation com_atlassian_jira_rest_v2_admin_timetracking_TimeTrackingResource_setSharedTimeTrackingConfiguration_put( @RequestBody timeTrackingConfiguration : TimeTrackingConfiguration ) : TimeTrackingConfiguration
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3CustomFieldFieldIdOptionService {
      [[ Returns the options and, where the custom select field is of the type *Select List (cascading)*, cascading options for custom select fields. Cascading options are included in the item count when determining pagination.
      Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/customField/{fieldId}/option")
      operation com_atlassian_jira_rest_v2_issue_BulkCustomFieldOptionResource_getOptionsForField_get( @PathVariable(value = "fieldId") fieldId : Int,  startAt : Int,  maxResults : Int ) : PageBeanCustomFieldOptionDetails
      [[ Creates options and, where the custom select field is of the type *Select List (cascading)*, cascading options for a custom select field.
      Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/customField/{fieldId}/option")
      operation com_atlassian_jira_rest_v2_issue_BulkCustomFieldOptionResource_createCustomFieldOptions_post( @PathVariable(value = "fieldId") fieldId : Int, @RequestBody bulkCreateCustomFieldOptionRequest : BulkCreateCustomFieldOptionRequest ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3CustomFieldOptionIdService {
      [[ Returns a custom field option. For example, an option in a select list.
      Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/customFieldOption/{id}")
      operation com_atlassian_jira_rest_v2_issue_customfield_CustomFieldOptionResource_getCustomFieldOption_get( @PathVariable(value = "id") id : String ) : CustomFieldOption
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3DashboardService {
      [[ Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/dashboard")
      operation com_atlassian_jira_rest_v2_dashboard_DashboardResource_getAllDashboards_get(  `filter` : String,  startAt : Int,  maxResults : Int ) : PageOfDashboards
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3DashboardSearchService {
      [[ Searches for dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:
      *  Dashboards owned by the user. Not returned for anonymous users.
      *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
      *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
      *  Dashboards shared with a public project.
      *  Dashboards shared with the public. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/dashboard/search")
      operation com_atlassian_jira_rest_v2_dashboard_DashboardResource_getDashboardsPaginated_get(  dashboardName : String,  accountId : String,  owner : String,  groupname : String,  projectId : Int,  orderBy : String,  startAt : Int,  maxResults : Int,  expand : String ) : PageBeanDashboard
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3DashboardDashboardIdItemsItemIdPropertiesService {
      [[ Returns the keys of all properties for a dashboard item.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** The user must be the owner of the dashboard or be shared the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties")
      operation com_atlassian_jira_rest_v2_dashboard_DashboardItemPropertyResource_getDashboardItemPropertyKeys_get( @PathVariable(value = "dashboardId") dashboardId : String, @PathVariable(value = "itemId") itemId : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyService {
      [[ Returns the key and value of a dashboard item property.
      A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
      When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
      There is no resource to set or get dashboard items.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** The user must be the owner of the dashboard or be shared the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_dashboard_DashboardItemPropertyResource_getDashboardItemProperty_get( @PathVariable(value = "dashboardId") dashboardId : String, @PathVariable(value = "itemId") itemId : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.
      A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
      When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
      There is no resource to set or get dashboard items.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_dashboard_DashboardItemPropertyResource_setDashboardItemProperty_put( @PathVariable(value = "dashboardId") dashboardId : String, @PathVariable(value = "itemId") itemId : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : Any
      [[ Deletes a dashboard item property.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_dashboard_DashboardItemPropertyResource_deleteDashboardItemProperty_delete( @PathVariable(value = "dashboardId") dashboardId : String, @PathVariable(value = "itemId") itemId : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3DashboardIdService {
      [[ Returns a dashboard.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None.
      However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/dashboard/{id}")
      operation com_atlassian_jira_rest_v2_dashboard_DashboardResource_getDashboard_get( @PathVariable(value = "id") id : String ) : Dashboard
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ExpressionEvalService {
      [[ Evaluates a Jira expression and returns its value.
      This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.
      #### Context variables ####
      The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.
      *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
      *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The Connect app that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/authentication-for-apps/)).
      *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
      *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
      *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
      *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
      *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
      *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
      *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.
      Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/expression/eval")
      operation com_atlassian_jira_rest_v2_expression_JiraExpressionsResource_evaluateJiraExpression_post(  expand : String, @RequestBody jiraExpressionEvalRequestBean : JiraExpressionEvalRequestBean ) : JiraExpressionResult
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldService {
      [[ Returns system and custom issue fields according to the following rules:
      *  Fields that cannot be added to the issue navigator are always returned.
      *  Fields that cannot be placed on an issue screen are always returned.
      *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
      *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field")
      operation com_atlassian_jira_rest_v2_issue_FieldResource_getFields_get(  ) : FieldDetails[]
      [[ Creates a custom field.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/field")
      operation com_atlassian_jira_rest_v2_issue_FieldResource_createCustomField_post( @RequestBody customFieldDefinitionJsonBean : CustomFieldDefinitionJsonBean ) : FieldDetails
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldSearchService {
      [[ Returns a [paginated](#pagination) list of fields for Classic Jira projects. Only custom fields can be queried, `type` must be set to `custom`.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field/search")
      operation com_atlassian_jira_rest_v2_issue_field_FieldSearchResource_getFieldsPaginated_get(  startAt : Int,  maxResults : Int,  `type` : String[],  id : String[],  `query` : String,  orderBy : String,  expand : String ) : PageBeanField
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldFieldIdContextsService {
      [[ Returns a [paginated](#pagination) list of the contexts a field is used in.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field/{fieldId}/contexts")
      operation com_atlassian_jira_rest_v2_issue_FieldResource_getContextsForField_get( @PathVariable(value = "fieldId") fieldId : String,  startAt : Int,  maxResults : Int ) : PageBeanContext
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldFieldIdScreensService {
      [[ Returns a [paginated](#pagination) list of the screens a field is used in.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field/{fieldId}/screens")
      operation com_atlassian_jira_rest_v2_issue_FieldResource_getScreensForField_get( @PathVariable(value = "fieldId") fieldId : String,  startAt : Int,  maxResults : Int ) : PageBeanScreen
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldFieldKeyOptionService {
      [[ Returns all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field/{fieldKey}/option")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_getAllIssueFieldOptions_get(  startAt : Int,  maxResults : Int, @PathVariable(value = "fieldKey") fieldKey : String ) : PageBeanIssueFieldOption
      [[ Creates an option for a select list issue field.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/field/{fieldKey}/option")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_createIssueFieldOption_post( @PathVariable(value = "fieldKey") fieldKey : String, @RequestBody issueFieldOptionCreateBean : IssueFieldOptionCreateBean ) : IssueFieldOption
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldFieldKeyOptionSuggestionsEditService {
      [[ Returns options for a select list issue field that can be viewed and selected by the user.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field/{fieldKey}/option/suggestions/edit")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_getSelectableIssueFieldOptions_get(  startAt : Int,  maxResults : Int,  projectId : Int, @PathVariable(value = "fieldKey") fieldKey : String ) : PageBeanIssueFieldOption
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldFieldKeyOptionSuggestionsSearchService {
      [[ Returns options for a select list issue field that can be viewed by the user.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field/{fieldKey}/option/suggestions/search")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_getVisibleIssueFieldOptions_get(  startAt : Int,  maxResults : Int,  projectId : Int, @PathVariable(value = "fieldKey") fieldKey : String ) : PageBeanIssueFieldOption
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldFieldKeyOptionOptionIdService {
      [[ Returns an option from a select list issue field.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/field/{fieldKey}/option/{optionId}")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_getIssueFieldOption_get( @PathVariable(value = "fieldKey") fieldKey : String, @PathVariable(value = "optionId") optionId : Int ) : IssueFieldOption
      [[ Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/field/{fieldKey}/option/{optionId}")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_updateIssueFieldOption_put( @PathVariable(value = "fieldKey") fieldKey : String, @PathVariable(value = "optionId") optionId : Int, @RequestBody issueFieldOption : IssueFieldOption ) : IssueFieldOption
      [[ Deletes an option from a select list issue field.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/field/{fieldKey}/option/{optionId}")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_deleteIssueFieldOption_delete( @PathVariable(value = "fieldKey") fieldKey : String, @PathVariable(value = "optionId") optionId : Int ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FieldFieldKeyOptionOptionIdIssueService {
      [[ Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
      This is an [asynchronous operation](#async). The response object contains a link to the long-running task.
      Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/field/{fieldKey}/option/{optionId}/issue")
      operation com_atlassian_jira_rest_v2_issue_field_IssueFieldOptionResource_replaceIssueFieldOption_delete(  replaceWith : Int,  jql : String, @PathVariable(value = "fieldKey") fieldKey : String, @PathVariable(value = "optionId") optionId : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterService {
      [[ Returns all filters. Deprecated, use [ Search for filters](#api-rest-api-3-filter-search-get) that supports search and pagination.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None, however, only the following filters are returned:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getFilters_get(  expand : String ) : Filter[]
      [[ Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/filter")
      operation com_atlassian_jira_rest_v2_search_FilterResource_createFilter_post(  expand : String, @RequestBody `filter` : Filter ) : Filter
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterDefaultShareScopeService {
      [[ Returns the default sharing settings for new filters and dashboards for a user.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/defaultShareScope")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getDefaultShareScope_get(  ) : DefaultShareScope
      [[ Sets the default sharing for new filters and dashboards for a user.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/filter/defaultShareScope")
      operation com_atlassian_jira_rest_v2_search_FilterResource_setDefaultShareScope_put( @RequestBody defaultShareScope : DefaultShareScope ) : DefaultShareScope
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterFavouriteService {
      [[ Returns the visible favorite filters of the user.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:
      *  owned by the user.
      *  shared with a group that the user is a member of.
      *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  shared with a public project.
      *  shared with the public.
      For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/favourite")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getFavouriteFilters_get(  expand : String ) : Filter[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterMyService {
      [[ Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.
      **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:
      *  owned by the user.
      *  shared with a group that the user is a member of.
      *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  shared with a public project.
      *  shared with the public.
      For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/my")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getMyFilters_get(  expand : String,  includeFavourites : Boolean ) : Filter[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterSearchService {
      [[ Searches for filters. This operation is similar to [Get filters](#api-rest-api-3-filter-get) except that the results can be refined to include filters that have specific attributes. For example, filters with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/search")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getFiltersPaginated_get(  filterName : String,  accountId : String,  owner : String,  groupname : String,  projectId : Int,  orderBy : String,  startAt : Int,  maxResults : Int,  expand : String ) : PageBeanFoundFilter
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterIdService {
      [[ Returns a filter.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:
      *  owned by the user.
      *  shared with a group that the user is a member of.
      *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  shared with a public project.
      *  shared with the public. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/{id}")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getFilter_get( @PathVariable(value = "id") id : Int,  expand : String ) : Filter
      [[ Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.
      **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/filter/{id}")
      operation com_atlassian_jira_rest_v2_search_FilterResource_updateFilter_put( @PathVariable(value = "id") id : Int,  expand : String, @RequestBody `filter` : Filter ) : Filter
      [[ Delete a filter.
      **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/filter/{id}")
      operation com_atlassian_jira_rest_v2_search_FilterResource_deleteFilter_delete( @PathVariable(value = "id") id : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterIdColumnsService {
      [[ Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None, however, column details are only returned for:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/{id}/columns")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getColumns_get( @PathVariable(value = "id") id : Int ) : ColumnItem[]
      [[ Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.
      The parameters for this resource are expressed as HTML form data. For example, in curl:
      `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`
      **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/filter/{id}/columns")
      operation com_atlassian_jira_rest_v2_search_FilterResource_setColumns_put( @PathVariable(value = "id") id : Int, @RequestBody array : String[] ) : Any
      [[ Reset the user's column configuration for the filter to the default.
      **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/filter/{id}/columns")
      operation com_atlassian_jira_rest_v2_search_FilterResource_resetColumns_delete( @PathVariable(value = "id") id : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterIdFavouriteService {
      [[ Add a filter as a favorite for the user.
      **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/filter/{id}/favourite")
      operation com_atlassian_jira_rest_v2_search_FilterResource_setFavouriteForFilter_put( @PathVariable(value = "id") id : Int,  expand : String ) : Filter
      [[ Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/filter/{id}/favourite")
      operation com_atlassian_jira_rest_v2_search_FilterResource_deleteFavouriteForFilter_delete( @PathVariable(value = "id") id : Int,  expand : String ) : Filter
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterIdPermissionService {
      [[ Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None, however, share permissions are only returned for:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/{id}/permission")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getSharePermissions_get( @PathVariable(value = "id") id : Int ) : SharePermission[]
      [[ Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.
      Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).
      **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/filter/{id}/permission")
      operation com_atlassian_jira_rest_v2_search_FilterResource_addSharePermission_post( @PathVariable(value = "id") id : Int, @RequestBody sharePermissionInputBean : SharePermissionInputBean ) : SharePermission[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3FilterIdPermissionPermissionIdService {
      [[ Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None, however, a share permission is only returned for:
      *  filters owned by the user.
      *  filters shared with a group that the user is a member of.
      *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
      *  filters shared with a public project.
      *  filters shared with the public. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/filter/{id}/permission/{permissionId}")
      operation com_atlassian_jira_rest_v2_search_FilterResource_getSharePermission_get( @PathVariable(value = "id") id : Int, @PathVariable(value = "permissionId") permissionId : Int ) : SharePermission
      [[ Deletes a share permission from a filter.
      **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/filter/{id}/permission/{permissionId}")
      operation com_atlassian_jira_rest_v2_search_FilterResource_deleteSharePermission_delete( @PathVariable(value = "id") id : Int, @PathVariable(value = "permissionId") permissionId : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3GroupService {
      [[ This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).
      Returns all users in a group.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/group")
      operation com_atlassian_jira_rest_v2_issue_GroupResource_getGroup_get(  groupname : String,  expand : String ) : Group
      [[ Creates a group.
      **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/group")
      operation com_atlassian_jira_rest_v2_issue_GroupResource_createGroup_post( @RequestBody addGroupBean : AddGroupBean ) : Group
      [[ Deletes a group.
      **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/group")
      operation com_atlassian_jira_rest_v2_issue_GroupResource_removeGroup_delete(  groupname : String,  swapGroup : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3GroupMemberService {
      [[ Returns all users in a group.
      Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/group/member")
      operation com_atlassian_jira_rest_v2_issue_GroupResource_getUsersFromGroup_get(  groupname : String,  includeInactiveUsers : Boolean,  startAt : Int,  maxResults : Int ) : PageBeanUserDetails
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3GroupUserService {
      [[ Adds a user to a group.
      **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/group/user")
      operation com_atlassian_jira_rest_v2_issue_GroupResource_addUserToGroup_post(  groupname : String, @RequestBody updateUserToGroupBean : UpdateUserToGroupBean ) : Group
      [[ Removes a user from a group.
      **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/group/user")
      operation com_atlassian_jira_rest_v2_issue_GroupResource_removeUserFromGroup_delete(  groupname : String,  username : String,  accountId : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3GroupsPickerService {
      [[ Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.
      The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.
      The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/groups/picker")
      operation com_atlassian_jira_rest_v2_issue_GroupPickerResource_findGroups_get(  accountId : String,  `query` : String,  exclude : String[],  maxResults : Int,  userName : String ) : FoundGroups
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3GroupuserpickerService {
      [[ Returns a list of users and groups matching a string. The string is used:
      *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
      *  for groups, to find a case-sensitive match with group name.
      For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.
      Optionally, the search can be refined to:
      *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
      *  projects.
      *  issue types.
      If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
      *  not return Connect app users and groups.
      *  return groups that have a case-insensitive match with the query.
      The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/groupuserpicker")
      operation com_atlassian_jira_rest_v2_issue_GroupAndUserPickerResource_findUsersAndGroups_get(  `query` : String,  maxResults : Int,  showAvatar : Boolean,  fieldId : String,  projectId : String[],  issueTypeId : String[],  avatarSize : String,  caseInsensitive : Boolean,  excludeConnectAddons : Boolean ) : FoundUsersAndGroups
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueService {
      [[ Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
      The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
      Creating a subtask differs from creating an issue as follows:
      *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
      *  `parent` must contain the ID or key of the parent issue.
      In a next-gen project any issue may be made a child providing that the parent and child are members of the same project. In a classic project the parent field is only valid for subtasks.
      **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_createIssue_post(  updateHistory : Boolean, @RequestBody issueUpdateDetails : IssueUpdateDetails ) : CreatedIssue
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueBulkService {
      [[ Creates issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
      The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
      Creating a subtask differs from creating an issue as follows:
      *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
      *  `parent` the must contain the ID or key of the parent issue.
      **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/bulk")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_createIssues_post( @RequestBody issuesUpdateBean : IssuesUpdateBean ) : CreatedIssues
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueCreatemetaService {
      [[ Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
      The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/createmeta")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getCreateIssueMeta_get(  projectIds : String[],  projectKeys : String[],  issuetypeIds : String[],  issuetypeNames : String[],  expand : String ) : IssueCreateMetadata
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuePickerService {
      [[ Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
      This operation returns two lists:
      *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
      *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/picker")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getIssuePickerResource_get(  `query` : String,  currentJQL : String,  currentIssueKey : String,  currentProjectId : String,  showSubTasks : Boolean,  showSubTaskParent : Boolean ) : IssuePickerSuggestions
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuePropertiesService {
      [[ Sets the values of entity properties on issues. It can set up to 10 entity properties on up to 10,000 issues.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.
      This operation is:
      *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
      *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/properties")
      operation com_atlassian_jira_rest_v2_property_IssuePropertyBulkUpdateResource_bulkSetIssuesProperties_post( @RequestBody issueEntityProperties : IssueEntityProperties )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuePropertiesPropertyKeyService {
      [[ Sets a property value on multiple issues. The issues to be updated can be specified by a filter.
      The filter identifies issues eligible for update using these criteria:
      *  `entityIds` Only issues from this list are eligible.
      *  `currentValue` Only issues with the property set to this value are eligible.
      *  `hasProperty`:
      *  If *true*, only issues with the property are eligible.
      *  If *false*, only issues without the property are eligible.
      If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.
      If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).
      The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
      This operation is:
      *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
      *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_property_IssuePropertyBulkUpdateResource_bulkSetIssueProperty_put( @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody bulkIssuePropertyUpdateRequest : BulkIssuePropertyUpdateRequest )
      [[ Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.
      The criteria the filter used to identify eligible issues are:
      *  `entityIds` Only issues from this list are eligible.
      *  `currentValue` Only issues with the property set to this value are eligible.
      If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.
      If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
      This operation is:
      *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
      *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_property_IssuePropertyBulkUpdateResource_bulkDeleteIssueProperty_delete( @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody issueFilterForBulkPropertyDelete : IssueFilterForBulkPropertyDelete )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyService {
      [[ Returns the details for an issue.
      The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getIssue_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  fields : String[],  fieldsByKeys : Boolean,  expand : String,  properties : String[],  updateHistory : Boolean ) : IssueBean
      [[ Edits an issue. A transition may be applied and issue properties updated as part of the edit.
      The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).
      The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
      Connect app users with admin permissions (from user permissions and app scopes) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/{issueIdOrKey}")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_editIssue_put( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  notifyUsers : Boolean,  overrideScreenSecurity : Boolean,  overrideEditableFlag : Boolean, @RequestBody issueUpdateDetails : IssueUpdateDetails ) : Any
      [[ Deletes an issue.
      An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_deleteIssue_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  deleteSubtasks : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyAssigneeService {
      [[ Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.
      If `name` or `accountId` is set to:
      *  `"-1"`, the issue is assigned to the default assignee for the project.
      *  `null`, the issue is set to unassigned.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/{issueIdOrKey}/assignee")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_assignIssue_put( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @RequestBody user : User ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyAttachmentsService {
      [[ Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).
      Note that:
      *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
      *  The name of the multipart/form-data parameter that contains the attachments must be `file`.
      The following example uploads a file called *myfile.txt* to the issue *TEST-123*:
      `curl -D- -u admin:admin -X POST -H "X-Atlassian-Token: no-check" -F "file=@myfile.txt" https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments`
      Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/attachments")
      operation com_atlassian_jira_rest_v2_issue_IssueAttachmentsResource_addAttachment_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @RequestBody binary : binary ) : Attachment[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyChangelogService {
      [[ Returns all changelogs for an issue sorted by date, starting from the oldest.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/changelog")
      operation com_atlassian_jira_rest_v2_issue_IssueChangelogResource_getChangeLogs_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  startAt : Int,  maxResults : Int ) : PageBeanChangelog
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyCommentService {
      [[ Returns all comments for an issue.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Comments are included in the response where the user has:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/comment")
      operation com_atlassian_jira_rest_v2_issue_IssueCommentResource_getComments_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  startAt : Int,  maxResults : Int,  orderBy : String,  expand : String ) : PageOfComments
      [[ Adds a comment to an issue.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/comment")
      operation com_atlassian_jira_rest_v2_issue_IssueCommentResource_addComment_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  expand : String, @RequestBody comment : Comment ) : Comment
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyCommentIdService {
      [[ Returns a comment.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueCommentResource_getComment_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "id") id : String,  expand : String ) : Comment
      [[ Updates a comment.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
      *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueCommentResource_updateComment_put( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "id") id : String,  expand : String, @RequestBody comment : Comment ) : Comment
      [[ Deletes a comment.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
      *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/comment/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueCommentResource_deleteComment_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "id") id : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyEditmetaService {
      [[ Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).
      Connect app users with admin permissions (from user permissions and app scopes) can return additional details using:
      *  `overrideScreenSecurity` Returns hidden fields.
      *  `overrideEditableFlag` Returns uneditable fields. For example, where an issue has a workflow status of closed none of its fields are editable.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/editmeta")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getEditIssueMeta_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  overrideScreenSecurity : Boolean,  overrideEditableFlag : Boolean ) : IssueUpdateMetadata
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyNotifyService {
      [[ Creates an email notification for an issue and adds it to the mail queue.
      **[Permissions](#permissions) required:**
      *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/notify")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_notify_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @RequestBody notification : Notification ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyPropertiesService {
      [[ Returns the URLs and keys of an issue's properties.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Property details are only returned where the user has:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/properties")
      operation com_atlassian_jira_rest_v2_issue_IssuePropertyResource_getIssuePropertyKeys_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyPropertiesPropertyKeyService {
      [[ Returns the key and value of an issue's property.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_IssuePropertyResource_getIssueProperty_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Sets the value of an issue's property. Use this resource to store custom data against an issue.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_IssuePropertyResource_setIssueProperty_put( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : Any
      [[ Deletes an issue's property.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_IssuePropertyResource_deleteIssueProperty_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyRemotelinkService {
      [[ Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
      This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/remotelink")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getRemoteIssueLinks_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  globalId : String ) : RemoteIssueLink
      [[ Creates or updates a remote issue link for an issue.
      If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.
      This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/remotelink")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_createOrUpdateRemoteIssueLink_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @RequestBody remoteIssueLinkRequest : RemoteIssueLinkRequest ) : RemoteIssueLinkIdentifies
      [[ Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
      This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/remotelink")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_deleteRemoteIssueLinkByGlobalId_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  globalId : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyRemotelinkLinkIdService {
      [[ Returns a remote issue link for an issue.
      This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getRemoteIssueLinkById_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "linkId") linkId : String ) : RemoteIssueLink
      [[ Updates a remote issue link for an issue.
      Note: Fields without values in the request are set to null.
      This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_updateRemoteIssueLink_put( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "linkId") linkId : String, @RequestBody remoteIssueLinkRequest : RemoteIssueLinkRequest ) : Any
      [[ Deletes a remote issue link from an issue.
      This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_deleteRemoteIssueLinkById_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "linkId") linkId : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyTransitionsService {
      [[ Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
      Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required: A list or transition is returned only when the user has:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/transitions")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getTransitions_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  expand : String,  transitionId : String,  skipRemoteOnlyCondition : Boolean ) : Transitions
      [[ Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
      To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/transitions")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_doTransition_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @RequestBody issueUpdateDetails : IssueUpdateDetails ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyVotesService {
      [[ Returns details about the votes on an issue.
      This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/votes")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getVotes_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String ) : Votes
      [[ Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.
      This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/votes")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_addVote_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String ) : Any
      [[ Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.
      This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/votes")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_removeVote_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyWatchersService {
      [[ Returns the watchers for an issue.
      This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/watchers")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_getIssueWatchers_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String ) : Watchers
      [[ Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.
      This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/watchers")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_addWatcher_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @RequestBody string : String ) : Any
      [[ Deletes a user as a watcher of an issue.
      This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/watchers")
      operation com_atlassian_jira_rest_v2_issue_IssueResource_removeWatcher_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  username : String,  accountId : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyWorklogService {
      [[ Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.
      Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Workloads are only returned where the user has:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog")
      operation com_atlassian_jira_rest_v2_issue_IssueWorklogsResource_getIssueWorklog_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  startAt : Int,  maxResults : Int,  startedAfter : Int,  expand : String ) : PageOfWorklogs
      [[ Adds a worklog to an issue.
      Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog")
      operation com_atlassian_jira_rest_v2_issue_IssueWorklogsResource_addWorklog_post( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String,  notifyUsers : Boolean,  adjustEstimate : String,  newEstimate : String,  reduceBy : String,  expand : String,  overrideEditableFlag : Boolean, @RequestBody worklog : Worklog ) : Worklog
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyWorklogIdService {
      [[ Returns a worklog.
      Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueWorklogsResource_getWorklog_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "id") id : String,  expand : String ) : Worklog
      [[ Updates a worklog.
      Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueWorklogsResource_updateWorklog_put( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "id") id : String,  notifyUsers : Boolean,  adjustEstimate : String,  newEstimate : String,  expand : String,  overrideEditableFlag : Boolean, @RequestBody worklog : Worklog ) : Worklog
      [[ Deletes a worklog from an issue.
      Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueWorklogsResource_deleteWorklog_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "id") id : String,  notifyUsers : Boolean,  adjustEstimate : String,  newEstimate : String,  increaseBy : String,  overrideEditableFlag : Boolean )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesService {
      [[ Returns the keys of all properties for a worklog.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties")
      operation com_atlassian_jira_rest_v2_issue_WorklogPropertyResource_getWorklogPropertyKeys_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "worklogId") worklogId : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyService {
      [[ Returns the value of a worklog property.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_WorklogPropertyResource_getWorklogProperty_get( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "worklogId") worklogId : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Sets the value of a worklog property. Use this operation to store custom data against the worklog.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_WorklogPropertyResource_setWorklogProperty_put( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "worklogId") worklogId : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : Any
      [[ Deletes a worklog property.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_WorklogPropertyResource_deleteWorklogProperty_delete( @PathVariable(value = "issueIdOrKey") issueIdOrKey : String, @PathVariable(value = "worklogId") worklogId : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueLinkService {
      [[ Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.
      This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.
      If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
      *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
      *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issueLink")
      operation com_atlassian_jira_rest_v2_issue_LinkIssueResource_linkIssues_post( @RequestBody linkIssueRequestJsonBean : LinkIssueRequestJsonBean ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueLinkLinkIdService {
      [[ Returns an issue link.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issueLink/{linkId}")
      operation com_atlassian_jira_rest_v2_issue_LinkIssueResource_getIssueLink_get( @PathVariable(value = "linkId") linkId : String ) : IssueLink
      [[ Deletes an issue link.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
      *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issueLink/{linkId}")
      operation com_atlassian_jira_rest_v2_issue_LinkIssueResource_deleteIssueLink_delete( @PathVariable(value = "linkId") linkId : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueLinkTypeService {
      [[ Returns a list of all issue link types.
      To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issueLinkType")
      operation com_atlassian_jira_rest_v2_issue_IssueLinkTypeResource_getIssueLinkTypes_get(  ) : IssueLinkTypes
      [[ Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.
      To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issueLinkType")
      operation com_atlassian_jira_rest_v2_issue_IssueLinkTypeResource_createIssueLinkType_post( @RequestBody issueLinkType : IssueLinkType ) : IssueLinkType
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssueLinkTypeIssueLinkTypeIdService {
      [[ Returns an issue link type.
      To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issueLinkType/{issueLinkTypeId}")
      operation com_atlassian_jira_rest_v2_issue_IssueLinkTypeResource_getIssueLinkType_get( @PathVariable(value = "issueLinkTypeId") issueLinkTypeId : String ) : IssueLinkType
      [[ Updates an issue link type.
      To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issueLinkType/{issueLinkTypeId}")
      operation com_atlassian_jira_rest_v2_issue_IssueLinkTypeResource_updateIssueLinkType_put( @PathVariable(value = "issueLinkTypeId") issueLinkTypeId : String, @RequestBody issueLinkType : IssueLinkType ) : IssueLinkType
      [[ Deletes an issue link type.
      To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issueLinkType/{issueLinkTypeId}")
      operation com_atlassian_jira_rest_v2_issue_IssueLinkTypeResource_deleteIssueLinkType_delete( @PathVariable(value = "issueLinkTypeId") issueLinkTypeId : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuesecurityschemesService {
      [[ Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issuesecurityschemes")
      operation com_atlassian_jira_rest_v2_issue_IssueSecuritySchemeResource_getIssueSecuritySchemes_get(  ) : SecuritySchemes
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuesecurityschemesIdService {
      [[ Returns an issue security scheme along with its security levels.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issuesecurityschemes/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueSecuritySchemeResource_getIssueSecurityScheme_get( @PathVariable(value = "id") id : Int ) : SecurityScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuetypeService {
      [[ Returns all issue types.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Issue types are only returned as follows:
      *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
      *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issuetype")
      operation com_atlassian_jira_rest_v2_issue_IssueTypeResource_getIssueAllTypes_get(  ) : IssueTypeBean[]
      [[ Creates an issue type and adds it to the default issue type scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issuetype")
      operation com_atlassian_jira_rest_v2_issue_IssueTypeResource_createIssueType_post( @RequestBody issueTypeCreateBean : IssueTypeCreateBean ) : IssueTypeBean
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuetypeIdService {
      [[ Returns an issue type.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issuetype/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueTypeResource_getIssueType_get( @PathVariable(value = "id") id : String ) : IssueTypeBean
      [[ Updates the issue type.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issuetype/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueTypeResource_updateIssueType_put( @PathVariable(value = "id") id : String, @RequestBody issueTypeUpdateBean : IssueTypeUpdateBean ) : IssueTypeBean
      [[ Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issuetype/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueTypeResource_deleteIssueType_delete( @PathVariable(value = "id") id : String,  alternativeIssueTypeId : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuetypeIdAlternativesService {
      [[ Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issuetype/{id}/alternatives")
      operation com_atlassian_jira_rest_v2_issue_IssueTypeResource_getAlternativeIssueTypes_get( @PathVariable(value = "id") id : String ) : IssueTypeBean[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuetypeIdAvatar2Service {
      [[ Loads an avatar for the issue type.
      Specify the avatar's local file location in the body of the request. Also, include the following headers:
      *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
      *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
      For example:
      `curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`
      The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
      The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
      After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/issuetype/{id}/avatar2")
      operation com_atlassian_jira_rest_v2_issue_IssueTypeResource_createIssueTypeAvatar_post( @PathVariable(value = "id") id : String,  `x` : Int,  `y` : Int,  size : Int, @RequestBody any : Any ) : Avatar
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuetypeIssueTypeIdPropertiesService {
      [[ Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issuetype/{issueTypeId}/properties")
      operation com_atlassian_jira_rest_v2_issue_IssueTypePropertyResource_getIssueTypePropertyKeys_get( @PathVariable(value = "issueTypeId") issueTypeId : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyService {
      [[ Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_IssueTypePropertyResource_getIssueTypeProperty_get( @PathVariable(value = "issueTypeId") issueTypeId : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_IssueTypePropertyResource_setIssueTypeProperty_put( @PathVariable(value = "issueTypeId") issueTypeId : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : Any
      [[ Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_IssueTypePropertyResource_deleteIssueTypeProperty_delete( @PathVariable(value = "issueTypeId") issueTypeId : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3JqlAutocompletedataService {
      [[ Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/jql/autocompletedata")
      operation com_atlassian_jira_rest_v2_search_SearchAutoCompleteResource_getAutoComplete_get(  ) : JQLReferenceData
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3JqlAutocompletedataSuggestionsService {
      [[ Returns the JQL search auto complete suggestions for a field.
      Suggestions can be obtained by providing:
      *  `fieldName` to get a list of all values for the field.
      *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
      *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
      *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/jql/autocompletedata/suggestions")
      operation com_atlassian_jira_rest_v2_search_SearchAutoCompleteResource_getFieldAutoCompleteForQueryString_get(  fieldName : String,  fieldValue : String,  predicateName : String,  predicateValue : String ) : AutoCompleteSuggestions
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3JqlMatchService {
      [[ Checks whether one or more issues would be returned by one or more JQL queries.
      **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/jql/match")
      operation com_atlassian_jira_rest_v2_match_IssueMatchResource_matchIssues_post( @RequestBody issuesAndJQLQueries : IssuesAndJQLQueries ) : IssueMatches
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3JqlParseService {
      [[ Parses and validates JQL queries.
      Validation is performed in context of the current user.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/jql/parse")
      operation com_atlassian_jira_rest_v2_jql_JqlParserResource_parseJqlQueries_post( @RequestBody jqlQueriesToParse : JqlQueriesToParse ) : ParsedJqlQueries
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3JqlPdcleanerService {
      [[ Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.
      You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/jql/pdcleaner")
      operation com_atlassian_jira_rest_v2_search_JQLPersonalDataMigrationResource_migrateQueries_post( @RequestBody jQLPersonalDataMigrationRequest : JQLPersonalDataMigrationRequest ) : ConvertedJQLQueries
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3LabelService {
      [[ Returns a [paginated](#pagination) list of labels. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/label")
      operation com_atlassian_jira_rest_v2_label_LabelResource_getAllLabels_get(  startAt : Int,  maxResults : Int ) : PageBeanString
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3MypermissionsService {
      [[ Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, or issue context.
      The user is reported as having a project permission:
      *  in the global context, if the user has the project permission in any project.
      *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
      *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
      This means that users may be shown as having an issue permission (such as EDIT\_ISSUE) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUE permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUE permission for that issue.
      Global permissions are unaffected by context.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/mypermissions")
      operation com_atlassian_jira_rest_v2_permission_PermissionsResource_getMyPermissions_get(  projectKey : String,  projectId : String,  issueKey : String,  issueId : String,  permissions : String,  projectUuid : String,  projectConfigurationUuid : String ) : Permissions
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3MypreferencesService {
      [[ Returns the value of a preference of the current user.
      Note that these keys are deprecated:
      *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
      *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
      Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/mypreferences")
      operation com_atlassian_jira_rest_v2_preference_CurrentUserPreferencesResource_getPreference_get(  key : String ) : String
      [[ Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
      *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
      *  *user.notify.own.changes* Indicates whether the user gets notified of their own changes. Defaults to `false`.
      *  *user.default.share.private* Indicates whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
      *  *user.keyboard.shortcuts.disabled* Indicates whether keyboard shortcuts are disabled. Defaults to `false`.
      *  *user.autowatch.disabled* Indicates whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
      Note that these keys are deprecated:
      *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
      *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
      Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/mypreferences")
      operation com_atlassian_jira_rest_v2_preference_CurrentUserPreferencesResource_setPreference_put(  key : String, @RequestBody string : String ) : Any
      [[ Deletes a preference of the user, which restores the default value of system defined settings.
      Note that these keys are deprecated:
      *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
      *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
      Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/mypreferences")
      operation com_atlassian_jira_rest_v2_preference_CurrentUserPreferencesResource_removePreference_delete(  key : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3MypreferencesLocaleService {
      [[ Returns the locale for the user.
      If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/mypreferences/locale")
      operation com_atlassian_jira_rest_v2_preference_CurrentUserPreferencesResource_getLocale_get(  ) : Locale
      [[ Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
      Sets the locale of the user. The locale must be one supported by the instance of Jira.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/mypreferences/locale")
      operation com_atlassian_jira_rest_v2_preference_CurrentUserPreferencesResource_setLocale_put( @RequestBody locale : Locale ) : Any
      [[ Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
      Deletes the locale of the user, which restores the default setting.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/mypreferences/locale")
      operation com_atlassian_jira_rest_v2_preference_CurrentUserPreferencesResource_deleteLocale_delete(  ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3MyselfService {
      [[ Returns details for the current user.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/myself")
      operation com_atlassian_jira_rest_v2_issue_CurrentUserResource_getCurrentUser_get(  expand : String ) : User
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3NotificationschemeService {
      [[ Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by display name.
      ### About notification schemes ###
      A notification scheme is a list of events and recipients who will receive notifications for those events. The list is contained within the `notificationSchemeEvents` object and contains pairs of `events` and `notifications`:
      *  `event` Identifies the type of event. The events can be [Jira system events](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or [custom events](https://confluence.atlassian.com/x/AIlKLg).
      *  `notifications` Identifies the [recipients](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-recipientsRecipients) of notifications for each event. Recipients can be any of the following types:
      *  `CurrentAssignee`
      *  `Reporter`
      *  `CurrentUser`
      *  `ProjectLead`
      *  `ComponentLead`
      *  `User` (the `parameter` is the user key)
      *  `Group` (the `parameter` is the group name)
      *  `ProjectRole` (the `parameter` is the project role ID)
      *  `EmailAddress`
      *  `AllWatchers`
      *  `UserCustomField` (the `parameter` is the ID of the custom field)
      *  `GroupCustomField`(the `parameter` is the ID of the custom field)
      *Note that you should allow for events without recipients to appear in responses.*
      **[Permissions](#permissions) required:** Permission to access Jira, however the user must have permission to administer at least one project associated with a notification scheme for it to be returned. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/notificationscheme")
      operation com_atlassian_jira_rest_v2_notification_NotificationSchemeResource_getNotificationSchemes_get(  startAt : Int,  maxResults : Int,  expand : String ) : PageBeanNotificationScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3NotificationschemeIdService {
      [[ Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.
      **[Permissions](#permissions) required:** Permission to access Jira, however the user must have permission to administer at least one project associated with the notification scheme. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/notificationscheme/{id}")
      operation com_atlassian_jira_rest_v2_notification_NotificationSchemeResource_getNotificationScheme_get( @PathVariable(value = "id") id : Int,  expand : String ) : NotificationScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PermissionsService {
      [[ Returns all permissions, including:
      *  global permissions.
      *  project permissions.
      *  global permissions added by plugins.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/permissions")
      operation com_atlassian_jira_rest_v2_permission_PermissionsResource_getAllPermissions_get(  ) : Permissions
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PermissionsCheckService {
      [[ Returns:
      *  for a list of global permissions, the global permissions granted to the user.
      *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues the user can access or manipulate.
      Note that:
      *  Invalid project and issue IDs are ignored.
      *  A maximum of 1000 projects and 1000 issues can be checked.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/permissions/check")
      operation com_atlassian_jira_rest_v2_permission_PermissionsResource_getBulkPermissions_post( @RequestBody bulkPermissionsRequestBean : BulkPermissionsRequestBean ) : BulkPermissionGrants
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PermissionsProjectService {
      [[ Returns all the projects where the user is granted a list of project permissions.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/permissions/project")
      operation com_atlassian_jira_rest_v2_permission_PermissionsResource_getPermittedProjects_post( @RequestBody permissionsKeysBean : PermissionsKeysBean ) : PermittedProjects
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PermissionschemeService {
      [[ Returns all permission schemes.
      ### About permission schemes and grants ###
      A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.
      #### Holder object ####
      The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"`. The `holder` object is defined by the following properties:
      *  `type` Identifies the user or group (see the list of types below).
      *  `parameter` The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
      The following `types` are available. The expected values for the `parameter` are given in parenthesis (some `types` may not have a `parameter`):
      *  `anyone` Grant for anonymous users.
      *  `applicationRole` Grant for users with access to the specified application (application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
      *  `assignee` Grant for the user currently assigned to an issue.
      *  `group` Grant for the specified group (group name).
      *  `groupCustomField` Grant for a user in the group selected in the specified custom field (custom field ID).
      *  `projectLead` Grant for a project lead.
      *  `projectRole` Grant for the specified project role (project role ID).
      *  `reporter` Grant for the user who reported the issue.
      *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
      *  `user` Grant for the specified user (user ID - historically this was the userkey but that is deprecated and the account ID should be used).
      *  `userCustomField` Grant for a user selected in the specified custom field (custom field ID).
      #### Built-in permissions ####
      The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.
      **Project permissions**
      *  `ADMINISTER_PROJECTS`
      *  `BROWSE_PROJECTS`
      *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
      *  `SERVICEDESK_AGENT` (Jira Service Desk only)
      *  `VIEW_DEV_TOOLS` (Jira Software only)
      *  `VIEW_READONLY_WORKFLOW`
      **Issue permissions**
      *  `ASSIGNABLE_USER`
      *  `ASSIGN_ISSUES`
      *  `CLOSE_ISSUES`
      *  `CREATE_ISSUES`
      *  `DELETE_ISSUES`
      *  `EDIT_ISSUES`
      *  `LINK_ISSUES`
      *  `MODIFY_REPORTER`
      *  `MOVE_ISSUES`
      *  `RESOLVE_ISSUES`
      *  `SCHEDULE_ISSUES`
      *  `SET_ISSUE_SECURITY`
      *  `TRANSITION_ISSUES`
      **Voters and watchers permissions**
      *  `MANAGE_WATCHERS`
      *  `VIEW_VOTERS_AND_WATCHERS`
      **Comments permissions**
      *  `ADD_COMMENTS`
      *  `DELETE_ALL_COMMENTS`
      *  `DELETE_OWN_COMMENTS`
      *  `EDIT_ALL_COMMENTS`
      *  `EDIT_OWN_COMMENTS`
      **Attachments permissions**
      *  `CREATE_ATTACHMENTS`
      *  `DELETE_ALL_ATTACHMENTS`
      *  `DELETE_OWN_ATTACHMENTS`
      **Time tracking permissions**
      *  `DELETE_ALL_WORKLOGS`
      *  `DELETE_OWN_WORKLOGS`
      *  `EDIT_ALL_WORKLOGS`
      *  `EDIT_OWN_WORKLOGS`
      *  `WORK_ON_ISSUES`
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/permissionscheme")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_getAllPermissionSchemes_get(  expand : String ) : PermissionSchemes
      [[ Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/permissionscheme")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_createPermissionScheme_post(  expand : String, @RequestBody permissionScheme : PermissionScheme ) : PermissionScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PermissionschemeSchemeIdService {
      [[ Returns a permission scheme.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/permissionscheme/{schemeId}")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_getPermissionScheme_get( @PathVariable(value = "schemeId") schemeId : Int,  expand : String ) : PermissionScheme
      [[ Updates a permission scheme. Below are some important things to note when using this resource:
      *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
      *  If you want to update only the name and description, then do not send a permissions list in the request.
      *  Sending an empty list will remove all permission grants from the permission scheme.
      If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).
      See [About permission schemes and grants](#about-permission-schemes) for more details.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/permissionscheme/{schemeId}")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_updatePermissionScheme_put( @PathVariable(value = "schemeId") schemeId : Int,  expand : String, @RequestBody permissionScheme : PermissionScheme ) : PermissionScheme
      [[ Deletes a permission scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/permissionscheme/{schemeId}")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_deletePermissionScheme_delete( @PathVariable(value = "schemeId") schemeId : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PermissionschemeSchemeIdPermissionService {
      [[ Returns all permission grants for a permission scheme.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/permissionscheme/{schemeId}/permission")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_getPermissionSchemeGrants_get( @PathVariable(value = "schemeId") schemeId : Int,  expand : String ) : PermissionGrants
      [[ Creates a permission grant in a permission scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/permissionscheme/{schemeId}/permission")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_createPermissionGrant_post( @PathVariable(value = "schemeId") schemeId : Int,  expand : String, @RequestBody permissionGrant : PermissionGrant ) : PermissionGrant
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PermissionschemeSchemeIdPermissionPermissionIdService {
      [[ Returns a permission grant.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_getPermissionSchemeGrant_get( @PathVariable(value = "schemeId") schemeId : Int, @PathVariable(value = "permissionId") permissionId : Int,  expand : String ) : PermissionGrant
      [[ Deletes a permission grant from a permission scheme. See [About permission schemes and grants](#about-permission-schemes) for more details.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}")
      operation com_atlassian_jira_rest_v2_admin_permissionscheme_PermissionSchemeResource_deletePermissionSchemeEntity_delete( @PathVariable(value = "schemeId") schemeId : Int, @PathVariable(value = "permissionId") permissionId : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PriorityService {
      [[ Returns the list of all issue priorities.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/priority")
      operation com_atlassian_jira_rest_v2_issue_PriorityResource_getPriorities_get(  ) : Priority[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3PriorityIdService {
      [[ Returns an issue priority.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/priority/{id}")
      operation com_atlassian_jira_rest_v2_issue_PriorityResource_getPriority_get( @PathVariable(value = "id") id : String ) : Priority
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectService {
      [[ Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getAllProjects_get(  expand : String,  recent : Int,  properties : String[] ) : Project[]
      [[ Creates a project based on a project type template, as shown in the following table:
      | Project Type Key | Project Template Key |
      |--|--|
      | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |
      | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-desk`, `com.atlassian.servicedesk:simplified-internal-service-desk`, `com.atlassian.servicedesk:simplified-external-service-desk` |
      | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |
      The project types are available according to the installed Jira features as follows:
      *  Jira Core, the default, enables `business` projects.
      *  Jira Service Desk enables `service_desk` projects.
      *  Jira Software enables `software` projects.
      To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add JIRA Software or JIRA Service Desk into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/project")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_createProject_post( @RequestBody projectInputBean : ProjectInputBean ) : ProjectIdentifiers
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectSearchService {
      [[ Returns projects visible to the user.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/search")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_searchProjects_get(  startAt : Int,  maxResults : Int,  orderBy : String,  `query` : String,  typeKey : String,  categoryId : Int,  searchBy : String,  action : String,  expand : String ) : PageBeanProject
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectTypeService {
      [[ Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/type")
      operation com_atlassian_jira_rest_v2_project_type_ProjectTypeResource_getAllProjectTypes_get(  ) : ProjectType[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectTypeProjectTypeKeyService {
      [[ Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/type/{projectTypeKey}")
      operation com_atlassian_jira_rest_v2_project_type_ProjectTypeResource_getProjectTypeByKey_get( @PathVariable(value = "projectTypeKey") projectTypeKey : String ) : ProjectType
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectTypeProjectTypeKeyAccessibleService {
      [[ Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/type/{projectTypeKey}/accessible")
      operation com_atlassian_jira_rest_v2_project_type_ProjectTypeResource_getAccessibleProjectTypeByKey_get( @PathVariable(value = "projectTypeKey") projectTypeKey : String ) : ProjectType
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyService {
      [[ Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getProject_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String,  expand : String,  properties : String[] ) : Project
      [[ Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.
      All parameters are optional in the body of the request.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/project/{projectIdOrKey}")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_updateProject_put( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String,  expand : String, @RequestBody projectInputBean : ProjectInputBean ) : Project
      [[ Deletes a project.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/project/{projectIdOrKey}")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_deleteProject_delete( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyAvatarService {
      [[ Sets the avatar displayed for a project.
      Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.
      **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/project/{projectIdOrKey}/avatar")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_updateProjectAvatar_put( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @RequestBody avatar : Avatar ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyAvatarIdService {
      [[ Deletes a custom avatar from a project. Note that system avatars cannot be deleted.
      **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/project/{projectIdOrKey}/avatar/{id}")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_deleteProjectAvatar_delete( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "id") id : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyAvatar2Service {
      [[ Loads an avatar for a project.
      Specify the avatar's local file location in the body of the request. Also, include the following headers:
      *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
      *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
      For example:
      `curl --request POST `
      `--user email@example.com:<api_token> `
      `--header 'X-Atlassian-Token: no-check' `
      `--header 'Content-Type: image/< image_type>' `
      `--data-binary "<@/path/to/file/with/your/avatar>" `
      `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`
      The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
      The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
      After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
      **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/project/{projectIdOrKey}/avatar2")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_createProjectAvatar_post( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String,  `x` : Int,  `y` : Int,  size : Int, @RequestBody any : Any ) : Avatar
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyAvatarsService {
      [[ Returns all project avatars, grouped by system and custom avatars.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/avatars")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getAllProjectAvatars_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String ) : ProjectAvatars
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyComponentService {
      [[ Returns a [paginated](#pagination) representation of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/component")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getProjectComponentsPaginated_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String,  startAt : Int,  maxResults : Int,  orderBy : String,  `query` : String ) : PageBeanComponentWithIssueCount
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyComponentsService {
      [[ Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/components")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getProjectComponents_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String ) : Component[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyPropertiesService {
      [[ Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/properties")
      operation com_atlassian_jira_rest_v2_issue_ProjectPropertyResource_getProjectPropertyKeys_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyService {
      [[ Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_ProjectPropertyResource_getProjectProperty_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_ProjectPropertyResource_setProjectProperty_put( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : Any
      [[ Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_issue_ProjectPropertyResource_deleteProjectProperty_delete( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyRoleService {
      [[ Returns a list of [project roles](https://confluence.atlassian.com/x/3odKLg) for the project returning the name and self URL for each role.
      Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/role")
      operation com_atlassian_jira_rest_v2_issue_project_ProjectRoleResource_getProjectRoles_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyRoleIdService {
      [[ Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.
      To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_ProjectRoleResource_getProjectRole_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "id") id : Int ) : ProjectRole
      [[ Sets the actors for a project role for a project, replacing all existing actors.
      To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).
      **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/project/{projectIdOrKey}/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_ProjectRoleResource_setActors_put( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "id") id : Int, @RequestBody projectRoleActorsUpdateBean : ProjectRoleActorsUpdateBean ) : ProjectRole
      [[ Adds actors to a project role for the project.
      To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/project/{projectIdOrKey}/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_ProjectRoleResource_addActorUsers_post( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "id") id : Int, @RequestBody actorsMap : ActorsMap ) : ProjectRole
      [[ Deletes actors from a project role for the project.
      To remove default actors from the project role, use [Delete default actors from project role This operation can be accessed anonymously. ](#api-rest-api-3-role-id-actors-delete)
      [ ](#api-rest-api-3-role-id-actors-delete)**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/project/{projectIdOrKey}/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_ProjectRoleResource_deleteActor_delete( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "id") id : Int,  user : String,  group : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyRoleIdActorCountService {
      [[ Returns the number of actors (users and groups) assigned to a role in a project role.
      **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/role/{id}/actorCount")
      operation com_atlassian_jira_rest_v2_issue_project_ProjectRoleResource_getProjectRoleActorsCount_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "id") id : Int ) : ProjectRoleActorsCount
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyRoledetailsService {
      [[ Returns all [project roles](https://confluence.atlassian.com/x/3odKLg) and the details for each role. Note that the list of project roles is common to all projects.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/roledetails")
      operation com_atlassian_jira_rest_v2_issue_project_ProjectRoleDetailsResource_getProjectRoleDetails_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String,  currentMember : Boolean,  excludeConnectAddons : Boolean ) : ProjectRole[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyStatusesService {
      [[ Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/statuses")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getAllStatuses_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String ) : IssueTypeWithStatus[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyTypeNewProjectTypeKeyService {
      [[ Deprecated, this feature is no longer supported and no alternatives are available, see [Convert project to a different template or type](https://confluence.atlassian.com/x/yEKeOQ). Updates a [project type](https://confluence.atlassian.com/x/GwiiLQ). The project type can be updated for classic projects only, project type cannot be updated for next-gen projects.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_updateProjectType_put( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String, @PathVariable(value = "newProjectTypeKey") newProjectTypeKey : String ) : Project
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyVersionService {
      [[ Returns a [paginated](#pagination) representation of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/version")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getProjectVersionsPaginated_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String,  startAt : Int,  maxResults : Int,  orderBy : String,  `query` : String,  status : String,  expand : String ) : PageBeanVersion
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdOrKeyVersionsService {
      [[ Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectIdOrKey}/versions")
      operation com_atlassian_jira_rest_v2_issue_ProjectResource_getProjectVersions_get( @PathVariable(value = "projectIdOrKey") projectIdOrKey : String,  expand : String ) : Version[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectIdHierarchyService {
      [[ Get the issue type hierarchy for a next-gen project.
      The issue type hierarchy for a project consists of:
      *  *Epic* at level 1 (optional).
      *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
      *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectId}/hierarchy")
      operation com_atlassian_jira_rest_v2_nextgen_HierarchyResource_getHierarchy_get( @PathVariable(value = "projectId") projectId : Int ) : ProjectIssueTypeHierarchy
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectKeyOrIdIssuesecuritylevelschemeService {
      [[ Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme")
      operation com_atlassian_jira_rest_v2_issue_ProjectIssueSecurityLevelSchemeResource_getIssueSecurityScheme_get( @PathVariable(value = "projectKeyOrId") projectKeyOrId : String ) : SecurityScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectKeyOrIdNotificationschemeService {
      [[ Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project. See the [Get notification scheme](#api-rest-api-3-notificationscheme-id-get) resource for more information about notification schemes.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectKeyOrId}/notificationscheme")
      operation com_atlassian_jira_rest_v2_notification_ProjectNotificationSchemeResource_getNotificationScheme_get( @PathVariable(value = "projectKeyOrId") projectKeyOrId : String,  expand : String ) : NotificationScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectKeyOrIdPermissionschemeService {
      [[ Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectKeyOrId}/permissionscheme")
      operation com_atlassian_jira_rest_v2_permission_ProjectPermissionSchemeResource_getAssignedPermissionScheme_get( @PathVariable(value = "projectKeyOrId") projectKeyOrId : String,  expand : String ) : PermissionScheme
      [[ Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/project/{projectKeyOrId}/permissionscheme")
      operation com_atlassian_jira_rest_v2_permission_ProjectPermissionSchemeResource_assignPermissionScheme_put( @PathVariable(value = "projectKeyOrId") projectKeyOrId : String,  expand : String, @RequestBody idBean : IdBean ) : PermissionScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectProjectKeyOrIdSecuritylevelService {
      [[ Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/project/{projectKeyOrId}/securitylevel")
      operation com_atlassian_jira_rest_v2_securitylevel_ProjectSecurityLevelResource_getSecurityLevelsForProject_get( @PathVariable(value = "projectKeyOrId") projectKeyOrId : String ) : ProjectIssueSecurityLevels
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectCategoryService {
      [[ Returns all project categories.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/projectCategory")
      operation com_atlassian_jira_rest_v2_issue_ProjectCategoryResource_getAllProjectCategories_get(  ) : ProjectCategory[]
      [[ Creates a project category.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/projectCategory")
      operation com_atlassian_jira_rest_v2_issue_ProjectCategoryResource_createProjectCategory_post( @RequestBody projectCategory : ProjectCategory ) : ProjectCategory
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectCategoryIdService {
      [[ Returns a project category.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/projectCategory/{id}")
      operation com_atlassian_jira_rest_v2_issue_ProjectCategoryResource_getProjectCategoryById_get( @PathVariable(value = "id") id : Int ) : ProjectCategory
      [[ Updates a project category.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/projectCategory/{id}")
      operation com_atlassian_jira_rest_v2_issue_ProjectCategoryResource_updateProjectCategory_put( @PathVariable(value = "id") id : Int, @RequestBody projectCategory : ProjectCategory ) : UpdatedProjectCategory
      [[ Deletes a project category.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/projectCategory/{id}")
      operation com_atlassian_jira_rest_v2_issue_ProjectCategoryResource_removeProjectCategory_delete( @PathVariable(value = "id") id : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectvalidateKeyService {
      [[ Validates a project key by confirming the key is a valid string and not in use.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/projectvalidate/key")
      operation com_atlassian_jira_rest_v2_issue_ProjectValidateResource_validateProjectKey_get(  key : String ) : ErrorCollection
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectvalidateValidProjectKeyService {
      [[ Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/projectvalidate/validProjectKey")
      operation com_atlassian_jira_rest_v2_issue_ProjectValidateResource_getValidProjectKey_get(  key : String ) : String
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ProjectvalidateValidProjectNameService {
      [[ Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/projectvalidate/validProjectName")
      operation com_atlassian_jira_rest_v2_issue_ProjectValidateResource_getValidProjectName_get(  name : String ) : String
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ResolutionService {
      [[ Returns a list of all issue resolution values.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/resolution")
      operation com_atlassian_jira_rest_v2_issue_ResolutionResource_getResolutions_get(  ) : Resolution[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ResolutionIdService {
      [[ Returns an issue resolution value.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/resolution/{id}")
      operation com_atlassian_jira_rest_v2_issue_ResolutionResource_getResolution_get( @PathVariable(value = "id") id : String ) : Resolution
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3RoleService {
      [[ Gets a list of all project roles, complete with project role details and default actors.
      ### About project roles ###
      [Project roles](https://confluence.atlassian.com/x/3odKLg) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).
      Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.
      #### Members and actors ####
      In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.
      Actors may be set as [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying'defaultmembers'foraprojectrole) of the project role or set at the project level:
      *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
      *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/role")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_getAllProjectRoles_get(  ) : ProjectRole[]
      [[ Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.
      *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/role")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_createProjectRole_post( @RequestBody createUpdateRoleRequestBean : CreateUpdateRoleRequestBean ) : ProjectRole
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3RoleIdService {
      [[ Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_getProjectRoleById_get( @PathVariable(value = "id") id : Int ) : ProjectRole
      [[ Updates the project role's name and description. You must include both a name and a description in the request.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_fullyUpdateProjectRole_put( @PathVariable(value = "id") id : Int, @RequestBody createUpdateRoleRequestBean : CreateUpdateRoleRequestBean ) : ProjectRole
      [[ Updates either the project role's name or its description.
      You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_partialUpdateProjectRole_post( @PathVariable(value = "id") id : Int, @RequestBody createUpdateRoleRequestBean : CreateUpdateRoleRequestBean ) : ProjectRole
      [[ Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/role/{id}")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_deleteProjectRole_delete( @PathVariable(value = "id") id : Int,  swap : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3RoleIdActorsService {
      [[ Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/role/{id}/actors")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_getProjectRoleActorsForRole_get( @PathVariable(value = "id") id : Int ) : ProjectRole
      [[ Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.
      Changing a project role's default actors does not affect project role members for projects already created.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/role/{id}/actors")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_addProjectRoleActorsToRole_post( @PathVariable(value = "id") id : Int, @RequestBody actorInputBean : ActorInputBean ) : ProjectRole
      [[ Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.
      Changing a project role's default actors does not affect project role members for projects already created.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/role/{id}/actors")
      operation com_atlassian_jira_rest_v2_issue_project_RoleResource_deleteProjectRoleActorsFromRole_delete( @PathVariable(value = "id") id : Int,  user : String,  group : String ) : ProjectRole
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensService {
      [[ Returns all screens.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/screens")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_getAllScreens_get(  startAt : Int,  maxResults : Int ) : PageBeanScreen
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensAddToDefaultFieldIdService {
      [[ Adds a field to the default tab of the default screen.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/screens/addToDefault/{fieldId}")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_addFieldToDefaultScreen_post( @PathVariable(value = "fieldId") fieldId : String ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensScreenIdAvailableFieldsService {
      [[ Returns the fields that can be added to a tab on a screen.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/screens/{screenId}/availableFields")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_getAvailableScreenFields_get( @PathVariable(value = "screenId") screenId : Int ) : ScreenableField[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensScreenIdTabsService {
      [[ Returns the list of tabs for a screen.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/screens/{screenId}/tabs")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_getAllScreenTabs_get( @PathVariable(value = "screenId") screenId : Int,  projectKey : String ) : ScreenableTab[]
      [[ Creates a tab for a screen.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/screens/{screenId}/tabs")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_addScreenTab_post( @PathVariable(value = "screenId") screenId : Int, @RequestBody screenableTab : ScreenableTab ) : ScreenableTab
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensScreenIdTabsTabIdService {
      [[ Updates the name of a screen tab.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/screens/{screenId}/tabs/{tabId}")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_renameScreenTab_put( @PathVariable(value = "screenId") screenId : Int, @PathVariable(value = "tabId") tabId : Int, @RequestBody screenableTab : ScreenableTab ) : ScreenableTab
      [[ Deletes a screen tab.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/screens/{screenId}/tabs/{tabId}")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_deleteScreenTab_delete( @PathVariable(value = "screenId") screenId : Int, @PathVariable(value = "tabId") tabId : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensScreenIdTabsTabIdFieldsService {
      [[ Returns all fields for a screen tab.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_getAllScreenTabFields_get( @PathVariable(value = "screenId") screenId : Int, @PathVariable(value = "tabId") tabId : Int,  projectKey : String ) : ScreenableField[]
      [[ Adds a field to a screen tab.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_addScreenTabField_post( @PathVariable(value = "screenId") screenId : Int, @PathVariable(value = "tabId") tabId : Int, @RequestBody addFieldBean : AddFieldBean ) : ScreenableField
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensScreenIdTabsTabIdFieldsIdService {
      [[ Removes a field from a screen tab.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_removeScreenTabField_delete( @PathVariable(value = "screenId") screenId : Int, @PathVariable(value = "tabId") tabId : Int, @PathVariable(value = "id") id : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensScreenIdTabsTabIdFieldsIdMoveService {
      [[ Moves a screen tab field.
      If `after` and `position` are provided in the request, `position` is ignored.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_moveScreenTabField_post( @PathVariable(value = "screenId") screenId : Int, @PathVariable(value = "tabId") tabId : Int, @PathVariable(value = "id") id : String, @RequestBody moveFieldBean : MoveFieldBean ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreensScreenIdTabsTabIdMovePosService {
      [[ Moves a screen tab.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}")
      operation com_atlassian_jira_rest_v2_issue_ScreensResource_moveScreenTab_post( @PathVariable(value = "screenId") screenId : Int, @PathVariable(value = "tabId") tabId : Int, @PathVariable(value = "pos") pos : Int ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ScreenschemeService {
      [[ Returns all screen schemes.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/screenscheme")
      operation com_atlassian_jira_rest_v2_issue_screenscheme_ScreenSchemeResource_getAllScreenSchemes_get(  startAt : Int,  maxResults : Int ) : PageBeanScreenScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3SearchService {
      [[ Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
      If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Issues are included in the response where the user has:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/search")
      operation com_atlassian_jira_rest_v2_search_SearchResource_searchForIssuesUsingJql_get(  jql : String,  startAt : Int,  maxResults : Int,  validateQuery : String,  fields : String[],  expand : String,  properties : String[],  fieldsByKeys : Boolean ) : SearchResults
      [[ Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
      There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** Issues are included in the response where the user has:
      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
      *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/search")
      operation com_atlassian_jira_rest_v2_search_SearchResource_searchForIssuesUsingJql_post( @RequestBody searchRequestBean : SearchRequestBean ) : SearchResults
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3SecuritylevelIdService {
      [[ Returns details of an issue security level.
      Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/securitylevel/{id}")
      operation com_atlassian_jira_rest_v2_issue_IssueSecurityLevelResource_getIssueSecurityLevel_get( @PathVariable(value = "id") id : String ) : SecurityLevel
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3ServerInfoService {
      [[ Returns information about the Jira instance.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/serverInfo")
      operation com_atlassian_jira_rest_v2_ServerInfoResource_getServerInfo_get(  ) : ServerInformation
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3SettingsColumnsService {
      [[ Returns the default issue navigator columns.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/settings/columns")
      operation com_atlassian_jira_rest_v2_admin_SettingsResource_getIssueNavigatorDefaultColumns_get(  ) : ColumnItem[]
      [[ Sets the default issue navigator columns.
      The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:
      `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`
      If no column details are sent, then all default columns are removed.
      A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/settings/columns")
      operation com_atlassian_jira_rest_v2_admin_SettingsResource_setIssueNavigatorDefaultColumns_put( @RequestBody array : String[] ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3StatusService {
      [[ Returns a list of all statuses associated with workflows.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/status")
      operation com_atlassian_jira_rest_v2_issue_StatusResource_getStatuses_get(  ) : StatusDetails[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3StatusIdOrNameService {
      [[ Returns a status. The status must be associated with a workflow to be returned.
      If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.
      This operation can be accessed anonymously.
      [Permissions](#permissions) required: None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/status/{idOrName}")
      operation com_atlassian_jira_rest_v2_issue_StatusResource_getStatus_get( @PathVariable(value = "idOrName") idOrName : String ) : StatusDetails
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3StatuscategoryService {
      [[ Returns a list of all status categories.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/statuscategory")
      operation com_atlassian_jira_rest_v2_issue_StatusCategoryResource_getStatusCategories_get(  ) : StatusCategory[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3StatuscategoryIdOrKeyService {
      [[ Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/statuscategory/{idOrKey}")
      operation com_atlassian_jira_rest_v2_issue_StatusCategoryResource_getStatusCategory_get( @PathVariable(value = "idOrKey") idOrKey : String ) : StatusCategory
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3TaskTaskIdService {
      [[ Returns the status of a [long-running asynchronous task](#async).
      When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.
      **[Permissions](#permissions) required:** either of:
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      *  Creator of the task. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/task/{taskId}")
      operation com_atlassian_jira_rest_v2_task_TaskResource_getTask_get( @PathVariable(value = "taskId") taskId : String ) : TaskProgressBeanObject
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3TaskTaskIdCancelService {
      [[ Cancels a task.
      **[Permissions](#permissions) required:** either of:
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      *  Creator of the task. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/task/{taskId}/cancel")
      operation com_atlassian_jira_rest_v2_task_TaskResource_cancelTask_post( @PathVariable(value = "taskId") taskId : String ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3Universal_avatarTypeTypeOwnerEntityIdService {
      [[ Returns the system and custom avatars for a project or issue type.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}")
      operation com_atlassian_jira_rest_v2_issue_UniversalAvatarResource_getAvatars_get( @PathVariable(value = "type") `type` : String, @PathVariable(value = "entityId") entityId : String ) : Avatars
      [[ Loads a custom avatar for a project or issue type.
      Specify the avatar's local file location in the body of the request. Also, include the following headers:
      *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
      *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
      For example:
      `curl --request POST `
      `--user email@example.com:<api_token> `
      `--header 'X-Atlassian-Token: no-check' `
      `--header 'Content-Type: image/< image_type>' `
      `--data-binary "<@/path/to/file/with/your/avatar>" `
      `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`
      The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
      The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
      After creating the avatar use:
      *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
      *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}")
      operation com_atlassian_jira_rest_v2_issue_UniversalAvatarResource_storeAvatar_post( @PathVariable(value = "type") `type` : String, @PathVariable(value = "entityId") entityId : String,  `x` : Int,  `y` : Int,  size : Int, @RequestBody any : Any ) : Avatar
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3Universal_avatarTypeTypeOwnerOwningObjectIdAvatarIdService {
      [[ Deletes an avatar from a project or issue type.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}")
      operation com_atlassian_jira_rest_v2_issue_UniversalAvatarResource_deleteAvatar_delete( @PathVariable(value = "type") `type` : String, @PathVariable(value = "owningObjectId") owningObjectId : String, @PathVariable(value = "id") id : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserService {
      [[ Returns a user.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user")
      operation com_atlassian_jira_rest_v2_issue_UserResource_getUser_get(  accountId : String,  username : String,  key : String,  expand : String ) : User
      [[ Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
      The option is provided to set or generate a password for the user. When using the option to generate a password, by omitting `password` from the request, include `"notification": "true"` to ensure the user is sent an email advising them that their account is created. This email includes a link for the user to set their password. If the notification isn't sent for a generated password, the user will need to be sent a reset password request from Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/user")
      operation com_atlassian_jira_rest_v2_issue_UserResource_createUser_post( @RequestBody userWriteBean : UserWriteBean ) : User
      [[ Deletes a user.
      **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/user")
      operation com_atlassian_jira_rest_v2_issue_UserResource_removeUser_delete(  accountId : String,  username : String,  key : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserAssignableMultiProjectSearchService {
      [[ Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.
      This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** None. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/assignable/multiProjectSearch")
      operation com_atlassian_jira_rest_v2_issue_UserResource_findBulkAssignableUsers_get(  `query` : String,  username : String,  accountId : String,  projectKeys : String,  startAt : Int,  maxResults : Int ) : User[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserAssignableSearchService {
      [[ Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:
      *  a new issue, by providing the `projectKeyOrId`.
      *  an updated issue, by providing the `issueKey`.
      *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).
      In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.
      This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/assignable/search")
      operation com_atlassian_jira_rest_v2_issue_UserResource_findAssignableUsers_get(  `query` : String,  sessionId : String,  username : String,  accountId : String,  project : String,  issueKey : String,  startAt : Int,  maxResults : Int,  actionDescriptorId : Int,  recommend : Boolean ) : User[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserBulkService {
      [[ Returns details of the users specified by one or more account IDs.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/bulk")
      operation com_atlassian_jira_rest_v2_user_UserBulkResource_bulkGetUsers_get(  startAt : Int,  maxResults : Int,  username : String[],  key : String[],  accountId : String[] ) : PageBeanUser
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserBulkMigrationService {
      [[ Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/bulk/migration")
      operation com_atlassian_jira_rest_v2_user_UserBulkResource_bulkGetUsersMigration_get(  startAt : Int,  maxResults : Int,  username : String[],  key : String[] ) : UserMigrationBean[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserColumnsService {
      [[ Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
      *  Permission to access Jira, to get the calling user's column details. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/columns")
      operation com_atlassian_jira_rest_v2_issue_UserResource_getUserDefaultColumns_get(  accountId : String,  username : String ) : ColumnItem[]
      [[ Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.
      The parameters for this resource are expressed as HTML form data. For example, in curl:
      `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
      *  Permission to access Jira, to set the calling user's columns. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/user/columns")
      operation com_atlassian_jira_rest_v2_issue_UserResource_setUserColumns_put(  accountId : String, @RequestBody array : String[] ) : Any
      [[ Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
      *  Permission to access Jira, to set the calling user's columns. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/user/columns")
      operation com_atlassian_jira_rest_v2_issue_UserResource_resetUserColumns_delete(  accountId : String,  username : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserEmailService {
      [[ Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/email")
      operation com_atlassian_jira_rest_v2_user_UnrestrictedUserEmailResource_getUserEmail_get(  accountId : String ) : UnrestrictedUserEmail
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserEmailBulkService {
      [[ Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/email/bulk")
      operation com_atlassian_jira_rest_v2_user_UnrestrictedUserEmailResource_getUserEmailBulk_get(  accountId : String[] ) : UnrestrictedUserEmail
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserGroupsService {
      [[ Returns the groups to which a user belongs.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/groups")
      operation com_atlassian_jira_rest_v2_issue_UserResource_getUserGroups_get(  accountId : String,  username : String,  key : String ) : GroupName[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserPermissionSearchService {
      [[ Returns a list of users who fulfill these criteria:
      *  their user attributes match a search string.
      *  they have a set of permissions for a project or issue.
      If no search string is provided, a list of all users with the permissions is returned.
      This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
      *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/permission/search")
      operation com_atlassian_jira_rest_v2_issue_UserResource_findUsersWithAllPermissions_get(  `query` : String,  username : String,  accountId : String,  permissions : String,  issueKey : String,  projectKey : String,  startAt : Int,  maxResults : Int ) : User[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserPickerService {
      [[ Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.
      This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/picker")
      operation com_atlassian_jira_rest_v2_issue_UserResource_findUsersForPicker_get(  `query` : String,  maxResults : Int,  showAvatar : Boolean,  exclude : String[],  excludeAccountIds : String[],  avatarSize : String,  excludeConnectUsers : Boolean ) : FoundUsers
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserPropertiesService {
      [[ Returns the keys of all properties for a user.
      Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
      *  Access to Jira, to access the calling user's property keys. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/properties")
      operation com_atlassian_jira_rest_v2_userproperty_UserPropertyResource_getUserPropertyKeys_get(  accountId : String,  userKey : String,  username : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserPropertiesPropertyKeyService {
      [[ Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.
      Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
      *  Access to Jira, to get a property from the calling user's record. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_userproperty_UserPropertyResource_getUserProperty_get(  accountId : String,  userKey : String,  username : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Sets the value of a user's property. Use this resource to store custom data against a user.
      Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
      *  Access to Jira, to set a property on the calling user's record. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/user/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_userproperty_UserPropertyResource_setUserProperty_put(  accountId : String,  userKey : String,  username : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : Any
      [[ Deletes a property from a user.
      Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
      **[Permissions](#permissions) required:**
      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
      *  Access to Jira, to delete a property from the calling user's record. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/user/properties/{propertyKey}")
      operation com_atlassian_jira_rest_v2_userproperty_UserPropertyResource_deleteUserProperty_delete(  accountId : String,  userKey : String,  username : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserSearchService {
      [[ Returns a list of users that match the search string and property.
      This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and property. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/search")
      operation com_atlassian_jira_rest_v2_issue_UserResource_findUsers_get(  `query` : String,  username : String,  accountId : String,  startAt : Int,  maxResults : Int,  property : String ) : User[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserSearchQueryService {
      [[ Finds users with a structured query and returns user details.
      This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      The query statements are:
      *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
      *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
      *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
      *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
      *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
      *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
      *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
      *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
      The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
      `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"` ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/search/query")
      operation com_atlassian_jira_rest_v2_search_UserSearchResource_findUsersByQuery_get(  `query` : String,  startAt : Int,  maxResults : Int ) : PageBeanUser
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserSearchQueryKeyService {
      [[ Finds users with a structured query and returns a list of user keys.
      This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
      The query statements are:
      *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
      *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
      *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
      *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
      *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
      *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
      *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
      *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
      The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
      `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"` ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/search/query/key")
      operation com_atlassian_jira_rest_v2_search_UserSearchResource_findUserKeysByQuery_get(  `query` : String,  startAt : Int,  maxResults : Int ) : PageBeanUserKey
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UserViewissueSearchService {
      [[ Returns a list of users who fulfill these criteria:
      *  their user attributes match a search string.
      *  they have permission to browse issues.
      Use this resource to find users who can browse:
      *  an issue, by providing the `issueKey`.
      *  any issue in a project, by providing the `projectKey`.
      This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/user/viewissue/search")
      operation com_atlassian_jira_rest_v2_issue_UserResource_findUsersWithBrowsePermission_get(  `query` : String,  username : String,  accountId : String,  issueKey : String,  projectKey : String,  startAt : Int,  maxResults : Int ) : User[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3UsersSearchService {
      [[ Returns a list of all (active and inactive) users.
      **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/users/search")
      operation com_atlassian_jira_rest_v2_issue_UsersResource_getAllUsers_get(  startAt : Int,  maxResults : Int ) : User[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3VersionService {
      [[ Creates a project version.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/version")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_createVersion_post( @RequestBody version : Version ) : Version
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3VersionIdService {
      [[ Returns a project version.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/version/{id}")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_getVersion_get( @PathVariable(value = "id") id : String,  expand : String ) : Version
      [[ Updates a project version.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/version/{id}")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_updateVersion_put( @PathVariable(value = "id") id : String, @RequestBody version : Version ) : Version
      [[ Deletes a project version.
      Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.
      Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/version/{id}")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_deleteVersion_delete( @PathVariable(value = "id") id : String,  moveFixIssuesTo : String,  moveAffectedIssuesTo : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3VersionIdMergetoMoveIssuesToService {
      [[ Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.
      Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/version/{id}/mergeto/{moveIssuesTo}")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_mergeVersions_put( @PathVariable(value = "id") id : String, @PathVariable(value = "moveIssuesTo") moveIssuesTo : String ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3VersionIdMoveService {
      [[ Modifies the version's sequence within the project, which affects the display order of the versions in Jira.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/version/{id}/move")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_moveVersion_post( @PathVariable(value = "id") id : String, @RequestBody versionMoveBean : VersionMoveBean ) : Version
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3VersionIdRelatedIssueCountsService {
      [[ Returns the following counts for a version:
      *  Number of issues where the `fixVersion` is set to the version.
      *  Number of issues where the `affectedVersion` is set to the version.
      *  Number of issues where a version custom field is set to the version.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/version/{id}/relatedIssueCounts")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_getVersionRelatedIssues_get( @PathVariable(value = "id") id : String ) : VersionIssueCounts
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3VersionIdRemoveAndSwapService {
      [[ Deletes a project version.
      Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/version/{id}/removeAndSwap")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_deleteAndReplaceVersion_post( @PathVariable(value = "id") id : String, @RequestBody deleteAndReplaceVersionBean : DeleteAndReplaceVersionBean ) : Any
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3VersionIdUnresolvedIssueCountService {
      [[ Returns counts of the issues and unresolved issues for the project version.
      This operation can be accessed anonymously.
      **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/version/{id}/unresolvedIssueCount")
      operation com_atlassian_jira_rest_v2_issue_VersionResource_getVersionUnresolvedIssues_get( @PathVariable(value = "id") id : String ) : VersionUnresolvedIssuesCount
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WebhookService {
      [[ Returns the webhooks registered by the calling app.
      **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/webhook")
      operation com_atlassian_jira_rest_v2_webhook_DynamicWebhookResource_getDynamicWebhooksForApp_get(  startAt : Int,  maxResults : Int ) : PageBeanWebhook
      [[ Registers webhooks.
      **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/webhook")
      operation com_atlassian_jira_rest_v2_webhook_DynamicWebhookResource_registerDynamicWebhooks_post( @RequestBody webhookRegistrationDetails : WebhookRegistrationDetails ) : ContainerForRegisteredWebhooks
      [[ Removes webhooks by ID. Only webhooks registered by the calling Connect app are removed. If webhooks created by other apps are specified, they are ignored.
      **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/webhook")
      operation com_atlassian_jira_rest_v2_webhook_DynamicWebhookResource_deleteWebhookById_delete( @RequestBody containerForWebhookIDs : ContainerForWebhookIDs )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WebhookFailedService {
      [[ Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.
      After 72 hours the failure may no longer be returned by this operation.
      The oldest failure is returned first.
      This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.
      **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/webhook/failed")
      operation com_atlassian_jira_rest_v2_webhook_FailedWebhookResource_getFailedWebhooks_get(  maxResults : Int,  after : Int ) : FailedWebhooks
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WebhookRefreshService {
      [[ Webhooks registered through the REST API expire after 30 days. Call this resource periodically to keep them alive.
      Unrecognized webhook IDs (nonexistent or belonging to other apps) are ignored.
      **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect) can use this operation. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/webhook/refresh")
      operation com_atlassian_jira_rest_v2_webhook_DynamicWebhookResource_refreshWebhooks_put( @RequestBody containerForWebhookIDs : ContainerForWebhookIDs ) : WebhooksExpirationDate
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowService {
      [[ Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).
      If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflow")
      operation com_atlassian_jira_rest_v2_admin_WorkflowsResource_getAllWorkflows_get(  workflowName : String ) : DeprecatedWorkflow[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowRuleConfigService {
      [[ Returns a paginated list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:
      *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
      *  matching one or more transition rule keys.
      Only workflows containing transition rules created by the calling Connect app are returned. However, if a workflow is returned all transition rules that match the filters are returned for that workflow.
      Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.
      **[Permissions](#permissions) required:** Only Connect apps can use this operation. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflow/rule/config")
      operation com_atlassian_jira_rest_v2_admin_workflow_WorkflowRuleConfigResource_getWorkflowTransitionRuleConfigurations_get(  startAt : Int,  maxResults : Int,  types : String[],  keys : String[],  expand : String ) : PageBeanWorkflowTransitionRules
      [[ Updates configuration of workflow transition rules. The following rule types are supported:
      *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
      *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
      *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
      Only rules created by the calling Connect app can be updated.
      **[Permissions](#permissions) required:** Only Connect apps can use this operation. ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflow/rule/config")
      operation com_atlassian_jira_rest_v2_admin_workflow_WorkflowRuleConfigResource_updateWorkflowTransitionRuleConfigurations_put( @RequestBody workflowTransitionRulesUpdate : WorkflowTransitionRulesUpdate ) : WorkflowTransitionRulesUpdateErrors
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowSearchService {
      [[ Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.
      This operation does not return next-gen workflows.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflow/search")
      operation com_atlassian_jira_rest_v2_admin_workflow_WorkflowSearchResource_getWorkflowsPaginated_get(  startAt : Int,  maxResults : Int,  workflowName : String[],  expand : String ) : PageBeanWorkflow
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowTransitionsTransitionIdPropertiesService {
      [[ Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflow/transitions/{transitionId}/properties")
      operation com_atlassian_jira_rest_v2_admin_WorkflowTransitionResource_getWorkflowTransitionProperties_get( @PathVariable(value = "transitionId") transitionId : Int,  includeReservedKeys : Boolean,  key : String,  workflowName : String,  workflowMode : String ) : WorkflowTransitionProperty
      [[ Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflow/transitions/{transitionId}/properties")
      operation com_atlassian_jira_rest_v2_admin_WorkflowTransitionResource_updateWorkflowTransitionProperty_put( @PathVariable(value = "transitionId") transitionId : Int,  key : String,  workflowName : String,  workflowMode : String, @RequestBody workflowTransitionProperty : WorkflowTransitionProperty ) : WorkflowTransitionProperty
      [[ Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/workflow/transitions/{transitionId}/properties")
      operation com_atlassian_jira_rest_v2_admin_WorkflowTransitionResource_createWorkflowTransitionProperty_post( @PathVariable(value = "transitionId") transitionId : Int,  key : String,  workflowName : String,  workflowMode : String, @RequestBody workflowTransitionProperty : WorkflowTransitionProperty ) : WorkflowTransitionProperty
      [[ Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflow/transitions/{transitionId}/properties")
      operation com_atlassian_jira_rest_v2_admin_WorkflowTransitionResource_deleteWorkflowTransitionProperty_delete( @PathVariable(value = "transitionId") transitionId : Int,  key : String,  workflowName : String,  workflowMode : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeService {
      [[ Returns a paginated list of all workflow schemes, not including draft workflow schemes.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getAllWorkflowSchemes_get(  startAt : Int,  maxResults : Int ) : WorkflowScheme[]
      [[ Creates a workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/workflowscheme")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_createWorkflowScheme_post( @RequestBody workflowScheme : WorkflowScheme ) : WorkflowScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeProjectService {
      [[ Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any next-gen or non-existent projects in the request are ignored and no errors are returned.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/project")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_project_WorkflowSchemeProjectResource_getWorkflowSchemeProjectAssociations_get(  projectId : Int[] ) : ContainerOfWorkflowSchemeAssociations
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdService {
      [[ Returns a workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getWorkflowScheme_get( @PathVariable(value = "id") id : Int,  returnDraftIfExists : Boolean ) : WorkflowScheme
      [[ Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_updateWorkflowScheme_put( @PathVariable(value = "id") id : Int, @RequestBody workflowScheme : WorkflowScheme ) : WorkflowScheme
      [[ Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteWorkflowScheme_delete( @PathVariable(value = "id") id : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdCreatedraftService {
      [[ Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/workflowscheme/{id}/createdraft")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_createWorkflowSchemeDraftFromParent_post( @PathVariable(value = "id") id : Int ) : WorkflowScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdDefaultService {
      [[ Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}/default")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getDefaultWorkflow_get( @PathVariable(value = "id") id : Int,  returnDraftIfExists : Boolean ) : DefaultWorkflow
      [[ Sets the default workflow for a workflow scheme.
      Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}/default")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_updateDefaultWorkflow_put( @PathVariable(value = "id") id : Int, @RequestBody defaultWorkflow : DefaultWorkflow ) : WorkflowScheme
      [[ Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
      Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}/default")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteDefaultWorkflow_delete( @PathVariable(value = "id") id : Int,  updateDraftIfNeeded : Boolean ) : WorkflowScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdDraftService {
      [[ Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.
      Note that:
      *  Only active workflow schemes can have draft workflow schemes.
      *  An active workflow scheme can only have one draft workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}/draft")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getWorkflowSchemeDraft_get( @PathVariable(value = "id") id : Int ) : WorkflowScheme
      [[ Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}/draft")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_updateWorkflowSchemeDraft_put( @PathVariable(value = "id") id : Int, @RequestBody workflowScheme : WorkflowScheme ) : WorkflowScheme
      [[ Deletes a draft workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}/draft")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteWorkflowSchemeDraft_delete( @PathVariable(value = "id") id : Int )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdDraftDefaultService {
      [[ Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}/draft/default")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getDraftDefaultWorkflow_get( @PathVariable(value = "id") id : Int ) : DefaultWorkflow
      [[ Sets the default workflow for a workflow scheme's draft.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}/draft/default")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_updateDraftDefaultWorkflow_put( @PathVariable(value = "id") id : Int, @RequestBody defaultWorkflow : DefaultWorkflow ) : WorkflowScheme
      [[ Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}/draft/default")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteDraftDefaultWorkflow_delete( @PathVariable(value = "id") id : Int ) : WorkflowScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdDraftIssuetypeIssueTypeService {
      [[ Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getWorkflowSchemeDraftIssueType_get( @PathVariable(value = "id") id : Int, @PathVariable(value = "issueType") issueType : String ) : IssueTypeWorkflowMapping
      [[ Sets the workflow for an issue type in a workflow scheme's draft.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_setWorkflowSchemeDraftIssueType_put( @PathVariable(value = "id") id : Int, @PathVariable(value = "issueType") issueType : String, @RequestBody issueTypeWorkflowMapping : IssueTypeWorkflowMapping ) : WorkflowScheme
      [[ Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteWorkflowSchemeDraftIssueType_delete( @PathVariable(value = "id") id : Int, @PathVariable(value = "issueType") issueType : String ) : WorkflowScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdDraftWorkflowService {
      [[ Returns the workflow-issue type mappings for a workflow scheme's draft.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}/draft/workflow")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getDraftWorkflow_get( @PathVariable(value = "id") id : Int,  workflowName : String ) : IssueTypesWorkflowMapping
      [[ Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}/draft/workflow")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_updateDraftWorkflowMapping_put( @PathVariable(value = "id") id : Int,  workflowName : String, @RequestBody issueTypesWorkflowMapping : IssueTypesWorkflowMapping ) : WorkflowScheme
      [[ Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}/draft/workflow")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteDraftWorkflowMapping_delete( @PathVariable(value = "id") id : Int,  workflowName : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdIssuetypeIssueTypeService {
      [[ Returns the issue type-workflow mapping for an issue type in a workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getWorkflowSchemeIssueType_get( @PathVariable(value = "id") id : Int, @PathVariable(value = "issueType") issueType : String,  returnDraftIfExists : Boolean ) : IssueTypeWorkflowMapping
      [[ Sets the workflow for an issue type in a workflow scheme.
      Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_setWorkflowSchemeIssueType_put( @PathVariable(value = "id") id : Int, @PathVariable(value = "issueType") issueType : String, @RequestBody issueTypeWorkflowMapping : IssueTypeWorkflowMapping ) : WorkflowScheme
      [[ Deletes the issue type-workflow mapping for an issue type in a workflow scheme.
      Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteWorkflowSchemeIssueType_delete( @PathVariable(value = "id") id : Int, @PathVariable(value = "issueType") issueType : String,  updateDraftIfNeeded : Boolean ) : WorkflowScheme
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorkflowschemeIdWorkflowService {
      [[ Returns the workflow-issue type mappings for a workflow scheme.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/workflowscheme/{id}/workflow")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_getWorkflow_get( @PathVariable(value = "id") id : Int,  workflowName : String,  returnDraftIfExists : Boolean ) : IssueTypesWorkflowMapping
      [[ Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.
      Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "PUT" , url = "/rest/api/3/workflowscheme/{id}/workflow")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_updateWorkflowMapping_put( @PathVariable(value = "id") id : Int,  workflowName : String, @RequestBody issueTypesWorkflowMapping : IssueTypesWorkflowMapping ) : WorkflowScheme
      [[ Deletes the workflow-issue type mapping for a workflow in a workflow scheme.
      Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.
      **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). ]]
      @HttpOperation(method = "DELETE" , url = "/rest/api/3/workflowscheme/{id}/workflow")
      operation com_atlassian_jira_rest_v2_admin_workflowscheme_WorkflowSchemeResource_deleteWorkflowMapping_delete( @PathVariable(value = "id") id : Int,  workflowName : String,  updateDraftIfNeeded : Boolean )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorklogDeletedService {
      [[ Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.
      This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
      This resource does not return worklogs deleted during the minute preceding the request.
      **[Permissions](#permissions) required:** Permission to access Jira. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/worklog/deleted")
      operation com_atlassian_jira_rest_v2_issue_worklog_WorklogResource_getIdsOfWorklogsDeletedSince_get(  since : Int ) : ChangedWorklogs
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorklogListService {
      [[ Returns worklog details for a list of worklog IDs.
      The returned list of worklogs is limited to 1000 items.
      **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
      *  the worklog is set as *Viewable by All Users*.
      *  the user is a member of a project role or group with permission to view the worklog. ]]
      @HttpOperation(method = "POST" , url = "/rest/api/3/worklog/list")
      operation com_atlassian_jira_rest_v2_issue_worklog_WorklogResource_getWorklogsForIds_post(  expand : String, @RequestBody worklogIdsRequestBean : WorklogIdsRequestBean ) : Worklog[]
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestApi3WorklogUpdatedService {
      [[ Returns a list of IDs and update timestamps for worklogs updated after a date and time.
      This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
      This resource does not return worklogs updated during the minute preceding the request.
      **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
      *  the worklog is set as *Viewable by All Users*.
      *  the user is a member of a project role or group with permission to view the worklog. ]]
      @HttpOperation(method = "GET" , url = "/rest/api/3/worklog/updated")
      operation com_atlassian_jira_rest_v2_issue_worklog_WorklogResource_getIdsOfWorklogsModifiedSince_get(  since : Int,  expand : String ) : ChangedWorklogs
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestAtlassian_connect1AddonsAddonKeyPropertiesService {
      [[ Gets all the properties of an app.
      **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. ]]
      @HttpOperation(method = "GET" , url = "/rest/atlassian-connect/1/addons/{addonKey}/properties")
      operation AddonPropertiesResource_getAddonProperties_get( @PathVariable(value = "addonKey") addonKey : String ) : PropertyKeys
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestAtlassian_connect1AddonsAddonKeyPropertiesPropertyKeyService {
      [[ Returns the key and value of an app's property.
      **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. ]]
      @HttpOperation(method = "GET" , url = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}")
      operation AddonPropertiesResource_getAddonProperty_get( @PathVariable(value = "addonKey") addonKey : String, @PathVariable(value = "propertyKey") propertyKey : String ) : EntityProperty
      [[ Sets the value of an app's property. Use this resource to store custom data for your app.
      The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
      **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. ]]
      @HttpOperation(method = "PUT" , url = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}")
      operation AddonPropertiesResource_putAddonProperty_put( @PathVariable(value = "addonKey") addonKey : String, @PathVariable(value = "propertyKey") propertyKey : String, @RequestBody any : Any ) : OperationMessage
      [[ Deletes an app's property.
      **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}")
      operation AddonPropertiesResource_deleteAddonProperty_delete( @PathVariable(value = "addonKey") addonKey : String, @PathVariable(value = "propertyKey") propertyKey : String )
   }
   @ServiceDiscoveryClient(serviceName = "http://myjira/")
   service RestAtlassian_connect1AppModuleDynamicService {
      [[ Returns all modules registered dynamically by the calling app.
      **[Permissions](#permissions) required:** Only Connect apps can make this request. ]]
      @HttpOperation(method = "GET" , url = "/rest/atlassian-connect/1/app/module/dynamic")
      operation DynamicModulesResource_getModules_get(  ) : ConnectModules
      [[ Registers a list of modules.
      **[Permissions](#permissions) required:** Only Connect apps can make this request. ]]
      @HttpOperation(method = "POST" , url = "/rest/atlassian-connect/1/app/module/dynamic")
      operation DynamicModulesResource_registerModules_post( @RequestBody connectModules : ConnectModules )
      [[ Remove all or a list of modules registered by the calling app.
      **[Permissions](#permissions) required:** Only Connect apps can make this request. ]]
      @HttpOperation(method = "DELETE" , url = "/rest/atlassian-connect/1/app/module/dynamic")
      operation DynamicModulesResource_removeModules_delete(  moduleKey : String[] )
   }
}