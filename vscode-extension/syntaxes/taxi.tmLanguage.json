{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "taxi",
	"scopeName": "source.taxi",
	"patterns": [
		{
			"include": "#directives"
		},
		{
			"include": "#statements"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#declaration"
				},
				{
					"include": "#decl-block"
				},
				{
					"include": "#label"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				},
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				}
			]
		},
		"declaration": {
			"patterns": [
				{
					"include": "#decorator"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#interface-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#service-declaration"
				},
				{
					"include": "#namespace-declaration"
				},
				{
					"include": "#inherits-declaration"
				},
				{
					"include": "#policy-declaration"
				},
				{
					"include": "#against-declaration"
				},	
				{
					"include": "#read-declaration"
				},
				{
					"include": "#write-declaration"
				},	
				{
					"include": "#case-declaration"
				},
				{
					"include": "#else-declaration"
				},
				{
					"include": "#type-alias-declaration"
				},
				{
					"include": "#import-equals-declaration"
				},
				{
					"include": "#import-declaration"
				},
				{
					"name": "storage.modifier.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(declare|export)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"label": {
			"patterns": [
				{
					"begin": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)(?=\\s*\\{)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.label.taxi"
						},
						"2": {
							"name": "punctuation.separator.label.taxi"
						}
					},
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#decl-block"
						}
					]
				},
				{
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(:)",
					"captures": {
						"1": {
							"name": "entity.name.label.taxi"
						},
						"2": {
							"name": "punctuation.separator.label.taxi"
						}
					}
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#expressionWithoutIdentifiers"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#expressionPunctuations"
				}
			]
		},
		"expressionWithoutIdentifiers": {
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#function-expression"
				},
				{
					"include": "#ternary-expression"
				},
				{
					"include": "#new-expr"
				},
				{
					"include": "#instanceof-expr"
				},
				{
					"include": "#object-literal"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#support-objects"
				},
				{
					"include": "#paren-expression"
				}
			]
		},
		"expressionPunctuations": {
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-accessor"
				}
			]
		},
		"decorator": {
			"name": "meta.decorator.taxi",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))\\@",
			"beginCaptures": {
				"0": {
					"name": "punctuation.decorator.taxi"
				}
			},
			"end": "(?=\\s)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"variable-initializer": {
			"patterns": [
				{
					"begin": "(?<!=|!)(=)(?!=)(?=\\s*\\S)(?!\\s*.*=>\\s*$)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.taxi"
						}
					},
					"end": "(?=$|^|[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "(?<!=|!)(=)(?!=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.taxi"
						}
					},
					"end": "(?=[,);}\\]]|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(of|in)\\s+))|(?=^\\s*$)|(?<=\\S)(?<!=)(?=\\s*$)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"method-declaration-name": {
			"begin": "(?x)(?=((\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$))|(\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$))|((?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\]))\\s*(\\??)\\s*[\\(\\<])",
			"end": "(?=\\(|\\<)",
			"patterns": [
				{
					"include": "#string"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"name": "keyword.operator.optional.taxi",
					"match": "\\?"
				}
			]
		},
		"service-declaration": {
			"name": "meta.enum.declaration.taxi",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(service)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.modifier.taxi"
				},
				"4": {
					"name": "storage.type.enum.taxi"
				},
				"5": {
					"name": "entity.name.type.enum.taxi"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.block.taxi"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.block.taxi"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.other.enummember.taxi"
								}
							},
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"begin": "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#array-literal"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"enum-declaration": {
			"name": "meta.enum.declaration.taxi",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?(?:\\b(const)\\s+)?\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.modifier.taxi"
				},
				"4": {
					"name": "storage.type.enum.taxi"
				},
				"5": {
					"name": "entity.name.type.enum.taxi"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.block.taxi"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.block.taxi"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"begin": "([_$[:alpha:]][_$[:alnum:]]*)",
							"beginCaptures": {
								"0": {
									"name": "variable.other.enummember.taxi"
								}
							},
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"begin": "(?=((\\'([^\\'\\\\]|\\\\.)*\\')|(\\\"([^\\\"\\\\]|\\\\.)*\\\")|(\\`([^\\`\\\\]|\\\\.)*\\`)|(\\[([^\\[\\]]|\\[[^\\[\\]]*\\])+\\])))",
							"end": "(?=,|\\}|$)",
							"patterns": [
								{
									"include": "#string"
								},
								{
									"include": "#array-literal"
								},
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"namespace-declaration": {
			"name": "meta.namespace.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(namespace|module|type)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.namespace.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"else-declaration": {
			"name": "meta.against.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(else|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.policy.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var|service|operation|inherits|policy|against|read|write|case|else)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"case-declaration": {
			"name": "meta.against.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(case|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.policy.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var|service|operation|inherits|policy|against|read|write|case|else)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"write-declaration": {
			"name": "meta.against.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(write|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.policy.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var|service|operation|inherits|policy|against|read|write|case|else)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"read-declaration": {
			"name": "meta.against.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(read|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.policy.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var|service|operation|inherits|policy|against|read|write|case|else)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"against-declaration": {
			"name": "meta.against.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(against|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.policy.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var|service|operation|inherits|policy|against|read|write|case|else)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"policy-declaration": {
			"name": "meta.inherits.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(policy|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.policy.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var|service|operation|inherits|policy|against|read|write|case|else)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"inherits-declaration": {
			"name": "meta.inherits.declaration.taxi",
			"begin": "(?:(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(inherits|module)\\s+(?=[_$[:alpha:]\"'`]))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.inherits.taxi"
				}
			},
			"end": "(?<=\\})|(?=;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var|service|operation|inherits|policy|against|read|write|case|else)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"name": "entity.name.type.module.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"include": "#decl-block"
				}
			]
		},
		"type-alias-declaration": {
			"name": "meta.type.declaration.taxi",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(type)\\b\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "storage.type.type.taxi"
				},
				"4": {
					"name": "entity.name.type.alias.taxi"
				}
			},
			"end": "(?=\\}|;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#type-parameters"
				},
				{
					"begin": "(=)\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.taxi"
						}
					},
					"end": "(?=\\}|;|(?:^\\s*(?:declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\\b))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"import-equals-declaration": {
			"patterns": [
				{
					"name": "meta.import-equals.external.taxi",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(require)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.taxi"
						},
						"2": {
							"name": "storage.modifier.taxi"
						},
						"3": {
							"name": "keyword.control.import.taxi"
						},
						"4": {
							"name": "keyword.control.type.taxi"
						},
						"5": {
							"name": "variable.other.readwrite.alias.taxi"
						},
						"6": {
							"name": "keyword.operator.assignment.taxi"
						},
						"7": {
							"name": "keyword.control.require.taxi"
						},
						"8": {
							"name": "meta.brace.round.taxi"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.taxi"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#string"
						}
					]
				},
				{
					"name": "meta.import-equals.internal.taxi",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type))?\\s+([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)\\s*(?!require\\b)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.export.taxi"
						},
						"2": {
							"name": "storage.modifier.taxi"
						},
						"3": {
							"name": "keyword.control.import.taxi"
						},
						"4": {
							"name": "keyword.control.type.taxi"
						},
						"5": {
							"name": "variable.other.readwrite.alias.taxi"
						},
						"6": {
							"name": "keyword.operator.assignment.taxi"
						}
					},
					"end": "(?=;|$|^)",
					"patterns": [
						{
							"include": "#single-line-comment-consuming-line-ending"
						},
						{
							"include": "#comment"
						},
						{
							"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
							"captures": {
								"1": {
									"name": "entity.name.type.module.taxi"
								},
								"2": {
									"name": "punctuation.accessor.taxi"
								},
								"3": {
									"name": "punctuation.accessor.optional.taxi"
								}
							}
						},
						{
							"name": "variable.other.readwrite.taxi",
							"match": "([_$[:alpha:]][_$[:alnum:]]*)"
						}
					]
				}
			]
		},
		"import-declaration": {
			"name": "meta.import.taxi",
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(?:(\\bexport)\\s+)?(?:(\\bdeclare)\\s+)?\\b(import)(?:\\s+(type)(?!\\s+from))?(?!\\s*[:\\(])(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.export.taxi"
				},
				"2": {
					"name": "storage.modifier.taxi"
				},
				"3": {
					"name": "keyword.control.import.taxi"
				},
				"4": {
					"name": "keyword.control.type.taxi"
				}
			},
			"end": "(?<!^import|[^\\._$[:alnum:]]import)(?=;|$|^)",
			"patterns": [
				{
					"include": "#single-line-comment-consuming-line-ending"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"begin": "(?<=^import|[^\\._$[:alnum:]]import)(?!\\s*[\"'])",
					"end": "\\bfrom\\b",
					"endCaptures": {
						"0": {
							"name": "keyword.control.from.taxi"
						}
					},
					"patterns": []
				}
			]
		},
		"decl-block": {
			"name": "meta.block.taxi",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.taxi"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.taxi"
				}
			},
			"patterns": [
				{
					"include": "#statements"
				}
			]
		},
		"object-literal": {
			"name": "meta.objectliteral.taxi",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.taxi"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.taxi"
				}
			},
			"patterns": [
				{
					"include": "#object-member"
				}
			]
		},
		"object-member": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#object-literal-method-declaration"
				},
				{
					"name": "meta.method.declaration.taxi",
					"begin": "(?<=[\\]\\'\\\"\\`])(?=\\s*[\\(\\<])",
					"end": "(?=\\}|;|,)|(?<=\\})",
					"patterns": [
					]
				},
				{
					"name": "meta.object.member.taxi",
					"match": "(?![_$[:alpha:]])([[:digit:]]+)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.taxi"
						},
						"1": {
							"name": "constant.numeric.decimal.taxi"
						}
					}
				},
							{
					"name": "meta.object.member.taxi",
					"match": "(?:[_$[:alpha:]][_$[:alnum:]]*)\\s*(?=(\\/\\*([^\\*]|(\\*[^\\/]))*\\*\\/\\s*)*:)",
					"captures": {
						"0": {
							"name": "meta.object-literal.key.taxi"
						}
					}
				},
				{
					"name": "meta.object.member.taxi",
					"match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(?=,|\\}|$|\\/\\/|\\/\\*)",
					"captures": {
						"1": {
							"name": "variable.other.readwrite.taxi"
						}
					}
				},
				{
					"name": "meta.object.member.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+(const)(?=\\s*([,}]|$))",
					"captures": {
						"1": {
							"name": "keyword.control.as.taxi"
						},
						"2": {
							"name": "storage.modifier.taxi"
						}
					}
				},
				{
					"name": "meta.object.member.taxi",
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.as.taxi"
						}
					},
					"end": "(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|^|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(as)\\s+))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "meta.object.member.taxi",
					"begin": "(?=[_$[:alpha:]][_$[:alnum:]]*\\s*=)",
					"end": "(?=,|\\}|$|\\/\\/|\\/\\*)",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"ternary-expression": {
			"begin": "(?!\\?\\.\\s*[^[:digit:]])(\\?)(?!\\?)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.ternary.taxi"
				}
			},
			"end": "\\s*(:)",
			"endCaptures": {
				"1": {
					"name": "keyword.operator.ternary.taxi"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"instanceof-expr": {
			"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(instanceof)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.instanceof.taxi"
				}
			},
			"end": "(?<=\\))|(?=[;),}\\]:?\\-\\+\\>]|\\|\\||\\&\\&|\\!\\=\\=|$|(([\\&\\~\\^\\|]\\s*)?[_$[:alpha:]][_$[:alnum:]]*\\s+instanceof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.)))|((?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))function((\\s+[_$[:alpha:]][_$[:alnum:]]*)|(\\s*[\\(]))))",
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"paren-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.round.taxi"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "meta.brace.round.taxi"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#undefined-literal"
				},
				{
					"include": "#numericConstant-literal"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#this-literal"
				}
			]
		},
		"array-literal": {
			"name": "meta.array.literal.taxi",
			"begin": "\\s*(\\[)",
			"beginCaptures": {
				"1": {
					"name": "meta.brace.square.taxi"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.taxi"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"numeric-literal": {
			"patterns": [
				{
					"name": "constant.numeric.hex.taxi",
					"match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.taxi"
						}
					}
				},
				{
					"name": "constant.numeric.binary.taxi",
					"match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
					"captures": {
						"1": {
							"name": "storage.type.numeric.bigint.taxi"
						}
					}
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))true(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.boolean.false.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))false(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.taxi",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))null(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"this-literal": {
			"name": "variable.language.this.taxi",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))this\\b(?!\\$)"
		},
		"undefined-literal": {
			"name": "constant.language.undefined.taxi",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))undefined(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"numericConstant-literal": {
			"patterns": [
				{
					"name": "constant.language.nan.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "constant.language.infinity.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				}
			]
		},
		"type-annotation": {
			"patterns": [
				{
					"name": "meta.type.annotation.taxi",
					"begin": "(:)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.taxi"
						}
					},
					"end": "(?<![:|&])((?=$|^|[,);\\}\\]]|//)|(?==[^>])|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				{
					"name": "meta.type.annotation.taxi",
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.taxi"
						}
					},
					"end": "(?<![:|&])((?=[,);\\}\\]]|//)|(?==[^>])|(?=^\\s*$)|((?<=\\S)(?=\\s*$))|((?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)))",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"parameter-type-annotation": {
			"patterns": [
				{
					"name": "meta.type.annotation.taxi",
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.taxi"
						}
					},
					"end": "(?=[,)])|(?==[^>])",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"return-type": {
			"patterns": [
				{
					"name": "meta.return.type.taxi",
					"begin": "(?<=\\))\\s*(:)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.taxi"
						}
					},
					"end": "(?<![:|&])(?=$|^|[{};,]|//)",
					"patterns": [
						{
							"include": "#return-type-core"
						}
					]
				},
				{
					"name": "meta.return.type.taxi",
					"begin": "(?<=\\))\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.type.annotation.taxi"
						}
					},
					"end": "(?<![:|&])((?=[{};,]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
					"patterns": [
						{
							"include": "#return-type-core"
						}
					]
				}
			]
		},
		"return-type-core": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?<=[:|&])(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-parameters": {
			"name": "meta.type.parameters.taxi",
			"begin": "(<)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.begin.taxi"
				}
			},
			"end": "(>)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.typeparameters.end.taxi"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"name": "storage.modifier.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"name": "keyword.operator.assignment.taxi",
					"match": "(=)(?!>)"
				}
			]
		},
		"type-arguments": {
			"name": "meta.type.parameters.taxi",
			"begin": "\\<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.taxi"
				}
			},
			"end": "\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.taxi"
				}
			},
			"patterns": [
				{
					"include": "#type-arguments-body"
				}
			]
		},
		"type-arguments-body": {
			"patterns": [
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(_)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
					"captures": {
						"0": {
							"name": "keyword.operator.type.taxi"
						}
					}
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#type-primitive"
				},
				{
					"include": "#type-builtin-literals"
				},
				{
					"include": "#type-parameters"
				},
				{
					"include": "#type-tuple"
				},
				{
					"include": "#type-object"
				},
				{
					"include": "#type-conditional"
				},
				{
					"include": "#type-operators"
				},
				{
					"include": "#type-fn-type-parameters"
				},
				{
					"include": "#type-function-return-type"
				},
				{
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(readonly)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))\\s*",
					"captures": {
						"1": {
							"name": "storage.modifier.taxi"
						}
					}
				},
				{
					"include": "#type-name"
				}
			]
		},
		"type-primitive": {
			"name": "support.type.primitive.taxi",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(string|number|bigint|boolean|symbol|any|Void|never|unknown)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"type-builtin-literals": {
			"name": "support.type.builtin.taxi",
			"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
		},
		"type-tuple": {
			"name": "meta.type.tuple.taxi",
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "meta.brace.square.taxi"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "meta.brace.square.taxi"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-object": {
			"name": "meta.object.type.taxi",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.taxi"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.taxi"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#punctuation-semicolon"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-conditional": {
			"patterns": [
				{
					"begin": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends)\\s+",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.taxi"
						}
					},
					"end": "(?<=:)",
					"patterns": [
						{
							"begin": "\\?",
							"beginCaptures": {
								"0": {
									"name": "keyword.operator.ternary.taxi"
								}
							},
							"end": ":",
							"endCaptures": {
								"0": {
									"name": "keyword.operator.ternary.taxi"
								}
							},
							"patterns": [
								{
									"include": "#type"
								}
							]
						},
						{
							"include": "#type"
						}
					]
				}
			]
		},
		"type-function-return-type": {
			"patterns": [
				{
					"name": "meta.type.function.return.taxi",
					"begin": "(=>)(?=\\s*\\S)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.arrow.taxi"
						}
					},
					"end": "(?<!=>)(?<![|&])(?=[,\\]\\)\\{\\}=;>:\\?]|//|$)",
					"patterns": [
						{
							"include": "#type-function-return-type-core"
						}
					]
				},
				{
					"name": "meta.type.function.return.taxi",
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "storage.type.function.arrow.taxi"
						}
					},
					"end": "(?<!=>)(?<![|&])((?=[,\\]\\)\\{\\}=;:\\?>]|//|^\\s*$)|((?<=\\S)(?=\\s*$)))",
					"patterns": [
						{
							"include": "#type-function-return-type-core"
						}
					]
				}
			]
		},
		"type-function-return-type-core": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "(?<==>)(?=\\s*\\{)",
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"include": "#type-predicate-operator"
				},
				{
					"include": "#type"
				}
			]
		},
		"type-operators": {
			"patterns": [
				{
					"begin": "([&|])(?=\\s*\\{)",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.type.taxi"
						}
					},
					"end": "(?<=\\})",
					"patterns": [
						{
							"include": "#type-object"
						}
					]
				},
				{
					"begin": "[&|]",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.type.taxi"
						}
					},
					"end": "(?=\\S)"
				},
				{
					"name": "keyword.operator.expression.keyof.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))keyof(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
				},
				{
					"name": "keyword.operator.ternary.taxi",
					"match": "(\\?|\\:)"
				},
				{
					"name": "keyword.operator.expression.infer.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))infer(?=\\s+[_$[:alpha:]])"
				},
				{
					"name": "keyword.operator.expression.import.taxi",
					"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))import(?=\\s*\\()"
				}
			]
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.taxi",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.taxi",
			"match": ";"
		},
		"punctuation-accessor": {
			"match": "(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))",
			"captures": {
				"1": {
					"name": "punctuation.accessor.taxi"
				},
				"2": {
					"name": "punctuation.accessor.optional.taxi"
				}
			}
		},
		"string": {
			"patterns": [
				{
					"include": "#template"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.taxi",
			"match": "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\\{[0-9A-Fa-f]+\\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)"
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.taxi",
					"begin": "/\\*\\*(?!/)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.taxi"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.taxi"
						}
					},
					"patterns": [
						{
							"include": "#docblock"
						}
					]
				},
				{
					"name": "comment.block.taxi",
					"begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.taxi"
						},
						"2": {
							"name": "storage.type.internaldeclaration.taxi"
						},
						"3": {
							"name": "punctuation.decorator.internaldeclaration.taxi"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.taxi"
						}
					}
				},
				{
					"begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.taxi"
						},
						"2": {
							"name": "comment.line.double-slash.taxi"
						},
						"3": {
							"name": "punctuation.definition.comment.taxi"
						},
						"4": {
							"name": "storage.type.internaldeclaration.taxi"
						},
						"5": {
							"name": "punctuation.decorator.internaldeclaration.taxi"
						}
					},
					"end": "(?=$)",
					"contentName": "comment.line.double-slash.taxi"
				}
			]
		},
		"single-line-comment-consuming-line-ending": {
			"begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.taxi"
				},
				"2": {
					"name": "comment.line.double-slash.taxi"
				},
				"3": {
					"name": "punctuation.definition.comment.taxi"
				},
				"4": {
					"name": "storage.type.internaldeclaration.taxi"
				},
				"5": {
					"name": "punctuation.decorator.internaldeclaration.taxi"
				}
			},
			"end": "(?=^)",
			"contentName": "comment.line.double-slash.taxi"
		},
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"end": "}|(?=\\*/)",
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				},
				{
					"begin": "\\[",
					"end": "\\]|(?=\\*/)",
					"patterns": [
						{
							"include": "#brackets"
						}
					]
				}
			]
		}
	}
}
