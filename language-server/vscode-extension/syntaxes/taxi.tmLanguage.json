{
   "name": "Taxi",
   "scopeName": "source.taxi",
   "fileTypes": [
      "taxi"
   ],
   "patterns": [
      {
         "include": "#declaration"
      },
      {
         "include": "#statements"
      },
      {
         "name": "storage.type.taxi",
         "match": "\\b(type|type alias|enum|namespace|service|operation)\\b"
      },
      {
         "name": "storage.modifier.taxi",
         "match": "\\b(inherits)\\b"
      }
   ],
   "repository": {
      "declaration": {
         "name": "meta.declaration.taxi",
         "patterns": [
            {
               "include": "#annotation"
            },
            {
               "include": "#model-definition"
            },
            {
               "include": "#type-definition"
            },
            {
               "include": "#enum-declaration"
            }
         ]
      },
      "statements": {
         "patterns": [
            {
               "include": "#string"
            },
            {
               "include": "#comment"
            },
            {
               "include": "#literal"
            },
            {
               "include": "#declaration"
            }
         ]
      },
      "type-primitive": {
         "name": "support.type.primitive.taxi",
         "match": "\\b(Boolean|String|Int|Decimal|Date|Time|DateTime|Instant|Any|Double|Void)\\b"
      },
      "comment": {
         "patterns": [
            {
               "name": "comment.block.documentation.taxi",
               "begin": "/\\*\\*(?!/)",
               "beginCaptures": {
                  "0": {
                     "name": "punctuation.definition.comment.taxi"
                  }
               },
               "end": "\\*/",
               "endCaptures": {
                  "0": {
                     "name": "punctuation.definition.comment.taxi"
                  }
               },
               "patterns": [
                  {
                     "include": "#docblock"
                  }
               ]
            },
            {
               "name": "comment.block.taxidoc.taxi",
               "begin": "\\[\\[(?!/)",
               "beginCaptures": {
                  "0": {
                     "name": "punctuation.definition.comment.taxi"
                  }
               },
               "end": "\\]\\]",
               "endCaptures": {
                  "0": {
                     "name": "punctuation.definition.comment.taxi"
                  }
               }
            },
            {
               "name": "comment.block.taxi",
               "begin": "/\\*",
               "beginCaptures": {
                  "0": {
                     "name": "punctuation.definition.comment.taxi"
                  }
               },
               "end": "\\*/",
               "endCaptures": {
                  "0": {
                     "name": "punctuation.definition.comment.taxi"
                  }
               }
            },
            {
               "begin": "(^[ \\t]+)?(?=//)",
               "beginCaptures": {
                  "1": {
                     "name": "punctuation.whitespace.comment.leading.taxi"
                  }
               },
               "end": "(?=$)",
               "patterns": [
                  {
                     "name": "comment.line.double-slash.taxi",
                     "begin": "//",
                     "beginCaptures": {
                        "0": {
                           "name": "punctuation.definition.comment.taxi"
                        }
                     },
                     "end": "(?=$)"
                  }
               ]
            }
         ]
      },
      "type-definition": {
         "name": "meta.class.taxi",
         "begin": "\\b(?:(type))\\b",
         "beginCaptures": {
            "1": {
               "name": "storage.type.model.taxi"
            },
            "2": {
               "name": "storage.type.type.taxi"
            }
         },
         "end": "\\n",
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "include": "#type-inheritance"
            },
            {
               "match": "[_$[:alpha:]][_$[:alnum:]]*",
               "captures": {
                  "0": {
                     "name": "entity.name.type.class.taxi"
                  }
               }
            }
         ]
      },
      "annotation": {
         "name": "meta.decorator.taxi",
         "begin": "(?<!\\.|\\$)\\b\\@",
         "beginCaptures": {
            "0": {
               "name": "punctuation.decorator.taxi"
            }
         },
         "end": "(?=\\s)",
         "patterns": [
            {
               "include": "#expression"
            }
         ]
      },
      "model-definition": {
         "name": "meta.class.model.taxi",
         "begin": "\\b(?:(model))\\b",
         "beginCaptures": {
            "1": {
               "name": "storage.type.model.taxi"
            },
            "2": {
               "name": "storage.type.type.taxi"
            }
         },
         "end": "(?<=\\n\\})",
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "include": "#type-inheritance"
            },
            {
               "match": "[_$[:alpha:]][_$[:alnum:]]*",
               "captures": {
                  "0": {
                     "name": "entity.name.type.class.taxi"
                  }
               }
            },
            {
               "include": "#class-or-interface-body"
            }
         ]
      },
      "type-inheritance": {
         "begin": "(?<!\\.|\\$)(?:\\b(inherits)\\b)(?!\\$)",
         "beginCaptures": {
            "1": {
               "name": "storage.modifier.taxi"
            }
         },
         "end": "(?=(\\{|\\n))",
         "endCaptures": {
            "1": {
               "name": "punctuation.definition.block.taxi"
            }
         },
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "include": "#type-inheritance"
            },
            {
               "include": "#type-primitive"
            },
            {
               "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)(?=\\s*[_$[:alpha:]][_$[:alnum:]]*(\\s*\\.\\s*[_$[:alpha:]][_$[:alnum:]]*)*\\s*([,<{]|extends|implements|//|/\\*))",
               "captures": {
                  "1": {
                     "name": "entity.name.type.module.taxi"
                  },
                  "2": {
                     "name": "punctuation.accessor.taxi"
                  }
               }
            },
            {
               "match": "([_$[:alpha:]][_$[:alnum:]]*)(?=\\s*([,<{]|inherits|//|/\\*))",
               "captures": {
                  "1": {
                     "name": "entity.other.inherited-class.taxi"
                  }
               }
            },
            {
               "include": "#expression"
            }
         ]
      },
      "class-or-interface-body": {
         "begin": "\\{",
         "beginCaptures": {
            "0": {
               "name": "punctuation.definition.block.taxi"
            }
         },
         "end": "\\}",
         "endCaptures": {
            "0": {
               "name": "punctuation.definition.block.taxi"
            }
         },
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "include": "#annotation"
            },
            {
               "include": "#field-declaration"
            }
         ]
      },
      "field-declaration": {
         "name": "meta.field.declaration.taxi",
         "begin": "(?<!\\()(?:(?<!\\.|\\$)\\b(readonly)\\s+)?(?=(([_$[:alpha:]][_$[:alnum:]]*)|(\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]+\\])+\\]))\\s*(\\?\\s*)?(=|:))",
         "beginCaptures": {
            "1": {
               "name": "storage.modifier.taxi"
            }
         },
         "end": "(?=\\}|;|,|$)|(?<=\\})",
         "patterns": [
            {
               "include": "#variable-initializer"
            },
            {
               "begin": "(?=((?:[_$[:alpha:]][_$[:alnum:]]*)|(?:\\'[^']*\\')|(?:\\\"[^\"]*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]+\\])+\\]))\\s*(\\?\\s*)?(=|:))",
               "end": "(?=[};,=]|$)|(?<=\\})",
               "patterns": [
                  {
                     "include": "#type-annotation"
                  },
                  {
                     "include": "#string"
                  },
                  {
                     "include": "#array-literal"
                  },
                  {
                     "include": "#comment"
                  },
                  {
                     "name": "entity.name.function.taxi",
                     "match": "(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=(\\?\\s*)?\\s* (=\\s*( (async\\s+) | (function\\s*[(<]) | (function\\s+) | ([_$[:alpha:]][_$[:alnum:]]*\\s*=>) | ((<([^<>]|\\<[^<>]+\\>)+>\\s*)?\\(([^()]|\\([^()]*\\))*\\)(\\s*:\\s*(.)*)?\\s*=>)) ) | (:\\s*( (<) | ([(]\\s*( ([)]) | (\\.\\.\\.) | ([_$[:alnum:]]+\\s*( ([:,?=])| ([)]\\s*=>) )) ))) ))"
                  },
                  {
                     "name": "variable.object.property.taxi",
                     "match": "[_$[:alpha:]][_$[:alnum:]]*"
                  },
                  {
                     "name": "keyword.operator.optional.taxi",
                     "match": "\\?"
                  }
               ]
            }
         ]
      },
      "column-expression": {
         "name": "storage.modifier.column.taxi",
         "begin": "\\sby\\scolumn(\\s)*",
         "end": "\\)",
         "patterns": [
            {
               "include": "#string"
            }
         ]
      },
      "type-annotation": {
         "name": "meta.type.annotation.taxi",
         "begin": ":",
         "beginCaptures": {
            "0": {
               "name": "keyword.operator.type.annotation.taxi"
            }
         },
         "end": "(?=$|[,);\\}\\]]|//)|(?==[^>])|(?<=[\\}>\\]\\)]|[_$[:alpha:]])\\s*(?=\\{)",
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "include": "#type"
            },
            {
               "include": "#column-expression"
            }
         ]
      },
      "type": {
         "name": "meta.type.taxi",
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "include": "#type-primitive"
            },
            {
               "include": "#type-builtin-literals"
            },
            {
               "include": "#type-parameters"
            },
            {
               "include": "#type-object"
            },
            {
               "include": "#type-name"
            }
         ]
      },
      "type-name": {
         "patterns": [
            {
               "match": "([_$[:alpha:]][_$[:alnum:]]*)\\s*(\\.)",
               "captures": {
                  "1": {
                     "name": "entity.name.type.module.taxi"
                  },
                  "2": {
                     "name": "punctuation.accessor.taxi"
                  }
               }
            },
            {
               "name": "entity.name.type.taxi",
               "match": "[_$[:alpha:]][_$[:alnum:]]*"
            }
         ]
      },
      "type-parameters": {
         "name": "meta.type.parameters.taxi",
         "begin": "(<)",
         "beginCaptures": {
            "1": {
               "name": "punctuation.definition.typeparameters.begin.taxi"
            }
         },
         "end": "(?=$)|(>)",
         "endCaptures": {
            "1": {
               "name": "punctuation.definition.typeparameters.end.taxi"
            }
         },
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "name": "storage.modifier.taxi",
               "match": "(?<!\\.|\\$)\\b(extends)\\b(?!\\$)"
            },
            {
               "include": "#type"
            },
            {
               "include": "#punctuation-comma"
            }
         ]
      },
      "enum-declaration": {
         "name": "meta.enum.declaration.taxi",
         "begin": "\\b(enum)\\s+([_$[:alpha:]][_$[:alnum:]]*)",
         "beginCaptures": {
            "1": {
               "name": "keyword.control.export.taxi"
            },
            "2": {
               "name": "storage.modifier.taxi"
            },
            "3": {
               "name": "storage.type.enum.taxi"
            },
            "4": {
               "name": "entity.name.type.enum.taxi"
            }
         },
         "end": "(?<=\\})",
         "patterns": [
            {
               "include": "#comment"
            },
            {
               "begin": "\\{",
               "beginCaptures": {
                  "0": {
                     "name": "punctuation.definition.block.taxi"
                  }
               },
               "end": "\\}",
               "endCaptures": {
                  "0": {
                     "name": "punctuation.definition.block.taxi"
                  }
               },
               "patterns": [
                  {
                     "include": "#comment"
                  },
                  {
                     "begin": "([_$[:alpha:]][_$[:alnum:]]*)",
                     "beginCaptures": {
                        "0": {
                           "name": "variable.other.enummember.taxi"
                        }
                     },
                     "end": "(?=,|\\}|$)",
                     "patterns": [
                        {
                           "include": "#comment"
                        },
                        {
                           "include": "#variable-initializer"
                        }
                     ]
                  },
                  {
                     "begin": "(?=((\\'[^']*\\')|(\\\"[^\"]*\\\")|(\\[([^\\[\\]]|\\[[^\\[\\]]+\\])+\\])))",
                     "end": "(?=,|\\}|$)",
                     "patterns": [
                        {
                           "include": "#string"
                        },
                        {
                           "include": "#array-literal"
                        },
                        {
                           "include": "#comment"
                        },
                        {
                           "include": "#variable-initializer"
                        }
                     ]
                  },
                  {
                     "include": "#punctuation-comma"
                  }
               ]
            }
         ]
      },
      "literal": {
         "name": "literal.taxi",
         "patterns": [
            {
               "include": "#numeric-literal"
            },
            {
               "include": "#boolean-literal"
            },
            {
               "include": "#null-literal"
            },
            {
               "include": "#array-literal"
            }
         ]
      },
      "numeric-literal": {
         "patterns": [
            {
               "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
               "captures": {
                  "0": {
                     "name": "constant.numeric.decimal.taxi"
                  },
                  "1": {
                     "name": "meta.delimiter.decimal.period.taxi"
                  },
                  "2": {
                     "name": "meta.delimiter.decimal.period.taxi"
                  },
                  "3": {
                     "name": "meta.delimiter.decimal.period.taxi"
                  },
                  "4": {
                     "name": "meta.delimiter.decimal.period.taxi"
                  },
                  "5": {
                     "name": "meta.delimiter.decimal.period.taxi"
                  },
                  "6": {
                     "name": "meta.delimiter.decimal.period.taxi"
                  }
               }
            }
         ]
      },
      "boolean-literal": {
         "patterns": [
            {
               "name": "constant.language.boolean.true.taxi",
               "match": "(?<!\\.|\\$)\\btrue\\b(?!\\$)"
            },
            {
               "name": "constant.language.boolean.false.taxi",
               "match": "(?<!\\.|\\$)\\bfalse\\b(?!\\$)"
            }
         ]
      },
      "null-literal": {
         "name": "constant.language.null.taxi",
         "match": "(?<!\\.|\\$)\\bnull\\b(?!\\$)"
      },
      "array-literal": {
         "name": "meta.array.literal.taxi",
         "begin": "\\[",
         "beginCaptures": {
            "0": {
               "name": "meta.brace.square.taxi"
            }
         },
         "end": "\\]",
         "endCaptures": {
            "0": {
               "name": "meta.brace.square.taxi"
            }
         },
         "patterns": [
            {
               "include": "#expression"
            },
            {
               "include": "#punctuation-comma"
            }
         ]
      },
      "string": {
         "patterns": [
            {
               "include": "#qstring-single"
            },
            {
               "include": "#qstring-double"
            }
         ]
      },
      "qstring-single": {
         "name": "string.quoted.single.taxi",
         "begin": "'",
         "beginCaptures": {
            "0": {
               "name": "punctuation.definition.string.begin.taxi"
            }
         },
         "end": "(\\')|((?:[^\\\\\\n])$)",
         "endCaptures": {
            "1": {
               "name": "punctuation.definition.string.end.taxi"
            },
            "2": {
               "name": "invalid.illegal.newline.taxi"
            }
         },
         "patterns": [
            {
               "include": "#string-character-escape"
            }
         ]
      },
      "qstring-double": {
         "name": "string.quoted.double.taxi",
         "begin": "\"",
         "beginCaptures": {
            "0": {
               "name": "punctuation.definition.string.begin.taxi"
            }
         },
         "end": "(\")|((?:[^\\\\\\n])$)",
         "endCaptures": {
            "1": {
               "name": "punctuation.definition.string.end.taxi"
            },
            "2": {
               "name": "invalid.illegal.newline.taxi"
            }
         },
         "patterns": [
            {
               "include": "#string-character-escape"
            }
         ]
      }
   }
}
